
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  00003498  0000352c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800244  00800244  00003710  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000376c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000037a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049ac  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  0000840c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b1e  00000000  00000000  00009235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  0000bd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c5f  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000289a  00000000  00000000  0000ce9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000f735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	fa 04       	cpc	r15, r10
      56:	4e 05       	cpc	r20, r14
      58:	0f 05       	cpc	r16, r15
      5a:	39 05       	cpc	r19, r9
      5c:	4e 05       	cpc	r20, r14
      5e:	24 05       	cpc	r18, r4
      60:	0f 05       	cpc	r16, r15
      62:	39 05       	cpc	r19, r9
      64:	4e 05       	cpc	r20, r14
      66:	24 05       	cpc	r18, r4
      68:	39 05       	cpc	r19, r9
      6a:	4e 05       	cpc	r20, r14
      6c:	24 05       	cpc	r18, r4
      6e:	39 05       	cpc	r19, r9
      70:	24 05       	cpc	r18, r4
      72:	39 05       	cpc	r19, r9
      74:	72 05       	cpc	r23, r2
      76:	3e 06       	cpc	r3, r30
      78:	aa 06       	cpc	r10, r26
      7a:	0e 06       	cpc	r0, r30
      7c:	c0 05       	cpc	r28, r0
      7e:	74 06       	cpc	r7, r20
      80:	df 06       	cpc	r13, r31
      82:	26 06       	cpc	r2, r22
      84:	be 0e       	add	r11, r30
      86:	93 0d       	add	r25, r3
      88:	bc 0d       	add	r27, r12
      8a:	d0 0d       	add	r29, r0
      8c:	a7 0d       	add	r26, r7
      8e:	e5 0d       	add	r30, r5
      90:	11 0e       	add	r1, r17
      92:	27 0e       	add	r2, r23
      94:	fb 0d       	add	r31, r11
      96:	3d 0e       	add	r3, r29
      98:	01 0f       	add	r16, r17
      9a:	53 0e       	add	r5, r19
      9c:	89 0e       	add	r8, r25
      9e:	d7 0e       	add	r13, r23
      a0:	ec 0e       	add	r14, r28
      a2:	b3 14       	cp	r11, r3
      a4:	27 0f       	add	r18, r23
      a6:	fe 0f       	add	r31, r30
      a8:	0c 11       	cpse	r16, r12
      aa:	82 0f       	add	r24, r18
      ac:	ed 11       	cpse	r30, r13
      ae:	c4 12       	cpse	r12, r20
      b0:	d2 13       	cpse	r29, r18
      b2:	48 12       	cpse	r4, r24
      b4:	37 15       	cp	r19, r7
      b6:	39 15       	cp	r19, r9
      b8:	3b 15       	cp	r19, r11
      ba:	3d 15       	cp	r19, r13
      bc:	3f 15       	cp	r19, r15
      be:	41 15       	cp	r20, r1
      c0:	43 15       	cp	r20, r3
      c2:	5d 15       	cp	r21, r13
      c4:	5f 15       	cp	r21, r15
      c6:	61 15       	cp	r22, r1
      c8:	63 15       	cp	r22, r3
      ca:	65 15       	cp	r22, r5
      cc:	67 15       	cp	r22, r7
      ce:	69 15       	cp	r22, r9

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf e5       	ldi	r28, 0x5F	; 95
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e6       	ldi	r26, 0x60	; 96
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e8 e9       	ldi	r30, 0x98	; 152
      e4:	f4 e3       	ldi	r31, 0x34	; 52
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a4 34       	cpi	r26, 0x44	; 68
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	a4 e4       	ldi	r26, 0x44	; 68
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a5 39       	cpi	r26, 0x95	; 149
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 5f 0c 	call	0x18be	; 0x18be <main>
     106:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <LCD_Init>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void LCD_Init(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     10e:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     110:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     112:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     114:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
     116:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     118:	b8 9a       	sbi	0x17, 0	; 23
     11a:	08 95       	ret

0000011c <LCD_Write4Bit>:
	LCD_Write4Bit(theInstruction);                    // write the upper 4-bits of the data
	LCD_Write4Bit(theInstruction << 4);               // write the lower 4-bits of the data
}

void LCD_Write4Bit(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     11c:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     11e:	88 23       	and	r24, r24
     120:	0c f4       	brge	.+2      	; 0x124 <LCD_Write4Bit+0x8>
     122:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     124:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     126:	86 fd       	sbrc	r24, 6
     128:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
     12a:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     12c:	85 fd       	sbrc	r24, 5
     12e:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
     130:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     132:	84 fd       	sbrc	r24, 4
     134:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     136:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	8a eb       	ldi	r24, 0xBA	; 186
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Write4Bit+0x1e>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Write4Bit+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     140:	c1 98       	cbi	0x18, 1	; 24
     142:	8a eb       	ldi	r24, 0xBA	; 186
     144:	8a 95       	dec	r24
     146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Write4Bit+0x28>
     148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Write4Bit+0x2e>
     14a:	08 95       	ret

0000014c <LCD_WriteCharacter4Bit>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void LCD_WriteCharacter4Bit(uint8_t theData) {
     14c:	cf 93       	push	r28
     14e:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     150:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     152:	c1 98       	cbi	0x18, 1	; 24
	LCD_Write4Bit(theData);                           // write the upper 4-bits of the data
     154:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
	LCD_Write4Bit(theData << 4);                      // write the lower 4-bits of the data
     158:	8c 2f       	mov	r24, r28
     15a:	82 95       	swap	r24
     15c:	80 7f       	andi	r24, 0xF0	; 240
     15e:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
}
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <LCD_WriteString4Bit>:
	LCD_WriteInstruction4Bit(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void LCD_WriteString4Bit(char theString[]) {
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	00 d0       	rcall	.+0      	; 0x170 <LCD_WriteString4Bit+0xa>
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     176:	1a 82       	std	Y+2, r1	; 0x02
     178:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     17a:	e9 81       	ldd	r30, Y+1	; 0x01
     17c:	fa 81       	ldd	r31, Y+2	; 0x02
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	80 81       	ld	r24, Z
     184:	88 23       	and	r24, r24
     186:	c9 f0       	breq	.+50     	; 0x1ba <LCD_WriteString4Bit+0x54>
	{
	LCD_WriteCharacter4Bit(theString[i]);
     188:	e9 81       	ldd	r30, Y+1	; 0x01
     18a:	fa 81       	ldd	r31, Y+2	; 0x02
     18c:	e0 0f       	add	r30, r16
     18e:	f1 1f       	adc	r31, r17
     190:	80 81       	ld	r24, Z
     192:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCharacter4Bit>
	i++;
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	9a 81       	ldd	r25, Y+2	; 0x02
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	9a 83       	std	Y+2, r25	; 0x02
     19e:	89 83       	std	Y+1, r24	; 0x01
     1a0:	8f e3       	ldi	r24, 0x3F	; 63
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_WriteString4Bit+0x3e>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_WriteString4Bit+0x44>
     1aa:	00 00       	nop
}


void LCD_WriteString4Bit(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	fa 81       	ldd	r31, Y+2	; 0x02
     1b0:	e0 0f       	add	r30, r16
     1b2:	f1 1f       	adc	r31, r17
     1b4:	80 81       	ld	r24, Z
     1b6:	81 11       	cpse	r24, r1
     1b8:	e7 cf       	rjmp	.-50     	; 0x188 <LCD_WriteString4Bit+0x22>
	{
	LCD_WriteCharacter4Bit(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <LCD_WriteInstruction4Bit>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	LCD_Write4Bit(theData);                           // write the upper 4-bits of the data
	LCD_Write4Bit(theData << 4);                      // write the lower 4-bits of the data
}

void LCD_WriteInstruction4Bit(uint8_t theInstruction) {
     1c8:	cf 93       	push	r28
     1ca:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1cc:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1ce:	c1 98       	cbi	0x18, 1	; 24
	LCD_Write4Bit(theInstruction);                    // write the upper 4-bits of the data
     1d0:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
	LCD_Write4Bit(theInstruction << 4);               // write the lower 4-bits of the data
     1d4:	8c 2f       	mov	r24, r28
     1d6:	82 95       	swap	r24
     1d8:	80 7f       	andi	r24, 0xF0	; 240
     1da:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
}
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <LCD_Init4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e2:	2f ef       	ldi	r18, 0xFF	; 255
     1e4:	80 e7       	ldi	r24, 0x70	; 112
     1e6:	92 e0       	ldi	r25, 0x02	; 2
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	80 40       	sbci	r24, 0x00	; 0
     1ec:	90 40       	sbci	r25, 0x00	; 0
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <LCD_Init4bit+0x6>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_Init4bit+0x10>
     1f2:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'LCD_Write4Bit' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1f4:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1f6:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	LCD_Write4Bit(lcd_FunctionReset);                 // first part of reset sequence
     1f8:	80 e3       	ldi	r24, 0x30	; 48
     1fa:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
     1fe:	8f e3       	ldi	r24, 0x3F	; 63
     200:	9c e9       	ldi	r25, 0x9C	; 156
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Init4bit+0x20>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_Init4bit+0x26>
     208:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	LCD_Write4Bit(lcd_FunctionReset);                 // second part of reset sequence
     20a:	80 e3       	ldi	r24, 0x30	; 48
     20c:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     210:	87 e5       	ldi	r24, 0x57	; 87
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <LCD_Init4bit+0x32>
     218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_Init4bit+0x38>
     21a:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	LCD_Write4Bit(lcd_FunctionReset);                 // third part of reset sequence
     21c:	80 e3       	ldi	r24, 0x30	; 48
     21e:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
     222:	87 e5       	ldi	r24, 0x57	; 87
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <LCD_Init4bit+0x44>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_Init4bit+0x4a>
     22c:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	LCD_Write4Bit(lcd_FunctionSet4bit);               // set 4-bit mode
     22e:	88 e2       	ldi	r24, 0x28	; 40
     230:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Write4Bit>
     234:	90 ef       	ldi	r25, 0xF0	; 240
     236:	9a 95       	dec	r25
     238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Init4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	LCD_WriteInstruction4Bit(lcd_FunctionSet4bit);   // set mode, lines, and font
     23a:	88 e2       	ldi	r24, 0x28	; 40
     23c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
     240:	20 ef       	ldi	r18, 0xF0	; 240
     242:	2a 95       	dec	r18
     244:	f1 f7       	brne	.-4      	; 0x242 <LCD_Init4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	LCD_WriteInstruction4Bit(lcd_DisplayOff);        // turn display OFF
     246:	88 e0       	ldi	r24, 0x08	; 8
     248:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
     24c:	80 ef       	ldi	r24, 0xF0	; 240
     24e:	8a 95       	dec	r24
     250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Init4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	LCD_WriteInstruction4Bit(lcd_Clear);             // clear display RAM
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	8f e7       	ldi	r24, 0x7F	; 127
     25a:	9e e3       	ldi	r25, 0x3E	; 62
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_Init4bit+0x7a>
     260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Init4bit+0x80>
     262:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	LCD_WriteInstruction4Bit(lcd_EntryMode);         // set desired shift characteristics
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26a:	90 ef       	ldi	r25, 0xF0	; 240
     26c:	9a 95       	dec	r25
     26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Init4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	LCD_WriteInstruction4Bit(lcd_DisplayOn);         // turn the display ON
     270:	8c e0       	ldi	r24, 0x0C	; 12
     272:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
     276:	20 ef       	ldi	r18, 0xF0	; 240
     278:	2a 95       	dec	r18
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_Init4bit+0x96>
     27c:	08 95       	ret

0000027e <LCD_PrintLine>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}

void LCD_PrintLine(char *input_string, uint8_t line_number) {
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
	LCD_WriteInstruction4Bit(LCD_SET_CURSOR | line_number);
     284:	86 2f       	mov	r24, r22
     286:	80 68       	ori	r24, 0x80	; 128
     288:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
	LCD_WriteString4Bit(input_string);
     28c:	ce 01       	movw	r24, r28
     28e:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_WriteString4Bit>
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <LCD_ClearLine>:

void LCD_ClearLine(uint8_t line) {
	LCD_PrintLine("                    ", line);
     298:	68 2f       	mov	r22, r24
     29a:	80 e6       	ldi	r24, 0x60	; 96
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
     2a2:	08 95       	ret

000002a4 <LCD_Clear>:
}

void LCD_Clear() {
	LCD_ClearLine(LCD_LINE_1);
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_ClearLine>
	LCD_ClearLine(LCD_LINE_2);
     2aa:	80 e4       	ldi	r24, 0x40	; 64
     2ac:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_ClearLine>
	LCD_ClearLine(LCD_LINE_3);
     2b0:	84 e1       	ldi	r24, 0x14	; 20
     2b2:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_ClearLine>
	LCD_ClearLine(LCD_LINE_4);
     2b6:	84 e5       	ldi	r24, 0x54	; 84
     2b8:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_ClearLine>
     2bc:	08 95       	ret

000002be <LCD_PrintChar>:
}

void LCD_PrintChar(uint8_t ch_in, uint8_t line, uint8_t position) {
     2be:	cf 93       	push	r28
     2c0:	c8 2f       	mov	r28, r24
	LCD_WriteInstruction4Bit((LCD_SET_CURSOR | line) + position);
     2c2:	86 2f       	mov	r24, r22
     2c4:	80 68       	ori	r24, 0x80	; 128
     2c6:	84 0f       	add	r24, r20
     2c8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_WriteInstruction4Bit>
	LCD_WriteCharacter4Bit(ch_in);
     2cc:	8c 2f       	mov	r24, r28
     2ce:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_WriteCharacter4Bit>
}
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <Buzzer_Beep>:
	FunctionGenerator.output_type_B = OFF;
	FunctionGenerator.bias_A = 0; 
	FunctionGenerator.bias_B = 0;
	FunctionGenerator.bias_A_sign = POSITIVE;
	FunctionGenerator.bias_B_sign = POSITIVE;
}
     2d6:	84 e1       	ldi	r24, 0x14	; 20
     2d8:	db 9a       	sbi	0x1b, 3	; 27
     2da:	e3 e5       	ldi	r30, 0x53	; 83
     2dc:	f3 e0       	ldi	r31, 0x03	; 3
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <Buzzer_Beep+0x8>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <Buzzer_Beep+0xe>
     2e4:	00 00       	nop
     2e6:	db 98       	cbi	0x1b, 3	; 27
     2e8:	e3 e5       	ldi	r30, 0x53	; 83
     2ea:	f3 e0       	ldi	r31, 0x03	; 3
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <Buzzer_Beep+0x16>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <Buzzer_Beep+0x1c>
     2f2:	00 00       	nop
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	81 f7       	brne	.-32     	; 0x2d8 <Buzzer_Beep+0x2>
     2f8:	08 95       	ret

000002fa <Buzzer_PlayMelody>:
     2fa:	88 23       	and	r24, r24
     2fc:	b1 f1       	breq	.+108    	; 0x36a <Buzzer_PlayMelody+0x70>
     2fe:	8c ee       	ldi	r24, 0xEC	; 236
     300:	db 9a       	sbi	0x1b, 3	; 27
     302:	e3 e5       	ldi	r30, 0x53	; 83
     304:	f3 e0       	ldi	r31, 0x03	; 3
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <Buzzer_PlayMelody+0xc>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <Buzzer_PlayMelody+0x12>
     30c:	00 00       	nop
     30e:	db 98       	cbi	0x1b, 3	; 27
     310:	e3 e5       	ldi	r30, 0x53	; 83
     312:	f3 e0       	ldi	r31, 0x03	; 3
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <Buzzer_PlayMelody+0x1a>
     318:	00 c0       	rjmp	.+0      	; 0x31a <Buzzer_PlayMelody+0x20>
     31a:	00 00       	nop
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	81 f7       	brne	.-32     	; 0x300 <Buzzer_PlayMelody+0x6>
     320:	88 e2       	ldi	r24, 0x28	; 40
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	db 9a       	sbi	0x1b, 3	; 27
     326:	e3 ea       	ldi	r30, 0xA3	; 163
     328:	f2 e0       	ldi	r31, 0x02	; 2
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <Buzzer_PlayMelody+0x30>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <Buzzer_PlayMelody+0x36>
     330:	00 00       	nop
     332:	db 98       	cbi	0x1b, 3	; 27
     334:	e3 ea       	ldi	r30, 0xA3	; 163
     336:	f2 e0       	ldi	r31, 0x02	; 2
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <Buzzer_PlayMelody+0x3e>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <Buzzer_PlayMelody+0x44>
     33e:	00 00       	nop
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	81 f7       	brne	.-32     	; 0x324 <Buzzer_PlayMelody+0x2a>
     344:	8c e8       	ldi	r24, 0x8C	; 140
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	db 9a       	sbi	0x1b, 3	; 27
     34a:	e7 e3       	ldi	r30, 0x37	; 55
     34c:	f2 e0       	ldi	r31, 0x02	; 2
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <Buzzer_PlayMelody+0x54>
     352:	00 c0       	rjmp	.+0      	; 0x354 <Buzzer_PlayMelody+0x5a>
     354:	00 00       	nop
     356:	db 98       	cbi	0x1b, 3	; 27
     358:	e7 e3       	ldi	r30, 0x37	; 55
     35a:	f2 e0       	ldi	r31, 0x02	; 2
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <Buzzer_PlayMelody+0x62>
     360:	00 c0       	rjmp	.+0      	; 0x362 <Buzzer_PlayMelody+0x68>
     362:	00 00       	nop
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	81 f7       	brne	.-32     	; 0x348 <Buzzer_PlayMelody+0x4e>
     368:	08 95       	ret
     36a:	88 e2       	ldi	r24, 0x28	; 40
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	db 9a       	sbi	0x1b, 3	; 27
     370:	e3 ea       	ldi	r30, 0xA3	; 163
     372:	f2 e0       	ldi	r31, 0x02	; 2
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <Buzzer_PlayMelody+0x7a>
     378:	00 c0       	rjmp	.+0      	; 0x37a <Buzzer_PlayMelody+0x80>
     37a:	00 00       	nop
     37c:	db 98       	cbi	0x1b, 3	; 27
     37e:	e3 ea       	ldi	r30, 0xA3	; 163
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <Buzzer_PlayMelody+0x88>
     386:	00 c0       	rjmp	.+0      	; 0x388 <Buzzer_PlayMelody+0x8e>
     388:	00 00       	nop
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	81 f7       	brne	.-32     	; 0x36e <Buzzer_PlayMelody+0x74>
     38e:	8c ee       	ldi	r24, 0xEC	; 236
     390:	db 9a       	sbi	0x1b, 3	; 27
     392:	e3 e5       	ldi	r30, 0x53	; 83
     394:	f3 e0       	ldi	r31, 0x03	; 3
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <Buzzer_PlayMelody+0x9c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <Buzzer_PlayMelody+0xa2>
     39c:	00 00       	nop
     39e:	db 98       	cbi	0x1b, 3	; 27
     3a0:	e3 e5       	ldi	r30, 0x53	; 83
     3a2:	f3 e0       	ldi	r31, 0x03	; 3
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <Buzzer_PlayMelody+0xaa>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <Buzzer_PlayMelody+0xb0>
     3aa:	00 00       	nop
     3ac:	81 50       	subi	r24, 0x01	; 1
     3ae:	81 f7       	brne	.-32     	; 0x390 <Buzzer_PlayMelody+0x96>
     3b0:	80 e6       	ldi	r24, 0x60	; 96
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	db 9a       	sbi	0x1b, 3	; 27
     3b6:	ef e6       	ldi	r30, 0x6F	; 111
     3b8:	f4 e0       	ldi	r31, 0x04	; 4
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <Buzzer_PlayMelody+0xc0>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <Buzzer_PlayMelody+0xc6>
     3c0:	00 00       	nop
     3c2:	db 98       	cbi	0x1b, 3	; 27
     3c4:	ef e6       	ldi	r30, 0x6F	; 111
     3c6:	f4 e0       	ldi	r31, 0x04	; 4
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <Buzzer_PlayMelody+0xce>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <Buzzer_PlayMelody+0xd4>
     3ce:	00 00       	nop
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	81 f7       	brne	.-32     	; 0x3b4 <Buzzer_PlayMelody+0xba>
     3d4:	08 95       	ret

000003d6 <Main_ShutdownDevice>:
     3d6:	cf 93       	push	r28
     3d8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Buzzer_Beep>
     3dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Clear>
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	85 e7       	ldi	r24, 0x75	; 117
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
     3ea:	60 e4       	ldi	r22, 0x40	; 64
     3ec:	8a e8       	ldi	r24, 0x8A	; 138
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
     3f4:	64 e1       	ldi	r22, 0x14	; 20
     3f6:	8f e9       	ldi	r24, 0x9F	; 159
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
     3fe:	c5 e3       	ldi	r28, 0x35	; 53
     400:	43 e0       	ldi	r20, 0x03	; 3
     402:	64 e1       	ldi	r22, 0x14	; 20
     404:	8c 2f       	mov	r24, r28
     406:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
     40a:	2f ef       	ldi	r18, 0xFF	; 255
     40c:	89 e6       	ldi	r24, 0x69	; 105
     40e:	98 e1       	ldi	r25, 0x18	; 24
     410:	21 50       	subi	r18, 0x01	; 1
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	c1 50       	subi	r28, 0x01	; 1
     41e:	c0 33       	cpi	r28, 0x30	; 48
     420:	79 f7       	brne	.-34     	; 0x400 <__LOCK_REGION_LENGTH__>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Buzzer_PlayMelody>
     428:	da 98       	cbi	0x1b, 2	; 27
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <Init_Ports>:
     42e:	87 b3       	in	r24, 0x17	; 23
     430:	83 7f       	andi	r24, 0xF3	; 243
     432:	87 bb       	out	0x17, r24	; 23
     434:	88 b3       	in	r24, 0x18	; 24
     436:	8c 61       	ori	r24, 0x1C	; 28
     438:	88 bb       	out	0x18, r24	; 24
     43a:	84 b3       	in	r24, 0x14	; 20
     43c:	8c 6f       	ori	r24, 0xFC	; 252
     43e:	84 bb       	out	0x14, r24	; 20
     440:	d4 9a       	sbi	0x1a, 4	; 26
     442:	87 b3       	in	r24, 0x17	; 23
     444:	83 60       	ori	r24, 0x03	; 3
     446:	87 bb       	out	0x17, r24	; 23
     448:	81 b3       	in	r24, 0x11	; 17
     44a:	80 6f       	ori	r24, 0xF0	; 240
     44c:	81 bb       	out	0x11, r24	; 17
     44e:	8a b3       	in	r24, 0x1a	; 26
     450:	8c 7f       	andi	r24, 0xFC	; 252
     452:	8a bb       	out	0x1a, r24	; 26
     454:	87 b3       	in	r24, 0x17	; 23
     456:	80 6a       	ori	r24, 0xA0	; 160
     458:	87 bb       	out	0x17, r24	; 23
     45a:	be 98       	cbi	0x17, 6	; 23
     45c:	89 9a       	sbi	0x11, 1	; 17
     45e:	84 b3       	in	r24, 0x14	; 20
     460:	83 60       	ori	r24, 0x03	; 3
     462:	84 bb       	out	0x14, r24	; 20
     464:	8a 98       	cbi	0x11, 2	; 17
     466:	8a b3       	in	r24, 0x1a	; 26
     468:	8c 60       	ori	r24, 0x0C	; 12
     46a:	8a bb       	out	0x1a, r24	; 26
     46c:	08 95       	ret

0000046e <Init_ADC>:
     46e:	86 b1       	in	r24, 0x06	; 6
     470:	87 68       	ori	r24, 0x87	; 135
     472:	86 b9       	out	0x06, r24	; 6
     474:	3e 9a       	sbi	0x07, 6	; 7
     476:	08 95       	ret

00000478 <Init_Device>:
     478:	0e 94 17 02 	call	0x42e	; 0x42e <Init_Ports>
     47c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <Init_UART>
     480:	da 9a       	sbi	0x1b, 2	; 27
     482:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <SPI_InitAll>
     486:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Init>
     48a:	2f ef       	ldi	r18, 0xFF	; 255
     48c:	89 e6       	ldi	r24, 0x69	; 105
     48e:	98 e1       	ldi	r25, 0x18	; 24
     490:	21 50       	subi	r18, 0x01	; 1
     492:	80 40       	sbci	r24, 0x00	; 0
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	e1 f7       	brne	.-8      	; 0x490 <Init_Device+0x18>
     498:	00 c0       	rjmp	.+0      	; 0x49a <Init_Device+0x22>
     49a:	00 00       	nop
     49c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Init4bit>
     4a0:	0e 94 37 02 	call	0x46e	; 0x46e <Init_ADC>
     4a4:	08 95       	ret

000004a6 <FG_SelectOutputType>:
     4a6:	63 30       	cpi	r22, 0x03	; 3
     4a8:	41 f4       	brne	.+16     	; 0x4ba <FG_SelectOutputType+0x14>
     4aa:	85 30       	cpi	r24, 0x05	; 5
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <FG_SelectOutputType+0xc>
     4ae:	a8 98       	cbi	0x15, 0	; 21
     4b0:	08 95       	ret
     4b2:	86 30       	cpi	r24, 0x06	; 6
     4b4:	49 f4       	brne	.+18     	; 0x4c8 <FG_SelectOutputType+0x22>
     4b6:	a9 98       	cbi	0x15, 1	; 21
     4b8:	08 95       	ret
     4ba:	85 30       	cpi	r24, 0x05	; 5
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <FG_SelectOutputType+0x1c>
     4be:	a8 9a       	sbi	0x15, 0	; 21
     4c0:	08 95       	ret
     4c2:	86 30       	cpi	r24, 0x06	; 6
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <FG_SelectOutputType+0x22>
     4c6:	a9 9a       	sbi	0x15, 1	; 21
     4c8:	08 95       	ret

000004ca <FG_SetFunction>:
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	f8 2e       	mov	r15, r24
     4d8:	e2 2e       	mov	r14, r18
     4da:	cb 01       	movw	r24, r22
     4dc:	ba 01       	movw	r22, r20
     4de:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
     4e2:	27 e7       	ldi	r18, 0x77	; 119
     4e4:	3c ec       	ldi	r19, 0xCC	; 204
     4e6:	4b e2       	ldi	r20, 0x2B	; 43
     4e8:	51 e4       	ldi	r21, 0x41	; 65
     4ea:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
     4ee:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
     4f2:	eb 01       	movw	r28, r22
     4f4:	df 73       	andi	r29, 0x3F	; 63
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	07 2e       	mov	r0, r23
     4fc:	7e e0       	ldi	r23, 0x0E	; 14
     4fe:	b6 95       	lsr	r27
     500:	a7 95       	ror	r26
     502:	97 95       	ror	r25
     504:	87 95       	ror	r24
     506:	7a 95       	dec	r23
     508:	d1 f7       	brne	.-12     	; 0x4fe <FG_SetFunction+0x34>
     50a:	70 2d       	mov	r23, r0
     50c:	8c 01       	movw	r16, r24
     50e:	1f 73       	andi	r17, 0x3F	; 63
     510:	0e 94 6d 15 	call	0x2ada	; 0x2ada <SPI_InitAD9834>
     514:	4f 2d       	mov	r20, r15
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	81 e2       	ldi	r24, 0x21	; 33
     51a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     51e:	8d 2f       	mov	r24, r29
     520:	8f 73       	andi	r24, 0x3F	; 63
     522:	4f 2d       	mov	r20, r15
     524:	6c 2f       	mov	r22, r28
     526:	80 64       	ori	r24, 0x40	; 64
     528:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     52c:	81 2f       	mov	r24, r17
     52e:	8f 73       	andi	r24, 0x3F	; 63
     530:	4f 2d       	mov	r20, r15
     532:	60 2f       	mov	r22, r16
     534:	80 64       	ori	r24, 0x40	; 64
     536:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     53a:	4f 2d       	mov	r20, r15
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	80 ec       	ldi	r24, 0xC0	; 192
     540:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	e8 16       	cp	r14, r24
     548:	61 f0       	breq	.+24     	; 0x562 <FG_SetFunction+0x98>
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	e8 16       	cp	r14, r24
     54e:	79 f0       	breq	.+30     	; 0x56e <FG_SetFunction+0xa4>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	e8 12       	cpse	r14, r24
     554:	12 c0       	rjmp	.+36     	; 0x57a <FG_SetFunction+0xb0>
     556:	4f 2d       	mov	r20, r15
     558:	60 e2       	ldi	r22, 0x20	; 32
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     560:	11 c0       	rjmp	.+34     	; 0x584 <FG_SetFunction+0xba>
     562:	4f 2d       	mov	r20, r15
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	80 e2       	ldi	r24, 0x20	; 32
     568:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     56c:	0b c0       	rjmp	.+22     	; 0x584 <FG_SetFunction+0xba>
     56e:	4f 2d       	mov	r20, r15
     570:	68 e2       	ldi	r22, 0x28	; 40
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     578:	05 c0       	rjmp	.+10     	; 0x584 <FG_SetFunction+0xba>
     57a:	4f 2d       	mov	r20, r15
     57c:	60 e8       	ldi	r22, 0x80	; 128
     57e:	80 e2       	ldi	r24, 0x20	; 32
     580:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     584:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <SPI_InitAll>
     588:	6e 2d       	mov	r22, r14
     58a:	8f 2d       	mov	r24, r15
     58c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <FG_SelectOutputType>
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	08 95       	ret

0000059e <FG_SetAmplitude>:
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	3f e0       	ldi	r19, 0x0F	; 15
     5a2:	28 1b       	sub	r18, r24
     5a4:	39 0b       	sbc	r19, r25
     5a6:	83 2f       	mov	r24, r19
     5a8:	8f 70       	andi	r24, 0x0F	; 15
     5aa:	65 30       	cpi	r22, 0x05	; 5
     5ac:	41 f4       	brne	.+16     	; 0x5be <FG_SetAmplitude+0x20>
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	62 2f       	mov	r22, r18
     5b2:	80 6f       	ori	r24, 0xF0	; 240
     5b4:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	08 95       	ret
     5be:	66 30       	cpi	r22, 0x06	; 6
     5c0:	41 f4       	brne	.+16     	; 0x5d2 <FG_SetAmplitude+0x34>
     5c2:	42 e0       	ldi	r20, 0x02	; 2
     5c4:	62 2f       	mov	r22, r18
     5c6:	80 6f       	ori	r24, 0xF0	; 240
     5c8:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
     5d6:	08 95       	ret

000005d8 <Main_PollSwitch>:
     5d8:	82 99       	sbic	0x10, 2	; 16
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <Main_PollSwitch+0x10>
     5dc:	82 9b       	sbis	0x10, 2	; 16
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <Main_PollSwitch+0x4>
     5e0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Buzzer_Beep>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret

000005ec <Main_PollEncoder>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <Main_PollEncoder+0x6>
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	86 b3       	in	r24, 0x16	; 22
     5f8:	82 fb       	bst	r24, 2
     5fa:	88 27       	eor	r24, r24
     5fc:	80 f9       	bld	r24, 0
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	86 b3       	in	r24, 0x16	; 22
     602:	83 fb       	bst	r24, 3
     604:	88 27       	eor	r24, r24
     606:	80 f9       	bld	r24, 0
     608:	8a 83       	std	Y+2, r24	; 0x02
     60a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     60e:	88 23       	and	r24, r24
     610:	81 f0       	breq	.+32     	; 0x632 <Main_PollEncoder+0x46>
     612:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     616:	88 23       	and	r24, r24
     618:	61 f0       	breq	.+24     	; 0x632 <Main_PollEncoder+0x46>
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	81 11       	cpse	r24, r1
     61e:	09 c0       	rjmp	.+18     	; 0x632 <Main_PollEncoder+0x46>
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	88 23       	and	r24, r24
     624:	31 f0       	breq	.+12     	; 0x632 <Main_PollEncoder+0x46>
     626:	ee e8       	ldi	r30, 0x8E	; 142
     628:	f2 e0       	ldi	r31, 0x02	; 2
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	82 83       	std	Z+2, r24	; 0x02
     630:	8b c0       	rjmp	.+278    	; 0x748 <Main_PollEncoder+0x15c>
     632:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     636:	81 11       	cpse	r24, r1
     638:	10 c0       	rjmp	.+32     	; 0x65a <Main_PollEncoder+0x6e>
     63a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     63e:	88 23       	and	r24, r24
     640:	61 f0       	breq	.+24     	; 0x65a <Main_PollEncoder+0x6e>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	81 11       	cpse	r24, r1
     646:	09 c0       	rjmp	.+18     	; 0x65a <Main_PollEncoder+0x6e>
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	81 11       	cpse	r24, r1
     64c:	06 c0       	rjmp	.+12     	; 0x65a <Main_PollEncoder+0x6e>
     64e:	ee e8       	ldi	r30, 0x8E	; 142
     650:	f2 e0       	ldi	r31, 0x02	; 2
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	77 c0       	rjmp	.+238    	; 0x748 <Main_PollEncoder+0x15c>
     65a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     65e:	81 11       	cpse	r24, r1
     660:	10 c0       	rjmp	.+32     	; 0x682 <Main_PollEncoder+0x96>
     662:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     666:	81 11       	cpse	r24, r1
     668:	0c c0       	rjmp	.+24     	; 0x682 <Main_PollEncoder+0x96>
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	88 23       	and	r24, r24
     66e:	49 f0       	breq	.+18     	; 0x682 <Main_PollEncoder+0x96>
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	81 11       	cpse	r24, r1
     674:	06 c0       	rjmp	.+12     	; 0x682 <Main_PollEncoder+0x96>
     676:	ee e8       	ldi	r30, 0x8E	; 142
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	82 83       	std	Z+2, r24	; 0x02
     680:	63 c0       	rjmp	.+198    	; 0x748 <Main_PollEncoder+0x15c>
     682:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     686:	88 23       	and	r24, r24
     688:	81 f0       	breq	.+32     	; 0x6aa <Main_PollEncoder+0xbe>
     68a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     68e:	81 11       	cpse	r24, r1
     690:	0c c0       	rjmp	.+24     	; 0x6aa <Main_PollEncoder+0xbe>
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	88 23       	and	r24, r24
     696:	49 f0       	breq	.+18     	; 0x6aa <Main_PollEncoder+0xbe>
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	88 23       	and	r24, r24
     69c:	31 f0       	breq	.+12     	; 0x6aa <Main_PollEncoder+0xbe>
     69e:	ee e8       	ldi	r30, 0x8E	; 142
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	82 83       	std	Z+2, r24	; 0x02
     6a8:	4f c0       	rjmp	.+158    	; 0x748 <Main_PollEncoder+0x15c>
     6aa:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     6ae:	88 23       	and	r24, r24
     6b0:	81 f0       	breq	.+32     	; 0x6d2 <Main_PollEncoder+0xe6>
     6b2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     6b6:	88 23       	and	r24, r24
     6b8:	61 f0       	breq	.+24     	; 0x6d2 <Main_PollEncoder+0xe6>
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	88 23       	and	r24, r24
     6be:	49 f0       	breq	.+18     	; 0x6d2 <Main_PollEncoder+0xe6>
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	81 11       	cpse	r24, r1
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <Main_PollEncoder+0xe6>
     6c6:	ee e8       	ldi	r30, 0x8E	; 142
     6c8:	f2 e0       	ldi	r31, 0x02	; 2
     6ca:	83 81       	ldd	r24, Z+3	; 0x03
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	83 83       	std	Z+3, r24	; 0x03
     6d0:	3b c0       	rjmp	.+118    	; 0x748 <Main_PollEncoder+0x15c>
     6d2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     6d6:	88 23       	and	r24, r24
     6d8:	81 f0       	breq	.+32     	; 0x6fa <Main_PollEncoder+0x10e>
     6da:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     6de:	81 11       	cpse	r24, r1
     6e0:	0c c0       	rjmp	.+24     	; 0x6fa <Main_PollEncoder+0x10e>
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	81 11       	cpse	r24, r1
     6e6:	09 c0       	rjmp	.+18     	; 0x6fa <Main_PollEncoder+0x10e>
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	81 11       	cpse	r24, r1
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <Main_PollEncoder+0x10e>
     6ee:	ee e8       	ldi	r30, 0x8E	; 142
     6f0:	f2 e0       	ldi	r31, 0x02	; 2
     6f2:	83 81       	ldd	r24, Z+3	; 0x03
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	83 83       	std	Z+3, r24	; 0x03
     6f8:	27 c0       	rjmp	.+78     	; 0x748 <Main_PollEncoder+0x15c>
     6fa:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     6fe:	81 11       	cpse	r24, r1
     700:	10 c0       	rjmp	.+32     	; 0x722 <Main_PollEncoder+0x136>
     702:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     706:	81 11       	cpse	r24, r1
     708:	0c c0       	rjmp	.+24     	; 0x722 <Main_PollEncoder+0x136>
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	81 11       	cpse	r24, r1
     70e:	09 c0       	rjmp	.+18     	; 0x722 <Main_PollEncoder+0x136>
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	88 23       	and	r24, r24
     714:	31 f0       	breq	.+12     	; 0x722 <Main_PollEncoder+0x136>
     716:	ee e8       	ldi	r30, 0x8E	; 142
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	83 81       	ldd	r24, Z+3	; 0x03
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	83 83       	std	Z+3, r24	; 0x03
     720:	13 c0       	rjmp	.+38     	; 0x748 <Main_PollEncoder+0x15c>
     722:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Encoder>
     726:	81 11       	cpse	r24, r1
     728:	0f c0       	rjmp	.+30     	; 0x748 <Main_PollEncoder+0x15c>
     72a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <Encoder+0x1>
     72e:	88 23       	and	r24, r24
     730:	59 f0       	breq	.+22     	; 0x748 <Main_PollEncoder+0x15c>
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	88 23       	and	r24, r24
     736:	41 f0       	breq	.+16     	; 0x748 <Main_PollEncoder+0x15c>
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	88 23       	and	r24, r24
     73c:	29 f0       	breq	.+10     	; 0x748 <Main_PollEncoder+0x15c>
     73e:	ee e8       	ldi	r30, 0x8E	; 142
     740:	f2 e0       	ldi	r31, 0x02	; 2
     742:	83 81       	ldd	r24, Z+3	; 0x03
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	83 83       	std	Z+3, r24	; 0x03
     748:	8f ec       	ldi	r24, 0xCF	; 207
     74a:	97 e0       	ldi	r25, 0x07	; 7
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <Main_PollEncoder+0x160>
     750:	00 c0       	rjmp	.+0      	; 0x752 <Main_PollEncoder+0x166>
     752:	00 00       	nop
     754:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <Encoder+0x2>
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	21 f4       	brne	.+8      	; 0x764 <Main_PollEncoder+0x178>
     75c:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <Encoder+0x2>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	09 c0       	rjmp	.+18     	; 0x776 <Main_PollEncoder+0x18a>
     764:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <Encoder+0x3>
     768:	84 30       	cpi	r24, 0x04	; 4
     76a:	21 f4       	brne	.+8      	; 0x774 <Main_PollEncoder+0x188>
     76c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <Encoder+0x3>
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	01 c0       	rjmp	.+2      	; 0x776 <Main_PollEncoder+0x18a>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	ee e8       	ldi	r30, 0x8E	; 142
     77a:	f2 e0       	ldi	r31, 0x02	; 2
     77c:	90 83       	st	Z, r25
     77e:	99 81       	ldd	r25, Y+1	; 0x01
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <LCD_SetContrast>:
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	82 9f       	mul	r24, r18
     790:	c0 01       	movw	r24, r0
     792:	11 24       	eor	r1, r1
     794:	64 e6       	ldi	r22, 0x64	; 100
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__divmodhi4>
     79c:	60 95       	com	r22
     79e:	47 e0       	ldi	r20, 0x07	; 7
     7a0:	81 e1       	ldi	r24, 0x11	; 17
     7a2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     7a6:	08 95       	ret

000007a8 <LCD_SetBrightness>:
     7a8:	85 36       	cpi	r24, 0x65	; 101
     7aa:	f8 f4       	brcc	.+62     	; 0x7ea <LCD_SetBrightness+0x42>
     7ac:	29 e1       	ldi	r18, 0x19	; 25
     7ae:	82 9f       	mul	r24, r18
     7b0:	c0 01       	movw	r24, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__divmodhi4>
     7bc:	65 5b       	subi	r22, 0xB5	; 181
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__floatsisf>
     7c8:	2d ec       	ldi	r18, 0xCD	; 205
     7ca:	3c ec       	ldi	r19, 0xCC	; 204
     7cc:	43 e2       	ldi	r20, 0x23	; 35
     7ce:	52 e4       	ldi	r21, 0x42	; 66
     7d0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
     7d4:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
     7d8:	87 2f       	mov	r24, r23
     7da:	8f 70       	andi	r24, 0x0F	; 15
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	80 67       	ori	r24, 0x70	; 112
     7e0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	08 95       	ret

000007f0 <LCD_BrightnessAnimation>:
     7f0:	cf 93       	push	r28
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_SetBrightness>
     7fa:	8f e1       	ldi	r24, 0x1F	; 31
     7fc:	9e e4       	ldi	r25, 0x4E	; 78
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <LCD_BrightnessAnimation+0xe>
     802:	00 c0       	rjmp	.+0      	; 0x804 <LCD_BrightnessAnimation+0x14>
     804:	00 00       	nop
     806:	cf 5f       	subi	r28, 0xFF	; 255
     808:	c5 36       	cpi	r28, 0x65	; 101
     80a:	a1 f7       	brne	.-24     	; 0x7f4 <LCD_BrightnessAnimation+0x4>
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <FG_SetBiasDC>:
     810:	7f 70       	andi	r23, 0x0F	; 15
     812:	85 30       	cpi	r24, 0x05	; 5
     814:	19 f0       	breq	.+6      	; 0x81c <FG_SetBiasDC+0xc>
     816:	86 30       	cpi	r24, 0x06	; 6
     818:	99 f0       	breq	.+38     	; 0x840 <FG_SetBiasDC+0x30>
     81a:	24 c0       	rjmp	.+72     	; 0x864 <__stack+0x5>
     81c:	44 23       	and	r20, r20
     81e:	41 f0       	breq	.+16     	; 0x830 <FG_SetBiasDC+0x20>
     820:	43 e0       	ldi	r20, 0x03	; 3
     822:	87 2f       	mov	r24, r23
     824:	80 67       	ori	r24, 0x70	; 112
     826:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	08 95       	ret
     830:	43 e0       	ldi	r20, 0x03	; 3
     832:	87 2f       	mov	r24, r23
     834:	80 6f       	ori	r24, 0xF0	; 240
     836:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	08 95       	ret
     840:	44 23       	and	r20, r20
     842:	41 f0       	breq	.+16     	; 0x854 <FG_SetBiasDC+0x44>
     844:	44 e0       	ldi	r20, 0x04	; 4
     846:	87 2f       	mov	r24, r23
     848:	80 67       	ori	r24, 0x70	; 112
     84a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	08 95       	ret
     854:	44 e0       	ldi	r20, 0x04	; 4
     856:	87 2f       	mov	r24, r23
     858:	80 6f       	ori	r24, 0xF0	; 240
     85a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SPI_Write16Bit>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	08 95       	ret
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	9f ef       	ldi	r25, 0xFF	; 255
     868:	08 95       	ret

0000086a <Power_UpdateBatteryStatus>:
     86a:	17 b8       	out	0x07, r1	; 7
     86c:	36 9a       	sbi	0x06, 6	; 6
     86e:	36 99       	sbic	0x06, 6	; 6
     870:	fe cf       	rjmp	.-4      	; 0x86e <Power_UpdateBatteryStatus+0x4>
     872:	64 b1       	in	r22, 0x04	; 4
     874:	75 b1       	in	r23, 0x05	; 5
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
     87e:	21 e3       	ldi	r18, 0x31	; 49
     880:	38 e0       	ldi	r19, 0x08	; 8
     882:	4c e0       	ldi	r20, 0x0C	; 12
     884:	5f e3       	ldi	r21, 0x3F	; 63
     886:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
     88a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
     88e:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <PowerStatus+0x1>
     892:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <PowerStatus>
     896:	08 95       	ret

00000898 <Power_UpdateAcStatus>:
     898:	38 9a       	sbi	0x07, 0	; 7
     89a:	36 9a       	sbi	0x06, 6	; 6
     89c:	36 99       	sbic	0x06, 6	; 6
     89e:	fe cf       	rjmp	.-4      	; 0x89c <Power_UpdateAcStatus+0x4>
     8a0:	84 b1       	in	r24, 0x04	; 4
     8a2:	95 b1       	in	r25, 0x05	; 5
     8a4:	85 3a       	cpi	r24, 0xA5	; 165
     8a6:	91 40       	sbci	r25, 0x01	; 1
     8a8:	20 f0       	brcs	.+8      	; 0x8b2 <Power_UpdateAcStatus+0x1a>
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <PowerStatus+0x2>
     8b0:	08 95       	ret
     8b2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <PowerStatus+0x2>
     8b6:	08 95       	ret

000008b8 <Init_ClearUIValues>:

void Init_ClearUIValues() {
	memset(UI.frequency_A, '0', 7);
     8b8:	47 e0       	ldi	r20, 0x07	; 7
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	60 e3       	ldi	r22, 0x30	; 48
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	85 e6       	ldi	r24, 0x65	; 101
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <memset>
	memset(UI.frequency_B, '0', 7);
     8c8:	47 e0       	ldi	r20, 0x07	; 7
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e3       	ldi	r22, 0x30	; 48
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	8c e6       	ldi	r24, 0x6C	; 108
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <memset>
	memset(UI.amplitude_A, '0', 2);
     8d8:	20 e3       	ldi	r18, 0x30	; 48
     8da:	30 e3       	ldi	r19, 0x30	; 48
     8dc:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <UI+0xf>
     8e0:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <UI+0xe>
	memset(UI.amplitude_B, '0', 2);
     8e4:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <UI+0x11>
     8e8:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <UI+0x10>
	
	memcpy(UI.type_A, "OFF", 3);
     8ec:	e5 e6       	ldi	r30, 0x65	; 101
     8ee:	f2 e0       	ldi	r31, 0x02	; 2
     8f0:	4f e4       	ldi	r20, 0x4F	; 79
     8f2:	56 e4       	ldi	r21, 0x46	; 70
     8f4:	51 8f       	std	Z+25, r21	; 0x19
     8f6:	40 8f       	std	Z+24, r20	; 0x18
     8f8:	86 e4       	ldi	r24, 0x46	; 70
     8fa:	82 8f       	std	Z+26, r24	; 0x1a
	memcpy(UI.type_B, "OFF", 3);
     8fc:	54 8f       	std	Z+28, r21	; 0x1c
     8fe:	43 8f       	std	Z+27, r20	; 0x1b
     900:	85 8f       	std	Z+29, r24	; 0x1d
	
	memset(UI.bias_A, '0', 3);
     902:	a7 e7       	ldi	r26, 0x77	; 119
     904:	b2 e0       	ldi	r27, 0x02	; 2
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	3c 93       	st	X, r19
     90a:	2e 93       	st	-X, r18
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	12 96       	adiw	r26, 0x02	; 2
     910:	8c 93       	st	X, r24
	memset(UI.bias_B, '0', 3);
     912:	aa e7       	ldi	r26, 0x7A	; 122
     914:	b2 e0       	ldi	r27, 0x02	; 2
     916:	11 96       	adiw	r26, 0x01	; 1
     918:	3c 93       	st	X, r19
     91a:	2e 93       	st	-X, r18
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	8c 93       	st	X, r24
	
	UI.bias_A_sign = '+';
     920:	9b e2       	ldi	r25, 0x2B	; 43
     922:	96 8f       	std	Z+30, r25	; 0x1e
	UI.bias_B_sign = '+';
     924:	97 8f       	std	Z+31, r25	; 0x1f
	
	memcpy(UI.lcd_contrast, "100", 3);
     926:	41 e3       	ldi	r20, 0x31	; 49
     928:	50 e3       	ldi	r21, 0x30	; 48
     92a:	57 a3       	std	Z+39, r21	; 0x27
     92c:	46 a3       	std	Z+38, r20	; 0x26
     92e:	80 a7       	std	Z+40, r24	; 0x28
	memcpy(UI.lcd_brightness, "100", 3);
     930:	54 a3       	std	Z+36, r21	; 0x24
     932:	43 a3       	std	Z+35, r20	; 0x23
     934:	85 a3       	std	Z+37, r24	; 0x25
	memcpy(UI.batteryPowerStatus, "000", 3);
     936:	31 a3       	std	Z+33, r19	; 0x21
     938:	20 a3       	std	Z+32, r18	; 0x20
     93a:	82 a3       	std	Z+34, r24	; 0x22
     93c:	08 95       	ret

0000093e <Init_ClearLCDParameterValues>:
}

void Init_ClearLCDParameterValues() {
	LCD.brightness = 100;
     93e:	e3 e9       	ldi	r30, 0x93	; 147
     940:	f2 e0       	ldi	r31, 0x02	; 2
     942:	84 e6       	ldi	r24, 0x64	; 100
     944:	80 83       	st	Z, r24
	LCD.contrast = 100;
     946:	81 83       	std	Z+1, r24	; 0x01
     948:	08 95       	ret

0000094a <Handle_LCDParameter>:
		}					
	}
}

void Handle_LCDParameter(DisplayPointer displayPointer) {
	switch(displayPointer) {
     94a:	8e 30       	cpi	r24, 0x0E	; 14
     94c:	19 f0       	breq	.+6      	; 0x954 <Handle_LCDParameter+0xa>
     94e:	8f 30       	cpi	r24, 0x0F	; 15
     950:	31 f0       	breq	.+12     	; 0x95e <Handle_LCDParameter+0x14>
     952:	08 95       	ret
		case PTR_BRIGHT: LCD_SetBrightness(LCD.brightness); break;
     954:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <LCD>
     958:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_SetBrightness>
     95c:	08 95       	ret
		case PTR_CONTR: LCD_SetContrast(LCD.contrast); break;
     95e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <LCD+0x1>
     962:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_SetContrast>
     966:	08 95       	ret

00000968 <Main_UintToString>:
		default: break;
	}
}

void Main_UintToString(uint32_t number, char *string, uint8_t length) {
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	02 2f       	mov	r16, r18
	uint8_t iPtr = 0;
	while(iPtr < length) {
     97a:	22 23       	and	r18, r18
     97c:	c1 f0       	breq	.+48     	; 0x9ae <Main_UintToString+0x46>
     97e:	ea 01       	movw	r28, r20
     980:	c2 0f       	add	r28, r18
     982:	d1 1d       	adc	r29, r1
     984:	10 e0       	ldi	r17, 0x00	; 0
		string[length - iPtr - 1] = (number % 10) + '0';
     986:	0f 2e       	mov	r0, r31
     988:	fa e0       	ldi	r31, 0x0A	; 10
     98a:	cf 2e       	mov	r12, r31
     98c:	d1 2c       	mov	r13, r1
     98e:	e1 2c       	mov	r14, r1
     990:	f1 2c       	mov	r15, r1
     992:	f0 2d       	mov	r31, r0
     994:	a7 01       	movw	r20, r14
     996:	96 01       	movw	r18, r12
     998:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodsi4>
     99c:	60 5d       	subi	r22, 0xD0	; 208
     99e:	6a 93       	st	-Y, r22
		number /= 10;
     9a0:	62 2f       	mov	r22, r18
     9a2:	73 2f       	mov	r23, r19
     9a4:	84 2f       	mov	r24, r20
     9a6:	95 2f       	mov	r25, r21
		iPtr++;
     9a8:	1f 5f       	subi	r17, 0xFF	; 255
	}
}

void Main_UintToString(uint32_t number, char *string, uint8_t length) {
	uint8_t iPtr = 0;
	while(iPtr < length) {
     9aa:	01 13       	cpse	r16, r17
     9ac:	f3 cf       	rjmp	.-26     	; 0x994 <Main_UintToString+0x2c>
		string[length - iPtr - 1] = (number % 10) + '0';
		number /= 10;
		iPtr++;
	}
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <Handle_LCD>:
void Init_ClearLCDParameterValues() {
	LCD.brightness = 100;
	LCD.contrast = 100;
}

void Handle_LCD(MainScreen screen, DisplayPointer displayPointer, MainDeviceState mainDeviceState, FGX FunctionGenerator) {
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	
	static bool staticLCDLoaded = false;
	
	if (screen != PARAMS_SCREEN) staticLCDLoaded = false;
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <Handle_LCD+0x18>
     9d4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <staticLCDLoaded.2611>
	
	if (mainDeviceState == MENU_POINTER_ON) {
     9d8:	41 30       	cpi	r20, 0x01	; 1
     9da:	09 f0       	breq	.+2      	; 0x9de <Handle_LCD+0x1e>
     9dc:	74 c0       	rjmp	.+232    	; 0xac6 <Handle_LCD+0x106>
		switch(displayPointer) {
     9de:	86 2f       	mov	r24, r22
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	80 31       	cpi	r24, 0x10	; 16
     9e4:	91 05       	cpc	r25, r1
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <Handle_LCD+0x2a>
     9e8:	56 c4       	rjmp	.+2220   	; 0x1296 <Handle_LCD+0x8d6>
     9ea:	fc 01       	movw	r30, r24
     9ec:	e6 5d       	subi	r30, 0xD6	; 214
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
			case PTR_NULL:
			LCD_PrintChar(' ', LCD_LINE_1, 0);
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	80 e2       	ldi	r24, 0x20	; 32
     9fa:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_2, 0);
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	60 e4       	ldi	r22, 0x40	; 64
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_3, 0);
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	64 e1       	ldi	r22, 0x14	; 20
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_4, 0);
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	64 e5       	ldi	r22, 0x54	; 84
     a16:	80 e2       	ldi	r24, 0x20	; 32
     a18:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     a1c:	3c c4       	rjmp	.+2168   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_TYPE_A: case PTR_TYPE_B: 
			LCD_PrintChar('>', LCD_LINE_1, 0); 
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	8e e3       	ldi	r24, 0x3E	; 62
     a24:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_2, 0);
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	60 e4       	ldi	r22, 0x40	; 64
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_3, 0);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	64 e1       	ldi	r22, 0x14	; 20
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_4, 0);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	64 e5       	ldi	r22, 0x54	; 84
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     a46:	27 c4       	rjmp	.+2126   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_AMP_A: case PTR_AMP_B: case PTR_SAVE_PROF: case PTR_BRIGHT:
			LCD_PrintChar(' ', LCD_LINE_1, 0);
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	80 e2       	ldi	r24, 0x20	; 32
     a4e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar('>', LCD_LINE_2, 0);
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	60 e4       	ldi	r22, 0x40	; 64
     a56:	8e e3       	ldi	r24, 0x3E	; 62
     a58:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_3, 0);
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	64 e1       	ldi	r22, 0x14	; 20
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_4, 0);
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	64 e5       	ldi	r22, 0x54	; 84
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     a70:	12 c4       	rjmp	.+2084   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_FREQ_A: case PTR_FREQ_B: case PTR_SETT: case PTR_LOAD_PROF: case PTR_CONTR:
			LCD_PrintChar(' ', LCD_LINE_1, 0);
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_2, 0);
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	60 e4       	ldi	r22, 0x40	; 64
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar('>', LCD_LINE_3, 0);
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	64 e1       	ldi	r22, 0x14	; 20
     a8a:	8e e3       	ldi	r24, 0x3E	; 62
     a8c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_4, 0);
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	64 e5       	ldi	r22, 0x54	; 84
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     a9a:	fd c3       	rjmp	.+2042   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_BIAS_A: case PTR_BIAS_B: case PTR_SHUTDOWN: case PTR_BACK:
			LCD_PrintChar(' ', LCD_LINE_1, 0);
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_2, 0);
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	60 e4       	ldi	r22, 0x40	; 64
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(' ', LCD_LINE_3, 0);
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	64 e1       	ldi	r22, 0x14	; 20
     ab4:	80 e2       	ldi	r24, 0x20	; 32
     ab6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar('>', LCD_LINE_4, 0);
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	64 e5       	ldi	r22, 0x54	; 84
     abe:	8e e3       	ldi	r24, 0x3E	; 62
     ac0:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     ac4:	e8 c3       	rjmp	.+2000   	; 0x1296 <Handle_LCD+0x8d6>
		}
	}
	
	else if (mainDeviceState == PARAMETER_POINTER_ON) {
     ac6:	42 30       	cpi	r20, 0x02	; 2
     ac8:	09 f0       	breq	.+2      	; 0xacc <Handle_LCD+0x10c>
     aca:	ae c1       	rjmp	.+860    	; 0xe28 <Handle_LCD+0x468>
		switch(displayPointer) {
     acc:	86 2f       	mov	r24, r22
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	32 97       	sbiw	r30, 0x02	; 2
     ad4:	e8 30       	cpi	r30, 0x08	; 8
     ad6:	f1 05       	cpc	r31, r1
     ad8:	08 f0       	brcs	.+2      	; 0xadc <Handle_LCD+0x11c>
     ada:	dd c3       	rjmp	.+1978   	; 0x1296 <Handle_LCD+0x8d6>
     adc:	e6 5c       	subi	r30, 0xC6	; 198
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
			case PTR_TYPE_A:
			switch(FunctionGenerator.output_type_A) {
     ae4:	8d 89       	ldd	r24, Y+21	; 0x15
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	e9 f0       	breq	.+58     	; 0xb24 <Handle_LCD+0x164>
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <Handle_LCD+0x136>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	41 f0       	breq	.+16     	; 0xb00 <Handle_LCD+0x140>
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	79 f0       	breq	.+30     	; 0xb12 <Handle_LCD+0x152>
     af4:	30 c0       	rjmp	.+96     	; 0xb56 <Handle_LCD+0x196>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	f1 f0       	breq	.+60     	; 0xb36 <Handle_LCD+0x176>
     afa:	85 30       	cpi	r24, 0x05	; 5
     afc:	29 f1       	breq	.+74     	; 0xb48 <Handle_LCD+0x188>
     afe:	2b c0       	rjmp	.+86     	; 0xb56 <Handle_LCD+0x196>
				case SINE:
				UI.type_A[0] = 'S';
     b00:	e5 e6       	ldi	r30, 0x65	; 101
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	83 e5       	ldi	r24, 0x53	; 83
     b06:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'I';
     b08:	89 e4       	ldi	r24, 0x49	; 73
     b0a:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'N';
     b0c:	8e e4       	ldi	r24, 0x4E	; 78
     b0e:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     b10:	22 c0       	rjmp	.+68     	; 0xb56 <Handle_LCD+0x196>
				
				case TRIANGLE:
				UI.type_A[0] = 'T';
     b12:	e5 e6       	ldi	r30, 0x65	; 101
     b14:	f2 e0       	ldi	r31, 0x02	; 2
     b16:	84 e5       	ldi	r24, 0x54	; 84
     b18:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'R';
     b1a:	82 e5       	ldi	r24, 0x52	; 82
     b1c:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'N';
     b1e:	8e e4       	ldi	r24, 0x4E	; 78
     b20:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     b22:	19 c0       	rjmp	.+50     	; 0xb56 <Handle_LCD+0x196>
				
				case SQUARE:
				UI.type_A[0] = 'S';
     b24:	e5 e6       	ldi	r30, 0x65	; 101
     b26:	f2 e0       	ldi	r31, 0x02	; 2
     b28:	83 e5       	ldi	r24, 0x53	; 83
     b2a:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'Q';
     b2c:	81 e5       	ldi	r24, 0x51	; 81
     b2e:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'R';
     b30:	82 e5       	ldi	r24, 0x52	; 82
     b32:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <Handle_LCD+0x196>
				
				case DC:
				UI.type_A[0] = ' ';
     b36:	e5 e6       	ldi	r30, 0x65	; 101
     b38:	f2 e0       	ldi	r31, 0x02	; 2
     b3a:	80 e2       	ldi	r24, 0x20	; 32
     b3c:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'D';
     b3e:	84 e4       	ldi	r24, 0x44	; 68
     b40:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'C';
     b42:	83 e4       	ldi	r24, 0x43	; 67
     b44:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <Handle_LCD+0x196>
				
				case OFF:
				UI.type_A[0] = 'O';
     b48:	e5 e6       	ldi	r30, 0x65	; 101
     b4a:	f2 e0       	ldi	r31, 0x02	; 2
     b4c:	8f e4       	ldi	r24, 0x4F	; 79
     b4e:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'F';
     b50:	86 e4       	ldi	r24, 0x46	; 70
     b52:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'F';
     b54:	82 8f       	std	Z+26, r24	; 0x1a
				break;
			}
			LCD_PrintChar(UI.type_A[0], LCD_LINE_1, 17);
     b56:	05 e6       	ldi	r16, 0x65	; 101
     b58:	12 e0       	ldi	r17, 0x02	; 2
     b5a:	41 e1       	ldi	r20, 0x11	; 17
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	f8 01       	movw	r30, r16
     b60:	80 8d       	ldd	r24, Z+24	; 0x18
     b62:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_A[1], LCD_LINE_1, 18);
     b66:	42 e1       	ldi	r20, 0x12	; 18
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	f8 01       	movw	r30, r16
     b6c:	81 8d       	ldd	r24, Z+25	; 0x19
     b6e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_A[2], LCD_LINE_1, 19);
     b72:	43 e1       	ldi	r20, 0x13	; 19
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	f8 01       	movw	r30, r16
     b78:	82 8d       	ldd	r24, Z+26	; 0x1a
     b7a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     b7e:	8b c3       	rjmp	.+1814   	; 0x1296 <Handle_LCD+0x8d6>
		
			case PTR_TYPE_B:
			switch(FunctionGenerator.output_type_B) {
     b80:	8e 89       	ldd	r24, Y+22	; 0x16
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	e9 f0       	breq	.+58     	; 0xbc0 <Handle_LCD+0x200>
     b86:	28 f4       	brcc	.+10     	; 0xb92 <Handle_LCD+0x1d2>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	41 f0       	breq	.+16     	; 0xb9c <Handle_LCD+0x1dc>
     b8c:	82 30       	cpi	r24, 0x02	; 2
     b8e:	79 f0       	breq	.+30     	; 0xbae <Handle_LCD+0x1ee>
     b90:	30 c0       	rjmp	.+96     	; 0xbf2 <Handle_LCD+0x232>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	f1 f0       	breq	.+60     	; 0xbd2 <Handle_LCD+0x212>
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	29 f1       	breq	.+74     	; 0xbe4 <Handle_LCD+0x224>
     b9a:	2b c0       	rjmp	.+86     	; 0xbf2 <Handle_LCD+0x232>
				case SINE:
				UI.type_B[0] = 'S';
     b9c:	e5 e6       	ldi	r30, 0x65	; 101
     b9e:	f2 e0       	ldi	r31, 0x02	; 2
     ba0:	83 e5       	ldi	r24, 0x53	; 83
     ba2:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'I';
     ba4:	89 e4       	ldi	r24, 0x49	; 73
     ba6:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'N';
     ba8:	8e e4       	ldi	r24, 0x4E	; 78
     baa:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     bac:	22 c0       	rjmp	.+68     	; 0xbf2 <Handle_LCD+0x232>
				
				case TRIANGLE:
				UI.type_B[0] = 'T';
     bae:	e5 e6       	ldi	r30, 0x65	; 101
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	84 e5       	ldi	r24, 0x54	; 84
     bb4:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'R';
     bb6:	82 e5       	ldi	r24, 0x52	; 82
     bb8:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'N';
     bba:	8e e4       	ldi	r24, 0x4E	; 78
     bbc:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     bbe:	19 c0       	rjmp	.+50     	; 0xbf2 <Handle_LCD+0x232>
				
				case SQUARE:
				UI.type_B[0] = 'S';
     bc0:	e5 e6       	ldi	r30, 0x65	; 101
     bc2:	f2 e0       	ldi	r31, 0x02	; 2
     bc4:	83 e5       	ldi	r24, 0x53	; 83
     bc6:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'Q';
     bc8:	81 e5       	ldi	r24, 0x51	; 81
     bca:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'R';
     bcc:	82 e5       	ldi	r24, 0x52	; 82
     bce:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <Handle_LCD+0x232>
				
				case DC:
				UI.type_B[0] = ' ';
     bd2:	e5 e6       	ldi	r30, 0x65	; 101
     bd4:	f2 e0       	ldi	r31, 0x02	; 2
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'D';
     bda:	84 e4       	ldi	r24, 0x44	; 68
     bdc:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'C';
     bde:	83 e4       	ldi	r24, 0x43	; 67
     be0:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     be2:	07 c0       	rjmp	.+14     	; 0xbf2 <Handle_LCD+0x232>
				
				case OFF:
				UI.type_B[0] = 'O';
     be4:	e5 e6       	ldi	r30, 0x65	; 101
     be6:	f2 e0       	ldi	r31, 0x02	; 2
     be8:	8f e4       	ldi	r24, 0x4F	; 79
     bea:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'F';
     bec:	86 e4       	ldi	r24, 0x46	; 70
     bee:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'F';
     bf0:	85 8f       	std	Z+29, r24	; 0x1d
				break;
			}
			
			LCD_PrintChar(UI.type_B[0], LCD_LINE_1, 17);
     bf2:	05 e6       	ldi	r16, 0x65	; 101
     bf4:	12 e0       	ldi	r17, 0x02	; 2
     bf6:	41 e1       	ldi	r20, 0x11	; 17
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	f8 01       	movw	r30, r16
     bfc:	83 8d       	ldd	r24, Z+27	; 0x1b
     bfe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_B[1], LCD_LINE_1, 18);
     c02:	42 e1       	ldi	r20, 0x12	; 18
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	f8 01       	movw	r30, r16
     c08:	84 8d       	ldd	r24, Z+28	; 0x1c
     c0a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_B[2], LCD_LINE_1, 19);
     c0e:	43 e1       	ldi	r20, 0x13	; 19
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	f8 01       	movw	r30, r16
     c14:	85 8d       	ldd	r24, Z+29	; 0x1d
     c16:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     c1a:	3d c3       	rjmp	.+1658   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_AMP_A:
			Main_UintToString(FunctionGenerator.amplitude_A, &UI.amplitude_A[0], 2);
     c1c:	69 89       	ldd	r22, Y+17	; 0x11
     c1e:	7a 89       	ldd	r23, Y+18	; 0x12
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	22 e0       	ldi	r18, 0x02	; 2
     c26:	43 e7       	ldi	r20, 0x73	; 115
     c28:	52 e0       	ldi	r21, 0x02	; 2
     c2a:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.amplitude_A[0], LCD_LINE_2, 14);
     c2e:	05 e6       	ldi	r16, 0x65	; 101
     c30:	12 e0       	ldi	r17, 0x02	; 2
     c32:	4e e0       	ldi	r20, 0x0E	; 14
     c34:	60 e4       	ldi	r22, 0x40	; 64
     c36:	f8 01       	movw	r30, r16
     c38:	86 85       	ldd	r24, Z+14	; 0x0e
     c3a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.amplitude_A[1], LCD_LINE_2, 15);
     c3e:	4f e0       	ldi	r20, 0x0F	; 15
     c40:	60 e4       	ldi	r22, 0x40	; 64
     c42:	f8 01       	movw	r30, r16
     c44:	87 85       	ldd	r24, Z+15	; 0x0f
     c46:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     c4a:	25 c3       	rjmp	.+1610   	; 0x1296 <Handle_LCD+0x8d6>
				
			case PTR_AMP_B:
			Main_UintToString(FunctionGenerator.amplitude_B, &UI.amplitude_B[0], 2);
     c4c:	6b 89       	ldd	r22, Y+19	; 0x13
     c4e:	7c 89       	ldd	r23, Y+20	; 0x14
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	22 e0       	ldi	r18, 0x02	; 2
     c56:	45 e7       	ldi	r20, 0x75	; 117
     c58:	52 e0       	ldi	r21, 0x02	; 2
     c5a:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.amplitude_B[0], LCD_LINE_2, 14);
     c5e:	05 e6       	ldi	r16, 0x65	; 101
     c60:	12 e0       	ldi	r17, 0x02	; 2
     c62:	4e e0       	ldi	r20, 0x0E	; 14
     c64:	60 e4       	ldi	r22, 0x40	; 64
     c66:	f8 01       	movw	r30, r16
     c68:	80 89       	ldd	r24, Z+16	; 0x10
     c6a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.amplitude_B[1], LCD_LINE_2, 15);
     c6e:	4f e0       	ldi	r20, 0x0F	; 15
     c70:	60 e4       	ldi	r22, 0x40	; 64
     c72:	f8 01       	movw	r30, r16
     c74:	81 89       	ldd	r24, Z+17	; 0x11
     c76:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     c7a:	0d c3       	rjmp	.+1562   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_FREQ_A:
			Main_UintToString(FunctionGenerator.frequency_A, &UI.frequency_A[0], 7);
     c7c:	69 85       	ldd	r22, Y+9	; 0x09
     c7e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c80:	8b 85       	ldd	r24, Y+11	; 0x0b
     c82:	9c 85       	ldd	r25, Y+12	; 0x0c
     c84:	27 e0       	ldi	r18, 0x07	; 7
     c86:	45 e6       	ldi	r20, 0x65	; 101
     c88:	52 e0       	ldi	r21, 0x02	; 2
     c8a:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.frequency_A[0], LCD_LINE_3, 7);
     c8e:	05 e6       	ldi	r16, 0x65	; 101
     c90:	12 e0       	ldi	r17, 0x02	; 2
     c92:	47 e0       	ldi	r20, 0x07	; 7
     c94:	64 e1       	ldi	r22, 0x14	; 20
     c96:	f8 01       	movw	r30, r16
     c98:	80 81       	ld	r24, Z
     c9a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[1], LCD_LINE_3, 9);
     c9e:	49 e0       	ldi	r20, 0x09	; 9
     ca0:	64 e1       	ldi	r22, 0x14	; 20
     ca2:	f8 01       	movw	r30, r16
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[2], LCD_LINE_3, 10);
     caa:	4a e0       	ldi	r20, 0x0A	; 10
     cac:	64 e1       	ldi	r22, 0x14	; 20
     cae:	f8 01       	movw	r30, r16
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[3], LCD_LINE_3, 11);
     cb6:	4b e0       	ldi	r20, 0x0B	; 11
     cb8:	64 e1       	ldi	r22, 0x14	; 20
     cba:	f8 01       	movw	r30, r16
     cbc:	83 81       	ldd	r24, Z+3	; 0x03
     cbe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[4], LCD_LINE_3, 13);
     cc2:	4d e0       	ldi	r20, 0x0D	; 13
     cc4:	64 e1       	ldi	r22, 0x14	; 20
     cc6:	f8 01       	movw	r30, r16
     cc8:	84 81       	ldd	r24, Z+4	; 0x04
     cca:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[5], LCD_LINE_3, 14);
     cce:	4e e0       	ldi	r20, 0x0E	; 14
     cd0:	64 e1       	ldi	r22, 0x14	; 20
     cd2:	f8 01       	movw	r30, r16
     cd4:	85 81       	ldd	r24, Z+5	; 0x05
     cd6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[6], LCD_LINE_3, 15);
     cda:	4f e0       	ldi	r20, 0x0F	; 15
     cdc:	64 e1       	ldi	r22, 0x14	; 20
     cde:	f8 01       	movw	r30, r16
     ce0:	86 81       	ldd	r24, Z+6	; 0x06
     ce2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     ce6:	d7 c2       	rjmp	.+1454   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_FREQ_B:
			Main_UintToString(FunctionGenerator.frequency_B, &UI.frequency_B[0], 7);
     ce8:	6d 85       	ldd	r22, Y+13	; 0x0d
     cea:	7e 85       	ldd	r23, Y+14	; 0x0e
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	98 89       	ldd	r25, Y+16	; 0x10
     cf0:	27 e0       	ldi	r18, 0x07	; 7
     cf2:	4c e6       	ldi	r20, 0x6C	; 108
     cf4:	52 e0       	ldi	r21, 0x02	; 2
     cf6:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.frequency_B[0], LCD_LINE_3, 7);
     cfa:	05 e6       	ldi	r16, 0x65	; 101
     cfc:	12 e0       	ldi	r17, 0x02	; 2
     cfe:	47 e0       	ldi	r20, 0x07	; 7
     d00:	64 e1       	ldi	r22, 0x14	; 20
     d02:	f8 01       	movw	r30, r16
     d04:	87 81       	ldd	r24, Z+7	; 0x07
     d06:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[1], LCD_LINE_3, 9);
     d0a:	49 e0       	ldi	r20, 0x09	; 9
     d0c:	64 e1       	ldi	r22, 0x14	; 20
     d0e:	f8 01       	movw	r30, r16
     d10:	80 85       	ldd	r24, Z+8	; 0x08
     d12:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[2], LCD_LINE_3, 10);
     d16:	4a e0       	ldi	r20, 0x0A	; 10
     d18:	64 e1       	ldi	r22, 0x14	; 20
     d1a:	f8 01       	movw	r30, r16
     d1c:	81 85       	ldd	r24, Z+9	; 0x09
     d1e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[3], LCD_LINE_3, 11);
     d22:	4b e0       	ldi	r20, 0x0B	; 11
     d24:	64 e1       	ldi	r22, 0x14	; 20
     d26:	f8 01       	movw	r30, r16
     d28:	82 85       	ldd	r24, Z+10	; 0x0a
     d2a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[4], LCD_LINE_3, 13);
     d2e:	4d e0       	ldi	r20, 0x0D	; 13
     d30:	64 e1       	ldi	r22, 0x14	; 20
     d32:	f8 01       	movw	r30, r16
     d34:	83 85       	ldd	r24, Z+11	; 0x0b
     d36:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[5], LCD_LINE_3, 14);
     d3a:	4e e0       	ldi	r20, 0x0E	; 14
     d3c:	64 e1       	ldi	r22, 0x14	; 20
     d3e:	f8 01       	movw	r30, r16
     d40:	84 85       	ldd	r24, Z+12	; 0x0c
     d42:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[6], LCD_LINE_3, 15);
     d46:	4f e0       	ldi	r20, 0x0F	; 15
     d48:	64 e1       	ldi	r22, 0x14	; 20
     d4a:	f8 01       	movw	r30, r16
     d4c:	85 85       	ldd	r24, Z+13	; 0x0d
     d4e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     d52:	a1 c2       	rjmp	.+1346   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_BIAS_A: 
			if (FunctionGenerator.bias_A_sign == POSITIVE) UI.bias_A_sign = '+';
     d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d56:	81 11       	cpse	r24, r1
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <Handle_LCD+0x3a2>
     d5a:	8b e2       	ldi	r24, 0x2B	; 43
     d5c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <UI+0x1e>
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <Handle_LCD+0x3a8>
			else UI.bias_A_sign = '-';
     d62:	8d e2       	ldi	r24, 0x2D	; 45
     d64:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <UI+0x1e>
			Main_UintToString(abs(FunctionGenerator.bias_A), &UI.bias_A[0], 3);
     d68:	6f 89       	ldd	r22, Y+23	; 0x17
     d6a:	78 8d       	ldd	r23, Y+24	; 0x18
     d6c:	77 23       	and	r23, r23
     d6e:	1c f4       	brge	.+6      	; 0xd76 <Handle_LCD+0x3b6>
     d70:	71 95       	neg	r23
     d72:	61 95       	neg	r22
     d74:	71 09       	sbc	r23, r1
     d76:	07 2e       	mov	r0, r23
     d78:	00 0c       	add	r0, r0
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	23 e0       	ldi	r18, 0x03	; 3
     d80:	47 e7       	ldi	r20, 0x77	; 119
     d82:	52 e0       	ldi	r21, 0x02	; 2
     d84:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.bias_A_sign, LCD_LINE_4, 7);
     d88:	05 e6       	ldi	r16, 0x65	; 101
     d8a:	12 e0       	ldi	r17, 0x02	; 2
     d8c:	47 e0       	ldi	r20, 0x07	; 7
     d8e:	64 e5       	ldi	r22, 0x54	; 84
     d90:	f8 01       	movw	r30, r16
     d92:	86 8d       	ldd	r24, Z+30	; 0x1e
     d94:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[0], LCD_LINE_4, 8);
     d98:	48 e0       	ldi	r20, 0x08	; 8
     d9a:	64 e5       	ldi	r22, 0x54	; 84
     d9c:	f8 01       	movw	r30, r16
     d9e:	82 89       	ldd	r24, Z+18	; 0x12
     da0:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[1], LCD_LINE_4, 10);
     da4:	4a e0       	ldi	r20, 0x0A	; 10
     da6:	64 e5       	ldi	r22, 0x54	; 84
     da8:	f8 01       	movw	r30, r16
     daa:	83 89       	ldd	r24, Z+19	; 0x13
     dac:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[2], LCD_LINE_4, 11);
     db0:	4b e0       	ldi	r20, 0x0B	; 11
     db2:	64 e5       	ldi	r22, 0x54	; 84
     db4:	f8 01       	movw	r30, r16
     db6:	84 89       	ldd	r24, Z+20	; 0x14
     db8:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     dbc:	6c c2       	rjmp	.+1240   	; 0x1296 <Handle_LCD+0x8d6>
			
			case PTR_BIAS_B:
			if (FunctionGenerator.bias_B_sign == POSITIVE) UI.bias_B_sign = '+';
     dbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dc0:	81 11       	cpse	r24, r1
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <Handle_LCD+0x40c>
     dc4:	8b e2       	ldi	r24, 0x2B	; 43
     dc6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <UI+0x1f>
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <Handle_LCD+0x412>
			else UI.bias_B_sign = '-';
     dcc:	8d e2       	ldi	r24, 0x2D	; 45
     dce:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <UI+0x1f>
			Main_UintToString(abs(FunctionGenerator.bias_B), &UI.bias_B[0], 3);
     dd2:	69 8d       	ldd	r22, Y+25	; 0x19
     dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd6:	77 23       	and	r23, r23
     dd8:	1c f4       	brge	.+6      	; 0xde0 <Handle_LCD+0x420>
     dda:	71 95       	neg	r23
     ddc:	61 95       	neg	r22
     dde:	71 09       	sbc	r23, r1
     de0:	07 2e       	mov	r0, r23
     de2:	00 0c       	add	r0, r0
     de4:	88 0b       	sbc	r24, r24
     de6:	99 0b       	sbc	r25, r25
     de8:	23 e0       	ldi	r18, 0x03	; 3
     dea:	4a e7       	ldi	r20, 0x7A	; 122
     dec:	52 e0       	ldi	r21, 0x02	; 2
     dee:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.bias_B_sign, LCD_LINE_4, 7);
     df2:	05 e6       	ldi	r16, 0x65	; 101
     df4:	12 e0       	ldi	r17, 0x02	; 2
     df6:	47 e0       	ldi	r20, 0x07	; 7
     df8:	64 e5       	ldi	r22, 0x54	; 84
     dfa:	f8 01       	movw	r30, r16
     dfc:	87 8d       	ldd	r24, Z+31	; 0x1f
     dfe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[0], LCD_LINE_4, 8);
     e02:	48 e0       	ldi	r20, 0x08	; 8
     e04:	64 e5       	ldi	r22, 0x54	; 84
     e06:	f8 01       	movw	r30, r16
     e08:	85 89       	ldd	r24, Z+21	; 0x15
     e0a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[1], LCD_LINE_4, 10);
     e0e:	4a e0       	ldi	r20, 0x0A	; 10
     e10:	64 e5       	ldi	r22, 0x54	; 84
     e12:	f8 01       	movw	r30, r16
     e14:	86 89       	ldd	r24, Z+22	; 0x16
     e16:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[2], LCD_LINE_4, 11);
     e1a:	4b e0       	ldi	r20, 0x0B	; 11
     e1c:	64 e5       	ldi	r22, 0x54	; 84
     e1e:	f8 01       	movw	r30, r16
     e20:	87 89       	ldd	r24, Z+23	; 0x17
     e22:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     e26:	37 c2       	rjmp	.+1134   	; 0x1296 <Handle_LCD+0x8d6>
			default: break;			
			
		}
	}
				
	else if (mainDeviceState == PARAMETER_LCD_POINTER_ON) {
     e28:	43 30       	cpi	r20, 0x03	; 3
     e2a:	09 f0       	breq	.+2      	; 0xe2e <Handle_LCD+0x46e>
     e2c:	43 c0       	rjmp	.+134    	; 0xeb4 <Handle_LCD+0x4f4>
		switch(displayPointer) {
     e2e:	6e 30       	cpi	r22, 0x0E	; 14
     e30:	19 f0       	breq	.+6      	; 0xe38 <Handle_LCD+0x478>
     e32:	6f 30       	cpi	r22, 0x0F	; 15
     e34:	01 f1       	breq	.+64     	; 0xe76 <Handle_LCD+0x4b6>
     e36:	2f c2       	rjmp	.+1118   	; 0x1296 <Handle_LCD+0x8d6>
			case PTR_BRIGHT:			
			Main_UintToString(LCD.brightness, &UI.lcd_brightness[0], 3);
     e38:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <LCD>
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	23 e0       	ldi	r18, 0x03	; 3
     e44:	48 e8       	ldi	r20, 0x88	; 136
     e46:	52 e0       	ldi	r21, 0x02	; 2
     e48:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.lcd_brightness[0], LCD_LINE_2, 13);
     e4c:	05 e6       	ldi	r16, 0x65	; 101
     e4e:	12 e0       	ldi	r17, 0x02	; 2
     e50:	4d e0       	ldi	r20, 0x0D	; 13
     e52:	60 e4       	ldi	r22, 0x40	; 64
     e54:	f8 01       	movw	r30, r16
     e56:	83 a1       	ldd	r24, Z+35	; 0x23
     e58:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_brightness[1], LCD_LINE_2, 14);
     e5c:	4e e0       	ldi	r20, 0x0E	; 14
     e5e:	60 e4       	ldi	r22, 0x40	; 64
     e60:	f8 01       	movw	r30, r16
     e62:	84 a1       	ldd	r24, Z+36	; 0x24
     e64:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_brightness[2], LCD_LINE_2, 15);
     e68:	4f e0       	ldi	r20, 0x0F	; 15
     e6a:	60 e4       	ldi	r22, 0x40	; 64
     e6c:	f8 01       	movw	r30, r16
     e6e:	85 a1       	ldd	r24, Z+37	; 0x25
     e70:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     e74:	10 c2       	rjmp	.+1056   	; 0x1296 <Handle_LCD+0x8d6>

			case PTR_CONTR:
			Main_UintToString(LCD.contrast, &UI.lcd_contrast[0], 3);
     e76:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <LCD+0x1>
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	23 e0       	ldi	r18, 0x03	; 3
     e82:	4b e8       	ldi	r20, 0x8B	; 139
     e84:	52 e0       	ldi	r21, 0x02	; 2
     e86:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.lcd_contrast[0], LCD_LINE_3, 13);
     e8a:	05 e6       	ldi	r16, 0x65	; 101
     e8c:	12 e0       	ldi	r17, 0x02	; 2
     e8e:	4d e0       	ldi	r20, 0x0D	; 13
     e90:	64 e1       	ldi	r22, 0x14	; 20
     e92:	f8 01       	movw	r30, r16
     e94:	86 a1       	ldd	r24, Z+38	; 0x26
     e96:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_contrast[1], LCD_LINE_3, 14);
     e9a:	4e e0       	ldi	r20, 0x0E	; 14
     e9c:	64 e1       	ldi	r22, 0x14	; 20
     e9e:	f8 01       	movw	r30, r16
     ea0:	87 a1       	ldd	r24, Z+39	; 0x27
     ea2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_contrast[2], LCD_LINE_3, 15);
     ea6:	4f e0       	ldi	r20, 0x0F	; 15
     ea8:	64 e1       	ldi	r22, 0x14	; 20
     eaa:	f8 01       	movw	r30, r16
     eac:	80 a5       	ldd	r24, Z+40	; 0x28
     eae:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     eb2:	f1 c1       	rjmp	.+994    	; 0x1296 <Handle_LCD+0x8d6>
			default: break;
		}
	}
	
	else {
		switch(screen) {
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	09 f4       	brne	.+2      	; 0xeba <Handle_LCD+0x4fa>
     eb8:	fc c0       	rjmp	.+504    	; 0x10b2 <Handle_LCD+0x6f2>
     eba:	30 f4       	brcc	.+12     	; 0xec8 <Handle_LCD+0x508>
     ebc:	88 23       	and	r24, r24
     ebe:	59 f0       	breq	.+22     	; 0xed6 <Handle_LCD+0x516>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <Handle_LCD+0x506>
     ec4:	7f c0       	rjmp	.+254    	; 0xfc4 <Handle_LCD+0x604>
     ec6:	e7 c1       	rjmp	.+974    	; 0x1296 <Handle_LCD+0x8d6>
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	09 f4       	brne	.+2      	; 0xece <Handle_LCD+0x50e>
     ecc:	55 c1       	rjmp	.+682    	; 0x1178 <Handle_LCD+0x7b8>
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	09 f4       	brne	.+2      	; 0xed4 <Handle_LCD+0x514>
     ed2:	67 c1       	rjmp	.+718    	; 0x11a2 <Handle_LCD+0x7e2>
     ed4:	e0 c1       	rjmp	.+960    	; 0x1296 <Handle_LCD+0x8d6>
			case MAIN_SCREEN_A:
			LCD_PrintLine(LCD_MAIN_STRINGA_1, LCD_LINE_1);
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	84 eb       	ldi	r24, 0xB4	; 180
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_2, LCD_LINE_2);
     ee0:	60 e4       	ldi	r22, 0x40	; 64
     ee2:	89 ec       	ldi	r24, 0xC9	; 201
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_3, LCD_LINE_3);
     eea:	64 e1       	ldi	r22, 0x14	; 20
     eec:	8e ed       	ldi	r24, 0xDE	; 222
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_4, LCD_LINE_4);
     ef4:	64 e5       	ldi	r22, 0x54	; 84
     ef6:	83 ef       	ldi	r24, 0xF3	; 243
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			
			LCD_PrintChar(UI.type_A[0], LCD_LINE_1, 17);
     efe:	05 e6       	ldi	r16, 0x65	; 101
     f00:	12 e0       	ldi	r17, 0x02	; 2
     f02:	41 e1       	ldi	r20, 0x11	; 17
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	f8 01       	movw	r30, r16
     f08:	80 8d       	ldd	r24, Z+24	; 0x18
     f0a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_A[1], LCD_LINE_1, 18);
     f0e:	42 e1       	ldi	r20, 0x12	; 18
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	f8 01       	movw	r30, r16
     f14:	81 8d       	ldd	r24, Z+25	; 0x19
     f16:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_A[2], LCD_LINE_1, 19);
     f1a:	43 e1       	ldi	r20, 0x13	; 19
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	f8 01       	movw	r30, r16
     f20:	82 8d       	ldd	r24, Z+26	; 0x1a
     f22:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.amplitude_A[0], LCD_LINE_2, 14);
     f26:	4e e0       	ldi	r20, 0x0E	; 14
     f28:	60 e4       	ldi	r22, 0x40	; 64
     f2a:	f8 01       	movw	r30, r16
     f2c:	86 85       	ldd	r24, Z+14	; 0x0e
     f2e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.amplitude_A[1], LCD_LINE_2, 15);
     f32:	4f e0       	ldi	r20, 0x0F	; 15
     f34:	60 e4       	ldi	r22, 0x40	; 64
     f36:	f8 01       	movw	r30, r16
     f38:	87 85       	ldd	r24, Z+15	; 0x0f
     f3a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.frequency_A[0], LCD_LINE_3, 7);
     f3e:	47 e0       	ldi	r20, 0x07	; 7
     f40:	64 e1       	ldi	r22, 0x14	; 20
     f42:	f8 01       	movw	r30, r16
     f44:	80 81       	ld	r24, Z
     f46:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[1], LCD_LINE_3, 9);
     f4a:	49 e0       	ldi	r20, 0x09	; 9
     f4c:	64 e1       	ldi	r22, 0x14	; 20
     f4e:	f8 01       	movw	r30, r16
     f50:	81 81       	ldd	r24, Z+1	; 0x01
     f52:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[2], LCD_LINE_3, 10);
     f56:	4a e0       	ldi	r20, 0x0A	; 10
     f58:	64 e1       	ldi	r22, 0x14	; 20
     f5a:	f8 01       	movw	r30, r16
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[3], LCD_LINE_3, 11);
     f62:	4b e0       	ldi	r20, 0x0B	; 11
     f64:	64 e1       	ldi	r22, 0x14	; 20
     f66:	f8 01       	movw	r30, r16
     f68:	83 81       	ldd	r24, Z+3	; 0x03
     f6a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[4], LCD_LINE_3, 13);
     f6e:	4d e0       	ldi	r20, 0x0D	; 13
     f70:	64 e1       	ldi	r22, 0x14	; 20
     f72:	f8 01       	movw	r30, r16
     f74:	84 81       	ldd	r24, Z+4	; 0x04
     f76:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[5], LCD_LINE_3, 14);
     f7a:	4e e0       	ldi	r20, 0x0E	; 14
     f7c:	64 e1       	ldi	r22, 0x14	; 20
     f7e:	f8 01       	movw	r30, r16
     f80:	85 81       	ldd	r24, Z+5	; 0x05
     f82:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_A[6], LCD_LINE_3, 15);
     f86:	4f e0       	ldi	r20, 0x0F	; 15
     f88:	64 e1       	ldi	r22, 0x14	; 20
     f8a:	f8 01       	movw	r30, r16
     f8c:	86 81       	ldd	r24, Z+6	; 0x06
     f8e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.bias_A_sign, LCD_LINE_4, 7);
     f92:	47 e0       	ldi	r20, 0x07	; 7
     f94:	64 e5       	ldi	r22, 0x54	; 84
     f96:	f8 01       	movw	r30, r16
     f98:	86 8d       	ldd	r24, Z+30	; 0x1e
     f9a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[0], LCD_LINE_4, 8);
     f9e:	48 e0       	ldi	r20, 0x08	; 8
     fa0:	64 e5       	ldi	r22, 0x54	; 84
     fa2:	f8 01       	movw	r30, r16
     fa4:	82 89       	ldd	r24, Z+18	; 0x12
     fa6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[1], LCD_LINE_4, 10);
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	64 e5       	ldi	r22, 0x54	; 84
     fae:	f8 01       	movw	r30, r16
     fb0:	83 89       	ldd	r24, Z+19	; 0x13
     fb2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_A[2], LCD_LINE_4, 11);
     fb6:	4b e0       	ldi	r20, 0x0B	; 11
     fb8:	64 e5       	ldi	r22, 0x54	; 84
     fba:	f8 01       	movw	r30, r16
     fbc:	84 89       	ldd	r24, Z+20	; 0x14
     fbe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
     fc2:	69 c1       	rjmp	.+722    	; 0x1296 <Handle_LCD+0x8d6>
			
			case MAIN_SCREEN_B:
			LCD_PrintLine(LCD_MAIN_STRINGB_1, LCD_LINE_1);
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	88 e0       	ldi	r24, 0x08	; 8
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_2, LCD_LINE_2);
     fce:	60 e4       	ldi	r22, 0x40	; 64
     fd0:	89 ec       	ldi	r24, 0xC9	; 201
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_3, LCD_LINE_3);
     fd8:	64 e1       	ldi	r22, 0x14	; 20
     fda:	8e ed       	ldi	r24, 0xDE	; 222
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_MAIN_STRING_4, LCD_LINE_4);
     fe2:	64 e5       	ldi	r22, 0x54	; 84
     fe4:	83 ef       	ldi	r24, 0xF3	; 243
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			
			LCD_PrintChar(UI.type_B[0], LCD_LINE_1, 17);
     fec:	05 e6       	ldi	r16, 0x65	; 101
     fee:	12 e0       	ldi	r17, 0x02	; 2
     ff0:	41 e1       	ldi	r20, 0x11	; 17
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	f8 01       	movw	r30, r16
     ff6:	83 8d       	ldd	r24, Z+27	; 0x1b
     ff8:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_B[1], LCD_LINE_1, 18);
     ffc:	42 e1       	ldi	r20, 0x12	; 18
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	f8 01       	movw	r30, r16
    1002:	84 8d       	ldd	r24, Z+28	; 0x1c
    1004:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.type_B[2], LCD_LINE_1, 19);
    1008:	43 e1       	ldi	r20, 0x13	; 19
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	f8 01       	movw	r30, r16
    100e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1010:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.amplitude_B[0], LCD_LINE_2, 14);
    1014:	4e e0       	ldi	r20, 0x0E	; 14
    1016:	60 e4       	ldi	r22, 0x40	; 64
    1018:	f8 01       	movw	r30, r16
    101a:	80 89       	ldd	r24, Z+16	; 0x10
    101c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.amplitude_B[1], LCD_LINE_2, 15);
    1020:	4f e0       	ldi	r20, 0x0F	; 15
    1022:	60 e4       	ldi	r22, 0x40	; 64
    1024:	f8 01       	movw	r30, r16
    1026:	81 89       	ldd	r24, Z+17	; 0x11
    1028:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.frequency_B[0], LCD_LINE_3, 7);
    102c:	47 e0       	ldi	r20, 0x07	; 7
    102e:	64 e1       	ldi	r22, 0x14	; 20
    1030:	f8 01       	movw	r30, r16
    1032:	87 81       	ldd	r24, Z+7	; 0x07
    1034:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[1], LCD_LINE_3, 9);
    1038:	49 e0       	ldi	r20, 0x09	; 9
    103a:	64 e1       	ldi	r22, 0x14	; 20
    103c:	f8 01       	movw	r30, r16
    103e:	80 85       	ldd	r24, Z+8	; 0x08
    1040:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[2], LCD_LINE_3, 10);
    1044:	4a e0       	ldi	r20, 0x0A	; 10
    1046:	64 e1       	ldi	r22, 0x14	; 20
    1048:	f8 01       	movw	r30, r16
    104a:	81 85       	ldd	r24, Z+9	; 0x09
    104c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[3], LCD_LINE_3, 11);
    1050:	4b e0       	ldi	r20, 0x0B	; 11
    1052:	64 e1       	ldi	r22, 0x14	; 20
    1054:	f8 01       	movw	r30, r16
    1056:	82 85       	ldd	r24, Z+10	; 0x0a
    1058:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[4], LCD_LINE_3, 13);
    105c:	4d e0       	ldi	r20, 0x0D	; 13
    105e:	64 e1       	ldi	r22, 0x14	; 20
    1060:	f8 01       	movw	r30, r16
    1062:	83 85       	ldd	r24, Z+11	; 0x0b
    1064:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[5], LCD_LINE_3, 14);
    1068:	4e e0       	ldi	r20, 0x0E	; 14
    106a:	64 e1       	ldi	r22, 0x14	; 20
    106c:	f8 01       	movw	r30, r16
    106e:	84 85       	ldd	r24, Z+12	; 0x0c
    1070:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.frequency_B[6], LCD_LINE_3, 15);
    1074:	4f e0       	ldi	r20, 0x0F	; 15
    1076:	64 e1       	ldi	r22, 0x14	; 20
    1078:	f8 01       	movw	r30, r16
    107a:	85 85       	ldd	r24, Z+13	; 0x0d
    107c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.bias_B_sign, LCD_LINE_4, 7);
    1080:	47 e0       	ldi	r20, 0x07	; 7
    1082:	64 e5       	ldi	r22, 0x54	; 84
    1084:	f8 01       	movw	r30, r16
    1086:	87 8d       	ldd	r24, Z+31	; 0x1f
    1088:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[0], LCD_LINE_4, 8);
    108c:	48 e0       	ldi	r20, 0x08	; 8
    108e:	64 e5       	ldi	r22, 0x54	; 84
    1090:	f8 01       	movw	r30, r16
    1092:	85 89       	ldd	r24, Z+21	; 0x15
    1094:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[1], LCD_LINE_4, 10);
    1098:	4a e0       	ldi	r20, 0x0A	; 10
    109a:	64 e5       	ldi	r22, 0x54	; 84
    109c:	f8 01       	movw	r30, r16
    109e:	86 89       	ldd	r24, Z+22	; 0x16
    10a0:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.bias_B[2], LCD_LINE_4, 11);
    10a4:	4b e0       	ldi	r20, 0x0B	; 11
    10a6:	64 e5       	ldi	r22, 0x54	; 84
    10a8:	f8 01       	movw	r30, r16
    10aa:	87 89       	ldd	r24, Z+23	; 0x17
    10ac:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
    10b0:	f2 c0       	rjmp	.+484    	; 0x1296 <Handle_LCD+0x8d6>
			
			case PARAMS_SCREEN:
			if (!staticLCDLoaded) {
    10b2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <staticLCDLoaded.2611>
    10b6:	81 11       	cpse	r24, r1
    10b8:	c5 c0       	rjmp	.+394    	; 0x1244 <Handle_LCD+0x884>
				staticLCDLoaded = true;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <staticLCDLoaded.2611>
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_1, LCD_LINE_1);
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	8d e1       	ldi	r24, 0x1D	; 29
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_2, LCD_LINE_2);
    10ca:	60 e4       	ldi	r22, 0x40	; 64
    10cc:	82 e3       	ldi	r24, 0x32	; 50
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_3, LCD_LINE_3);
    10d4:	64 e1       	ldi	r22, 0x14	; 20
    10d6:	87 e4       	ldi	r24, 0x47	; 71
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_4, LCD_LINE_4);
    10de:	64 e5       	ldi	r22, 0x54	; 84
    10e0:	8c e5       	ldi	r24, 0x5C	; 92
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			}
			
			Main_UintToString(PowerStatus.battery_voltage, &UI.batteryPowerStatus[0], 3);
    10e8:	0f 2e       	mov	r0, r31
    10ea:	f2 e6       	ldi	r31, 0x62	; 98
    10ec:	ef 2e       	mov	r14, r31
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	ff 2e       	mov	r15, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	f7 01       	movw	r30, r14
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	23 e0       	ldi	r18, 0x03	; 3
    1100:	45 e8       	ldi	r20, 0x85	; 133
    1102:	52 e0       	ldi	r21, 0x02	; 2
    1104:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.batteryPowerStatus[0], LCD_LINE_1, 13);
    1108:	05 e6       	ldi	r16, 0x65	; 101
    110a:	12 e0       	ldi	r17, 0x02	; 2
    110c:	4d e0       	ldi	r20, 0x0D	; 13
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	f8 01       	movw	r30, r16
    1112:	80 a1       	ldd	r24, Z+32	; 0x20
    1114:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.batteryPowerStatus[1], LCD_LINE_1, 15);
    1118:	4f e0       	ldi	r20, 0x0F	; 15
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	f8 01       	movw	r30, r16
    111e:	81 a1       	ldd	r24, Z+33	; 0x21
    1120:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.batteryPowerStatus[2], LCD_LINE_1, 16);
    1124:	40 e1       	ldi	r20, 0x10	; 16
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	f8 01       	movw	r30, r16
    112a:	82 a1       	ldd	r24, Z+34	; 0x22
    112c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			if (PowerStatus.ac_power_PowerStatus) {
    1130:	f7 01       	movw	r30, r14
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	88 23       	and	r24, r24
    1136:	81 f0       	breq	.+32     	; 0x1158 <Handle_LCD+0x798>
				LCD_PrintChar('O', LCD_LINE_2, 16);
    1138:	40 e1       	ldi	r20, 0x10	; 16
    113a:	60 e4       	ldi	r22, 0x40	; 64
    113c:	8f e4       	ldi	r24, 0x4F	; 79
    113e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
				LCD_PrintChar('N', LCD_LINE_2, 17);
    1142:	41 e1       	ldi	r20, 0x11	; 17
    1144:	60 e4       	ldi	r22, 0x40	; 64
    1146:	8e e4       	ldi	r24, 0x4E	; 78
    1148:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
				LCD_PrintChar(' ', LCD_LINE_2, 18);
    114c:	42 e1       	ldi	r20, 0x12	; 18
    114e:	60 e4       	ldi	r22, 0x40	; 64
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
    1156:	9f c0       	rjmp	.+318    	; 0x1296 <Handle_LCD+0x8d6>
			}
			else if (!PowerStatus.ac_power_PowerStatus) {
				LCD_PrintChar('O', LCD_LINE_2, 16);
    1158:	40 e1       	ldi	r20, 0x10	; 16
    115a:	60 e4       	ldi	r22, 0x40	; 64
    115c:	8f e4       	ldi	r24, 0x4F	; 79
    115e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
				LCD_PrintChar('F', LCD_LINE_2, 17);
    1162:	41 e1       	ldi	r20, 0x11	; 17
    1164:	60 e4       	ldi	r22, 0x40	; 64
    1166:	86 e4       	ldi	r24, 0x46	; 70
    1168:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
				LCD_PrintChar('F', LCD_LINE_2, 18);
    116c:	42 e1       	ldi	r20, 0x12	; 18
    116e:	60 e4       	ldi	r22, 0x40	; 64
    1170:	86 e4       	ldi	r24, 0x46	; 70
    1172:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
    1176:	8f c0       	rjmp	.+286    	; 0x1296 <Handle_LCD+0x8d6>
			}
			break;
			
			case PROFILE_SCREEN:
			LCD_PrintLine(LCD_PROFILE_SETTINGS_STRING_1, LCD_LINE_1);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	81 e7       	ldi	r24, 0x71	; 113
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_PROFILE_SETTINGS_STRING_2, LCD_LINE_2);
    1182:	60 e4       	ldi	r22, 0x40	; 64
    1184:	86 e8       	ldi	r24, 0x86	; 134
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_PROFILE_SETTINGS_STRING_3, LCD_LINE_3);
    118c:	64 e1       	ldi	r22, 0x14	; 20
    118e:	8b e9       	ldi	r24, 0x9B	; 155
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_PROFILE_SETTINGS_STRING_4, LCD_LINE_4);
    1196:	64 e5       	ldi	r22, 0x54	; 84
    1198:	80 eb       	ldi	r24, 0xB0	; 176
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			break;
    11a0:	7a c0       	rjmp	.+244    	; 0x1296 <Handle_LCD+0x8d6>

			case LCD_SCREEN:
			LCD_PrintLine(LCD_SCREEN_SETTINGS_STRING_1, LCD_LINE_1);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	85 ec       	ldi	r24, 0xC5	; 197
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_SCREEN_SETTINGS_STRING_2, LCD_LINE_2);
    11ac:	60 e4       	ldi	r22, 0x40	; 64
    11ae:	8a ed       	ldi	r24, 0xDA	; 218
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_SCREEN_SETTINGS_STRING_3, LCD_LINE_3);
    11b6:	64 e1       	ldi	r22, 0x14	; 20
    11b8:	8f ee       	ldi	r24, 0xEF	; 239
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			LCD_PrintLine(LCD_SCREEN_SETTINGS_STRING_4, LCD_LINE_4);
    11c0:	64 e5       	ldi	r22, 0x54	; 84
    11c2:	80 e6       	ldi	r24, 0x60	; 96
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
			
			Main_UintToString(LCD.brightness, &UI.lcd_brightness[0], 3);
    11ca:	03 e9       	ldi	r16, 0x93	; 147
    11cc:	12 e0       	ldi	r17, 0x02	; 2
    11ce:	f8 01       	movw	r30, r16
    11d0:	60 81       	ld	r22, Z
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	23 e0       	ldi	r18, 0x03	; 3
    11da:	48 e8       	ldi	r20, 0x88	; 136
    11dc:	52 e0       	ldi	r21, 0x02	; 2
    11de:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			Main_UintToString(LCD.contrast, &UI.lcd_contrast[0], 3);
    11e2:	f8 01       	movw	r30, r16
    11e4:	61 81       	ldd	r22, Z+1	; 0x01
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	23 e0       	ldi	r18, 0x03	; 3
    11ee:	4b e8       	ldi	r20, 0x8B	; 139
    11f0:	52 e0       	ldi	r21, 0x02	; 2
    11f2:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			
			LCD_PrintChar(UI.lcd_brightness[0], LCD_LINE_2, 13);
    11f6:	05 e6       	ldi	r16, 0x65	; 101
    11f8:	12 e0       	ldi	r17, 0x02	; 2
    11fa:	4d e0       	ldi	r20, 0x0D	; 13
    11fc:	60 e4       	ldi	r22, 0x40	; 64
    11fe:	f8 01       	movw	r30, r16
    1200:	83 a1       	ldd	r24, Z+35	; 0x23
    1202:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_brightness[1], LCD_LINE_2, 14);
    1206:	4e e0       	ldi	r20, 0x0E	; 14
    1208:	60 e4       	ldi	r22, 0x40	; 64
    120a:	f8 01       	movw	r30, r16
    120c:	84 a1       	ldd	r24, Z+36	; 0x24
    120e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_brightness[2], LCD_LINE_2, 15);
    1212:	4f e0       	ldi	r20, 0x0F	; 15
    1214:	60 e4       	ldi	r22, 0x40	; 64
    1216:	f8 01       	movw	r30, r16
    1218:	85 a1       	ldd	r24, Z+37	; 0x25
    121a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			LCD_PrintChar(UI.lcd_contrast[0], LCD_LINE_3, 13);
    121e:	4d e0       	ldi	r20, 0x0D	; 13
    1220:	64 e1       	ldi	r22, 0x14	; 20
    1222:	f8 01       	movw	r30, r16
    1224:	86 a1       	ldd	r24, Z+38	; 0x26
    1226:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_contrast[1], LCD_LINE_3, 14);
    122a:	4e e0       	ldi	r20, 0x0E	; 14
    122c:	64 e1       	ldi	r22, 0x14	; 20
    122e:	f8 01       	movw	r30, r16
    1230:	87 a1       	ldd	r24, Z+39	; 0x27
    1232:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.lcd_contrast[2], LCD_LINE_3, 15);
    1236:	4f e0       	ldi	r20, 0x0F	; 15
    1238:	64 e1       	ldi	r22, 0x14	; 20
    123a:	f8 01       	movw	r30, r16
    123c:	80 a5       	ldd	r24, Z+40	; 0x28
    123e:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			break;
			
			default: break;
		}					
	}
}
    1242:	29 c0       	rjmp	.+82     	; 0x1296 <Handle_LCD+0x8d6>
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_2, LCD_LINE_2);
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_3, LCD_LINE_3);
				LCD_PrintLine(LCD_MAIN_SETTINGS_STRING_4, LCD_LINE_4);
			}
			
			Main_UintToString(PowerStatus.battery_voltage, &UI.batteryPowerStatus[0], 3);
    1244:	0f 2e       	mov	r0, r31
    1246:	f2 e6       	ldi	r31, 0x62	; 98
    1248:	ef 2e       	mov	r14, r31
    124a:	f2 e0       	ldi	r31, 0x02	; 2
    124c:	ff 2e       	mov	r15, r31
    124e:	f0 2d       	mov	r31, r0
    1250:	f7 01       	movw	r30, r14
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	23 e0       	ldi	r18, 0x03	; 3
    125c:	45 e8       	ldi	r20, 0x85	; 133
    125e:	52 e0       	ldi	r21, 0x02	; 2
    1260:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
			LCD_PrintChar(UI.batteryPowerStatus[0], LCD_LINE_1, 13);
    1264:	05 e6       	ldi	r16, 0x65	; 101
    1266:	12 e0       	ldi	r17, 0x02	; 2
    1268:	4d e0       	ldi	r20, 0x0D	; 13
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	f8 01       	movw	r30, r16
    126e:	80 a1       	ldd	r24, Z+32	; 0x20
    1270:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.batteryPowerStatus[1], LCD_LINE_1, 15);
    1274:	4f e0       	ldi	r20, 0x0F	; 15
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	f8 01       	movw	r30, r16
    127a:	81 a1       	ldd	r24, Z+33	; 0x21
    127c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			LCD_PrintChar(UI.batteryPowerStatus[2], LCD_LINE_1, 16);
    1280:	40 e1       	ldi	r20, 0x10	; 16
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	f8 01       	movw	r30, r16
    1286:	82 a1       	ldd	r24, Z+34	; 0x22
    1288:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_PrintChar>
			
			if (PowerStatus.ac_power_PowerStatus) {
    128c:	f7 01       	movw	r30, r14
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	81 11       	cpse	r24, r1
    1292:	52 cf       	rjmp	.-348    	; 0x1138 <Handle_LCD+0x778>
    1294:	61 cf       	rjmp	.-318    	; 0x1158 <Handle_LCD+0x798>
			break;
			
			default: break;
		}					
	}
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	08 95       	ret

000012a4 <LCD_LogoDisplay>:
		number /= 10;
		iPtr++;
	}
}

void LCD_LogoDisplay() {
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	64 97       	sbiw	r28, 0x14	; 20
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	LCD_Clear();
    12bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Clear>
	LCD_PrintLine("<<Portable FuncGen>>", LCD_LINE_1);
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
	snprintf(lbuff, 20, " Firmware V%c.%c.%c ", FIRMWARE_VERSION_MAJOR, FIRMWARE_VERSION_MINOR, FIRMWARE_VERSION_BUILD);
    12ca:	1f 92       	push	r1
    12cc:	82 e3       	ldi	r24, 0x32	; 50
    12ce:	8f 93       	push	r24
    12d0:	1f 92       	push	r1
    12d2:	90 e3       	ldi	r25, 0x30	; 48
    12d4:	9f 93       	push	r25
    12d6:	1f 92       	push	r1
    12d8:	8f 93       	push	r24
    12da:	89 e1       	ldi	r24, 0x19	; 25
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	1f 92       	push	r1
    12e4:	84 e1       	ldi	r24, 0x14	; 20
    12e6:	8f 93       	push	r24
    12e8:	8e 01       	movw	r16, r28
    12ea:	0f 5f       	subi	r16, 0xFF	; 255
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	1f 93       	push	r17
    12f0:	0f 93       	push	r16
    12f2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <snprintf>
	LCD_PrintLine(lbuff, LCD_LINE_2);
    12f6:	60 e4       	ldi	r22, 0x40	; 64
    12f8:	c8 01       	movw	r24, r16
    12fa:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
	LCD_PrintLine("  <Initializing...> ", LCD_LINE_4);
    12fe:	64 e5       	ldi	r22, 0x54	; 84
    1300:	8e e2       	ldi	r24, 0x2E	; 46
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_PrintLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	84 e3       	ldi	r24, 0x34	; 52
    130c:	9c e0       	ldi	r25, 0x0C	; 12
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	80 40       	sbci	r24, 0x00	; 0
    1312:	90 40       	sbci	r25, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <LCD_LogoDisplay+0x6a>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <LCD_LogoDisplay+0x74>
    1318:	00 00       	nop
	_delay_ms(500);
}
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	64 96       	adiw	r28, 0x14	; 20
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	08 95       	ret

0000133a <Init_UI>:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
	ADMUX |= (1 << REFS0);
}

void Init_UI() {
	LCD_BrightnessAnimation();
    133a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_BrightnessAnimation>
	LCD_SetBrightness(100);
    133e:	84 e6       	ldi	r24, 0x64	; 100
    1340:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_SetBrightness>
	LCD_SetContrast(100);
    1344:	84 e6       	ldi	r24, 0x64	; 100
    1346:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_SetContrast>
	LCD_LogoDisplay();
    134a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_LogoDisplay>
	Buzzer_PlayMelody(true);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Buzzer_PlayMelody>
    1354:	08 95       	ret

00001356 <EEPROM_SaveProfile>:
	LCD_PrintLine(lbuff, LCD_LINE_2);
	LCD_PrintLine("  <Initializing...> ", LCD_LINE_4);
	_delay_ms(500);
}

void EEPROM_SaveProfile(FGX FunctionGenerator) {
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_dword((uint32_t *)0x00, FunctionGenerator.frequency_A); eeprom_busy_wait();
    135e:	4d 81       	ldd	r20, Y+5	; 0x05
    1360:	5e 81       	ldd	r21, Y+6	; 0x06
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <eeprom_write_dword>
    136e:	e1 99       	sbic	0x1c, 1	; 28
    1370:	fe cf       	rjmp	.-4      	; 0x136e <EEPROM_SaveProfile+0x18>
	eeprom_write_dword((uint32_t *)0x04, FunctionGenerator.frequency_B); eeprom_busy_wait();
    1372:	49 85       	ldd	r20, Y+9	; 0x09
    1374:	5a 85       	ldd	r21, Y+10	; 0x0a
    1376:	6b 85       	ldd	r22, Y+11	; 0x0b
    1378:	7c 85       	ldd	r23, Y+12	; 0x0c
    137a:	84 e0       	ldi	r24, 0x04	; 4
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <eeprom_write_dword>
    1382:	e1 99       	sbic	0x1c, 1	; 28
    1384:	fe cf       	rjmp	.-4      	; 0x1382 <EEPROM_SaveProfile+0x2c>
	eeprom_write_byte((uint8_t *)0x08, FunctionGenerator.amplitude_A); eeprom_busy_wait();
    1386:	6d 85       	ldd	r22, Y+13	; 0x0d
    1388:	88 e0       	ldi	r24, 0x08	; 8
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    1390:	e1 99       	sbic	0x1c, 1	; 28
    1392:	fe cf       	rjmp	.-4      	; 0x1390 <EEPROM_SaveProfile+0x3a>
	eeprom_write_byte((uint8_t *)0x09, FunctionGenerator.amplitude_B); eeprom_busy_wait();
    1394:	6f 85       	ldd	r22, Y+15	; 0x0f
    1396:	89 e0       	ldi	r24, 0x09	; 9
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    139e:	e1 99       	sbic	0x1c, 1	; 28
    13a0:	fe cf       	rjmp	.-4      	; 0x139e <EEPROM_SaveProfile+0x48>
	eeprom_write_byte((uint8_t *)0x0A, FunctionGenerator.bias_A_sign); eeprom_busy_wait();
    13a2:	6f 89       	ldd	r22, Y+23	; 0x17
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    13ac:	e1 99       	sbic	0x1c, 1	; 28
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <EEPROM_SaveProfile+0x56>
	eeprom_write_byte((uint8_t *)0x0B, FunctionGenerator.bias_B_sign); eeprom_busy_wait();
    13b0:	68 8d       	ldd	r22, Y+24	; 0x18
    13b2:	8b e0       	ldi	r24, 0x0B	; 11
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    13ba:	e1 99       	sbic	0x1c, 1	; 28
    13bc:	fe cf       	rjmp	.-4      	; 0x13ba <EEPROM_SaveProfile+0x64>
	eeprom_write_word((uint16_t *)0x0C, abs(FunctionGenerator.bias_A)); eeprom_busy_wait();
    13be:	6b 89       	ldd	r22, Y+19	; 0x13
    13c0:	7c 89       	ldd	r23, Y+20	; 0x14
    13c2:	77 23       	and	r23, r23
    13c4:	1c f4       	brge	.+6      	; 0x13cc <EEPROM_SaveProfile+0x76>
    13c6:	71 95       	neg	r23
    13c8:	61 95       	neg	r22
    13ca:	71 09       	sbc	r23, r1
    13cc:	8c e0       	ldi	r24, 0x0C	; 12
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <eeprom_write_word>
    13d4:	e1 99       	sbic	0x1c, 1	; 28
    13d6:	fe cf       	rjmp	.-4      	; 0x13d4 <EEPROM_SaveProfile+0x7e>
	eeprom_write_word((uint16_t *)0x0E, abs(FunctionGenerator.bias_B)); eeprom_busy_wait();
    13d8:	6d 89       	ldd	r22, Y+21	; 0x15
    13da:	7e 89       	ldd	r23, Y+22	; 0x16
    13dc:	77 23       	and	r23, r23
    13de:	1c f4       	brge	.+6      	; 0x13e6 <EEPROM_SaveProfile+0x90>
    13e0:	71 95       	neg	r23
    13e2:	61 95       	neg	r22
    13e4:	71 09       	sbc	r23, r1
    13e6:	8e e0       	ldi	r24, 0x0E	; 14
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 fe 19 	call	0x33fc	; 0x33fc <eeprom_write_word>
    13ee:	e1 99       	sbic	0x1c, 1	; 28
    13f0:	fe cf       	rjmp	.-4      	; 0x13ee <EEPROM_SaveProfile+0x98>
	eeprom_write_byte((uint8_t *)0x10, FunctionGenerator.output_type_A); eeprom_busy_wait();
    13f2:	69 89       	ldd	r22, Y+17	; 0x11
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    13fc:	e1 99       	sbic	0x1c, 1	; 28
    13fe:	fe cf       	rjmp	.-4      	; 0x13fc <EEPROM_SaveProfile+0xa6>
	eeprom_write_byte((uint8_t *)0x11, FunctionGenerator.output_type_B); eeprom_busy_wait();
    1400:	6a 89       	ldd	r22, Y+18	; 0x12
    1402:	81 e1       	ldi	r24, 0x11	; 17
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    140a:	e1 99       	sbic	0x1c, 1	; 28
    140c:	fe cf       	rjmp	.-4      	; 0x140a <EEPROM_SaveProfile+0xb4>
	eeprom_write_byte((uint8_t *)0x12, LCD.brightness); eeprom_busy_wait();
    140e:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <LCD>
    1412:	82 e1       	ldi	r24, 0x12	; 18
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    141a:	e1 99       	sbic	0x1c, 1	; 28
    141c:	fe cf       	rjmp	.-4      	; 0x141a <EEPROM_SaveProfile+0xc4>
	eeprom_write_byte((uint8_t *)0x13, LCD.contrast); eeprom_busy_wait();
    141e:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <LCD+0x1>
    1422:	83 e1       	ldi	r24, 0x13	; 19
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    142a:	e1 99       	sbic	0x1c, 1	; 28
    142c:	fe cf       	rjmp	.-4      	; 0x142a <EEPROM_SaveProfile+0xd4>
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <EEPROM_LoadProfile>:

void EEPROM_LoadProfile(FGX FunctionGenerator) {
    1434:	2f 92       	push	r2
    1436:	3f 92       	push	r3
    1438:	4f 92       	push	r4
    143a:	5f 92       	push	r5
    143c:	6f 92       	push	r6
    143e:	7f 92       	push	r7
    1440:	8f 92       	push	r8
    1442:	9f 92       	push	r9
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <EEPROM_LoadProfile+0x26>
    145a:	00 d0       	rcall	.+0      	; 0x145c <EEPROM_LoadProfile+0x28>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	FunctionGenerator.frequency_A = eeprom_read_dword((uint32_t *)0x00); eeprom_busy_wait();
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 dd 19 	call	0x33ba	; 0x33ba <eeprom_read_dword>
    1468:	2b 01       	movw	r4, r22
    146a:	3c 01       	movw	r6, r24
    146c:	e1 99       	sbic	0x1c, 1	; 28
    146e:	fe cf       	rjmp	.-4      	; 0x146c <EEPROM_LoadProfile+0x38>
	FunctionGenerator.frequency_B = eeprom_read_dword((uint32_t *)0x04); eeprom_busy_wait();
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 dd 19 	call	0x33ba	; 0x33ba <eeprom_read_dword>
    1478:	69 83       	std	Y+1, r22	; 0x01
    147a:	7a 83       	std	Y+2, r23	; 0x02
    147c:	8b 83       	std	Y+3, r24	; 0x03
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	e1 99       	sbic	0x1c, 1	; 28
    1482:	fe cf       	rjmp	.-4      	; 0x1480 <EEPROM_LoadProfile+0x4c>
	FunctionGenerator.amplitude_A = eeprom_read_byte((uint8_t *)0x08); eeprom_busy_wait();
    1484:	88 e0       	ldi	r24, 0x08	; 8
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    148c:	d8 2e       	mov	r13, r24
    148e:	e1 99       	sbic	0x1c, 1	; 28
    1490:	fe cf       	rjmp	.-4      	; 0x148e <EEPROM_LoadProfile+0x5a>
	FunctionGenerator.amplitude_B = eeprom_read_byte((uint8_t *)0x09); eeprom_busy_wait();
    1492:	89 e0       	ldi	r24, 0x09	; 9
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    149a:	e8 2e       	mov	r14, r24
    149c:	e1 99       	sbic	0x1c, 1	; 28
    149e:	fe cf       	rjmp	.-4      	; 0x149c <EEPROM_LoadProfile+0x68>
	FunctionGenerator.bias_A_sign = eeprom_read_byte((uint8_t *)0x0A); eeprom_busy_wait();
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    14a8:	f8 2e       	mov	r15, r24
    14aa:	22 24       	eor	r2, r2
    14ac:	23 94       	inc	r2
    14ae:	81 11       	cpse	r24, r1
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <EEPROM_LoadProfile+0x80>
    14b2:	21 2c       	mov	r2, r1
    14b4:	e1 99       	sbic	0x1c, 1	; 28
    14b6:	fe cf       	rjmp	.-4      	; 0x14b4 <EEPROM_LoadProfile+0x80>
	FunctionGenerator.bias_B_sign = eeprom_read_byte((uint8_t *)0x0B); eeprom_busy_wait();
    14b8:	8b e0       	ldi	r24, 0x0B	; 11
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    14c0:	38 2e       	mov	r3, r24
    14c2:	e1 99       	sbic	0x1c, 1	; 28
    14c4:	fe cf       	rjmp	.-4      	; 0x14c2 <EEPROM_LoadProfile+0x8e>
	
	if (FunctionGenerator.bias_A_sign == POSITIVE) { FunctionGenerator.bias_A = eeprom_read_word((uint16_t *)0x0C); eeprom_busy_wait(); }
    14c6:	f1 10       	cpse	r15, r1
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <EEPROM_LoadProfile+0xa6>
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <eeprom_read_word>
    14d2:	5c 01       	movw	r10, r24
    14d4:	e1 99       	sbic	0x1c, 1	; 28
    14d6:	fe cf       	rjmp	.-4      	; 0x14d4 <EEPROM_LoadProfile+0xa0>
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <EEPROM_LoadProfile+0xc0>
	else FunctionGenerator.bias_A = -abs(eeprom_read_word((uint16_t *)0x0C)); eeprom_busy_wait();
    14da:	8c e0       	ldi	r24, 0x0C	; 12
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <eeprom_read_word>
    14e2:	99 23       	and	r25, r25
    14e4:	1c f4       	brge	.+6      	; 0x14ec <EEPROM_LoadProfile+0xb8>
    14e6:	91 95       	neg	r25
    14e8:	81 95       	neg	r24
    14ea:	91 09       	sbc	r25, r1
    14ec:	aa 24       	eor	r10, r10
    14ee:	bb 24       	eor	r11, r11
    14f0:	a8 1a       	sub	r10, r24
    14f2:	b9 0a       	sbc	r11, r25
    14f4:	e1 99       	sbic	0x1c, 1	; 28
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <EEPROM_LoadProfile+0xc0>
	
	if (FunctionGenerator.bias_B_sign == POSITIVE) { FunctionGenerator.bias_B = eeprom_read_word((uint16_t *)0x0E); eeprom_busy_wait(); }
    14f8:	31 10       	cpse	r3, r1
    14fa:	08 c0       	rjmp	.+16     	; 0x150c <EEPROM_LoadProfile+0xd8>
    14fc:	8e e0       	ldi	r24, 0x0E	; 14
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <eeprom_read_word>
    1504:	4c 01       	movw	r8, r24
    1506:	e1 99       	sbic	0x1c, 1	; 28
    1508:	fe cf       	rjmp	.-4      	; 0x1506 <EEPROM_LoadProfile+0xd2>
    150a:	0f c0       	rjmp	.+30     	; 0x152a <EEPROM_LoadProfile+0xf6>
    150c:	89 a4       	ldd	r8, Y+41	; 0x29
    150e:	9a a4       	ldd	r9, Y+42	; 0x2a
	else FunctionGenerator.bias_A = -abs(eeprom_read_word((uint16_t *)0x0E)); eeprom_busy_wait();
    1510:	8e e0       	ldi	r24, 0x0E	; 14
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <eeprom_read_word>
    1518:	99 23       	and	r25, r25
    151a:	1c f4       	brge	.+6      	; 0x1522 <EEPROM_LoadProfile+0xee>
    151c:	91 95       	neg	r25
    151e:	81 95       	neg	r24
    1520:	91 09       	sbc	r25, r1
    1522:	aa 24       	eor	r10, r10
    1524:	bb 24       	eor	r11, r11
    1526:	a8 1a       	sub	r10, r24
    1528:	b9 0a       	sbc	r11, r25
    152a:	e1 99       	sbic	0x1c, 1	; 28
    152c:	fe cf       	rjmp	.-4      	; 0x152a <EEPROM_LoadProfile+0xf6>
	
	FunctionGenerator.output_type_A = eeprom_read_byte((uint8_t *)0x10); eeprom_busy_wait();
    152e:	80 e1       	ldi	r24, 0x10	; 16
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    1536:	08 2f       	mov	r16, r24
    1538:	e1 99       	sbic	0x1c, 1	; 28
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <EEPROM_LoadProfile+0x104>
	FunctionGenerator.output_type_B = eeprom_read_byte((uint8_t *)0x11); eeprom_busy_wait();
    153c:	81 e1       	ldi	r24, 0x11	; 17
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    1544:	18 2f       	mov	r17, r24
    1546:	e1 99       	sbic	0x1c, 1	; 28
    1548:	fe cf       	rjmp	.-4      	; 0x1546 <EEPROM_LoadProfile+0x112>
	LCD.brightness = eeprom_read_byte((uint8_t *)0x12); eeprom_busy_wait();
    154a:	82 e1       	ldi	r24, 0x12	; 18
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    1552:	c8 2e       	mov	r12, r24
    1554:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <LCD>
    1558:	e1 99       	sbic	0x1c, 1	; 28
    155a:	fe cf       	rjmp	.-4      	; 0x1558 <EEPROM_LoadProfile+0x124>
	LCD.contrast = eeprom_read_byte((uint8_t *)0x13); eeprom_busy_wait();
    155c:	83 e1       	ldi	r24, 0x13	; 19
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 d5 19 	call	0x33aa	; 0x33aa <eeprom_read_byte>
    1564:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <LCD+0x1>
    1568:	e1 99       	sbic	0x1c, 1	; 28
    156a:	fe cf       	rjmp	.-4      	; 0x1568 <EEPROM_LoadProfile+0x134>
	
	Main_UintToString(LCD.brightness, &UI.lcd_brightness[0], 3);
    156c:	6c 2d       	mov	r22, r12
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	23 e0       	ldi	r18, 0x03	; 3
    1576:	48 e8       	ldi	r20, 0x88	; 136
    1578:	52 e0       	ldi	r21, 0x02	; 2
    157a:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(LCD.contrast, &UI.lcd_contrast[0], 3);
    157e:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <LCD+0x1>
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	23 e0       	ldi	r18, 0x03	; 3
    158a:	4b e8       	ldi	r20, 0x8B	; 139
    158c:	52 e0       	ldi	r21, 0x02	; 2
    158e:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(abs(FunctionGenerator.bias_A), &UI.bias_A[0], 3);
    1592:	b5 01       	movw	r22, r10
    1594:	bb 20       	and	r11, r11
    1596:	24 f4       	brge	.+8      	; 0x15a0 <EEPROM_LoadProfile+0x16c>
    1598:	66 27       	eor	r22, r22
    159a:	77 27       	eor	r23, r23
    159c:	6a 19       	sub	r22, r10
    159e:	7b 09       	sbc	r23, r11
    15a0:	5b 01       	movw	r10, r22
    15a2:	07 2e       	mov	r0, r23
    15a4:	00 0c       	add	r0, r0
    15a6:	88 0b       	sbc	r24, r24
    15a8:	99 0b       	sbc	r25, r25
    15aa:	23 e0       	ldi	r18, 0x03	; 3
    15ac:	47 e7       	ldi	r20, 0x77	; 119
    15ae:	52 e0       	ldi	r21, 0x02	; 2
    15b0:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(abs(FunctionGenerator.bias_B), &UI.bias_B[0], 3);
    15b4:	b4 01       	movw	r22, r8
    15b6:	99 20       	and	r9, r9
    15b8:	24 f4       	brge	.+8      	; 0x15c2 <EEPROM_LoadProfile+0x18e>
    15ba:	66 27       	eor	r22, r22
    15bc:	77 27       	eor	r23, r23
    15be:	68 19       	sub	r22, r8
    15c0:	79 09       	sbc	r23, r9
    15c2:	07 2e       	mov	r0, r23
    15c4:	00 0c       	add	r0, r0
    15c6:	88 0b       	sbc	r24, r24
    15c8:	99 0b       	sbc	r25, r25
    15ca:	23 e0       	ldi	r18, 0x03	; 3
    15cc:	4a e7       	ldi	r20, 0x7A	; 122
    15ce:	52 e0       	ldi	r21, 0x02	; 2
    15d0:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(FunctionGenerator.frequency_B, &UI.frequency_B[0], 7);
    15d4:	27 e0       	ldi	r18, 0x07	; 7
    15d6:	4c e6       	ldi	r20, 0x6C	; 108
    15d8:	52 e0       	ldi	r21, 0x02	; 2
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	7a 81       	ldd	r23, Y+2	; 0x02
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(FunctionGenerator.frequency_A, &UI.frequency_A[0], 7);
    15e6:	27 e0       	ldi	r18, 0x07	; 7
    15e8:	45 e6       	ldi	r20, 0x65	; 101
    15ea:	52 e0       	ldi	r21, 0x02	; 2
    15ec:	c3 01       	movw	r24, r6
    15ee:	b2 01       	movw	r22, r4
    15f0:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(FunctionGenerator.amplitude_B, &UI.amplitude_B[0], 2);
    15f4:	8e 2d       	mov	r24, r14
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	22 e0       	ldi	r18, 0x02	; 2
    15fe:	45 e7       	ldi	r20, 0x75	; 117
    1600:	52 e0       	ldi	r21, 0x02	; 2
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	Main_UintToString(FunctionGenerator.amplitude_A, &UI.amplitude_A[0], 2);
    160a:	8d 2d       	mov	r24, r13
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	22 e0       	ldi	r18, 0x02	; 2
    1614:	43 e7       	ldi	r20, 0x73	; 115
    1616:	52 e0       	ldi	r21, 0x02	; 2
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 b4 04 	call	0x968	; 0x968 <Main_UintToString>
	if (FunctionGenerator.bias_B_sign == POSITIVE) UI.bias_B_sign = '+';
    1620:	31 10       	cpse	r3, r1
    1622:	04 c0       	rjmp	.+8      	; 0x162c <EEPROM_LoadProfile+0x1f8>
    1624:	8b e2       	ldi	r24, 0x2B	; 43
    1626:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <UI+0x1f>
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <EEPROM_LoadProfile+0x1fe>
	else UI.bias_B_sign = '-';
    162c:	8d e2       	ldi	r24, 0x2D	; 45
    162e:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <UI+0x1f>
	if (FunctionGenerator.bias_A_sign == POSITIVE) UI.bias_A_sign = '+';
    1632:	f1 10       	cpse	r15, r1
    1634:	04 c0       	rjmp	.+8      	; 0x163e <EEPROM_LoadProfile+0x20a>
    1636:	8b e2       	ldi	r24, 0x2B	; 43
    1638:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <UI+0x1e>
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <EEPROM_LoadProfile+0x210>
	else UI.bias_A_sign = '-';
    163e:	8d e2       	ldi	r24, 0x2D	; 45
    1640:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <UI+0x1e>
	switch(FunctionGenerator.output_type_B) {
    1644:	13 30       	cpi	r17, 0x03	; 3
    1646:	e9 f0       	breq	.+58     	; 0x1682 <EEPROM_LoadProfile+0x24e>
    1648:	28 f4       	brcc	.+10     	; 0x1654 <EEPROM_LoadProfile+0x220>
    164a:	11 30       	cpi	r17, 0x01	; 1
    164c:	41 f0       	breq	.+16     	; 0x165e <EEPROM_LoadProfile+0x22a>
    164e:	12 30       	cpi	r17, 0x02	; 2
    1650:	79 f0       	breq	.+30     	; 0x1670 <EEPROM_LoadProfile+0x23c>
    1652:	30 c0       	rjmp	.+96     	; 0x16b4 <EEPROM_LoadProfile+0x280>
    1654:	14 30       	cpi	r17, 0x04	; 4
    1656:	f1 f0       	breq	.+60     	; 0x1694 <EEPROM_LoadProfile+0x260>
    1658:	15 30       	cpi	r17, 0x05	; 5
    165a:	29 f1       	breq	.+74     	; 0x16a6 <EEPROM_LoadProfile+0x272>
    165c:	2b c0       	rjmp	.+86     	; 0x16b4 <EEPROM_LoadProfile+0x280>
		case SINE:UI.type_B[0] = 'S'; UI.type_B[1] = 'I'; UI.type_B[2] = 'N'; break;
    165e:	e5 e6       	ldi	r30, 0x65	; 101
    1660:	f2 e0       	ldi	r31, 0x02	; 2
    1662:	83 e5       	ldi	r24, 0x53	; 83
    1664:	83 8f       	std	Z+27, r24	; 0x1b
    1666:	89 e4       	ldi	r24, 0x49	; 73
    1668:	84 8f       	std	Z+28, r24	; 0x1c
    166a:	8e e4       	ldi	r24, 0x4E	; 78
    166c:	85 8f       	std	Z+29, r24	; 0x1d
    166e:	22 c0       	rjmp	.+68     	; 0x16b4 <EEPROM_LoadProfile+0x280>
		case TRIANGLE:UI.type_B[0] = 'T'; UI.type_B[1] = 'R'; UI.type_B[2] = 'N'; break;
    1670:	e5 e6       	ldi	r30, 0x65	; 101
    1672:	f2 e0       	ldi	r31, 0x02	; 2
    1674:	84 e5       	ldi	r24, 0x54	; 84
    1676:	83 8f       	std	Z+27, r24	; 0x1b
    1678:	82 e5       	ldi	r24, 0x52	; 82
    167a:	84 8f       	std	Z+28, r24	; 0x1c
    167c:	8e e4       	ldi	r24, 0x4E	; 78
    167e:	85 8f       	std	Z+29, r24	; 0x1d
    1680:	19 c0       	rjmp	.+50     	; 0x16b4 <EEPROM_LoadProfile+0x280>
		case SQUARE: UI.type_B[0] = 'S'; UI.type_B[1] = 'Q'; UI.type_B[2] = 'R'; break;
    1682:	e5 e6       	ldi	r30, 0x65	; 101
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	83 e5       	ldi	r24, 0x53	; 83
    1688:	83 8f       	std	Z+27, r24	; 0x1b
    168a:	81 e5       	ldi	r24, 0x51	; 81
    168c:	84 8f       	std	Z+28, r24	; 0x1c
    168e:	82 e5       	ldi	r24, 0x52	; 82
    1690:	85 8f       	std	Z+29, r24	; 0x1d
    1692:	10 c0       	rjmp	.+32     	; 0x16b4 <EEPROM_LoadProfile+0x280>
		case DC: UI.type_B[0] = ' '; UI.type_B[1] = 'D'; UI.type_B[2] = 'C'; break;
    1694:	e5 e6       	ldi	r30, 0x65	; 101
    1696:	f2 e0       	ldi	r31, 0x02	; 2
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	83 8f       	std	Z+27, r24	; 0x1b
    169c:	84 e4       	ldi	r24, 0x44	; 68
    169e:	84 8f       	std	Z+28, r24	; 0x1c
    16a0:	83 e4       	ldi	r24, 0x43	; 67
    16a2:	85 8f       	std	Z+29, r24	; 0x1d
    16a4:	07 c0       	rjmp	.+14     	; 0x16b4 <EEPROM_LoadProfile+0x280>
		case OFF: UI.type_B[0] = 'O'; UI.type_B[1] = 'F'; UI.type_B[2] = 'F'; break;
    16a6:	e5 e6       	ldi	r30, 0x65	; 101
    16a8:	f2 e0       	ldi	r31, 0x02	; 2
    16aa:	8f e4       	ldi	r24, 0x4F	; 79
    16ac:	83 8f       	std	Z+27, r24	; 0x1b
    16ae:	86 e4       	ldi	r24, 0x46	; 70
    16b0:	84 8f       	std	Z+28, r24	; 0x1c
    16b2:	85 8f       	std	Z+29, r24	; 0x1d
	}
	switch(FunctionGenerator.output_type_A) {
    16b4:	03 30       	cpi	r16, 0x03	; 3
    16b6:	e9 f0       	breq	.+58     	; 0x16f2 <EEPROM_LoadProfile+0x2be>
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <EEPROM_LoadProfile+0x290>
    16ba:	01 30       	cpi	r16, 0x01	; 1
    16bc:	41 f0       	breq	.+16     	; 0x16ce <EEPROM_LoadProfile+0x29a>
    16be:	02 30       	cpi	r16, 0x02	; 2
    16c0:	79 f0       	breq	.+30     	; 0x16e0 <EEPROM_LoadProfile+0x2ac>
    16c2:	30 c0       	rjmp	.+96     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
    16c4:	04 30       	cpi	r16, 0x04	; 4
    16c6:	f1 f0       	breq	.+60     	; 0x1704 <EEPROM_LoadProfile+0x2d0>
    16c8:	05 30       	cpi	r16, 0x05	; 5
    16ca:	29 f1       	breq	.+74     	; 0x1716 <EEPROM_LoadProfile+0x2e2>
    16cc:	2b c0       	rjmp	.+86     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
		case SINE:UI.type_A[0] = 'S'; UI.type_A[1] = 'I'; UI.type_A[2] = 'N'; break;
    16ce:	e5 e6       	ldi	r30, 0x65	; 101
    16d0:	f2 e0       	ldi	r31, 0x02	; 2
    16d2:	83 e5       	ldi	r24, 0x53	; 83
    16d4:	80 8f       	std	Z+24, r24	; 0x18
    16d6:	89 e4       	ldi	r24, 0x49	; 73
    16d8:	81 8f       	std	Z+25, r24	; 0x19
    16da:	8e e4       	ldi	r24, 0x4E	; 78
    16dc:	82 8f       	std	Z+26, r24	; 0x1a
    16de:	22 c0       	rjmp	.+68     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
		case TRIANGLE: UI.type_A[0] = 'T'; UI.type_A[1] = 'R'; UI.type_A[2] = 'N'; break;
    16e0:	e5 e6       	ldi	r30, 0x65	; 101
    16e2:	f2 e0       	ldi	r31, 0x02	; 2
    16e4:	84 e5       	ldi	r24, 0x54	; 84
    16e6:	80 8f       	std	Z+24, r24	; 0x18
    16e8:	82 e5       	ldi	r24, 0x52	; 82
    16ea:	81 8f       	std	Z+25, r24	; 0x19
    16ec:	8e e4       	ldi	r24, 0x4E	; 78
    16ee:	82 8f       	std	Z+26, r24	; 0x1a
    16f0:	19 c0       	rjmp	.+50     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
		case SQUARE: UI.type_A[0] = 'S'; UI.type_A[1] = 'Q'; UI.type_A[2] = 'R'; break;
    16f2:	e5 e6       	ldi	r30, 0x65	; 101
    16f4:	f2 e0       	ldi	r31, 0x02	; 2
    16f6:	83 e5       	ldi	r24, 0x53	; 83
    16f8:	80 8f       	std	Z+24, r24	; 0x18
    16fa:	81 e5       	ldi	r24, 0x51	; 81
    16fc:	81 8f       	std	Z+25, r24	; 0x19
    16fe:	82 e5       	ldi	r24, 0x52	; 82
    1700:	82 8f       	std	Z+26, r24	; 0x1a
    1702:	10 c0       	rjmp	.+32     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
		case DC: UI.type_A[0] = ' '; UI.type_A[1] = 'D'; UI.type_A[2] = 'C'; break;
    1704:	e5 e6       	ldi	r30, 0x65	; 101
    1706:	f2 e0       	ldi	r31, 0x02	; 2
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	80 8f       	std	Z+24, r24	; 0x18
    170c:	84 e4       	ldi	r24, 0x44	; 68
    170e:	81 8f       	std	Z+25, r24	; 0x19
    1710:	83 e4       	ldi	r24, 0x43	; 67
    1712:	82 8f       	std	Z+26, r24	; 0x1a
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <EEPROM_LoadProfile+0x2f0>
		case OFF: UI.type_A[0] = 'O'; UI.type_A[1] = 'F'; UI.type_A[2] = 'F'; break;
    1716:	e5 e6       	ldi	r30, 0x65	; 101
    1718:	f2 e0       	ldi	r31, 0x02	; 2
    171a:	8f e4       	ldi	r24, 0x4F	; 79
    171c:	80 8f       	std	Z+24, r24	; 0x18
    171e:	86 e4       	ldi	r24, 0x46	; 70
    1720:	81 8f       	std	Z+25, r24	; 0x19
    1722:	82 8f       	std	Z+26, r24	; 0x1a
	}
	
	FG_SetFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A);
    1724:	20 2f       	mov	r18, r16
    1726:	b3 01       	movw	r22, r6
    1728:	a2 01       	movw	r20, r4
    172a:	85 e0       	ldi	r24, 0x05	; 5
    172c:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
	FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
    1730:	21 2f       	mov	r18, r17
    1732:	49 81       	ldd	r20, Y+1	; 0x01
    1734:	5a 81       	ldd	r21, Y+2	; 0x02
    1736:	6b 81       	ldd	r22, Y+3	; 0x03
    1738:	7c 81       	ldd	r23, Y+4	; 0x04
    173a:	86 e0       	ldi	r24, 0x06	; 6
    173c:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
	FG_SetAmplitude(FunctionGenerator.amplitude_A * 58.5, FG0);
    1740:	6d 2d       	mov	r22, r13
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a e6       	ldi	r20, 0x6A	; 106
    1752:	52 e4       	ldi	r21, 0x42	; 66
    1754:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1758:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	65 e0       	ldi	r22, 0x05	; 5
    1762:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
	FG_SetAmplitude(FunctionGenerator.amplitude_B * 58.5, FG1);
    1766:	6e 2d       	mov	r22, r14
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a e6       	ldi	r20, 0x6A	; 106
    1778:	52 e4       	ldi	r21, 0x42	; 66
    177a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    177e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	66 e0       	ldi	r22, 0x06	; 6
    1788:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
	
	if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
    178c:	f1 10       	cpse	r15, r1
    178e:	20 c0       	rjmp	.+64     	; 0x17d0 <EEPROM_LoadProfile+0x39c>
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	85 e0       	ldi	r24, 0x05	; 5
    1798:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	else FG_SetBiasDC(FG0, 0, POSITIVE);
	FG_SetBiasDC(FG0, (uint16_t)(abs(FunctionGenerator.bias_A) * MAX_12BIT / 330), FunctionGenerator.bias_A_sign);
    179c:	2f ef       	ldi	r18, 0xFF	; 255
    179e:	3f e0       	ldi	r19, 0x0F	; 15
    17a0:	a2 9e       	mul	r10, r18
    17a2:	c0 01       	movw	r24, r0
    17a4:	a3 9e       	mul	r10, r19
    17a6:	90 0d       	add	r25, r0
    17a8:	b2 9e       	mul	r11, r18
    17aa:	90 0d       	add	r25, r0
    17ac:	11 24       	eor	r1, r1
    17ae:	6a e4       	ldi	r22, 0x4A	; 74
    17b0:	71 e0       	ldi	r23, 0x01	; 1
    17b2:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__divmodhi4>
    17b6:	06 2f       	mov	r16, r22
    17b8:	17 2f       	mov	r17, r23
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	85 e0       	ldi	r24, 0x05	; 5
    17be:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	
	if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	85 e0       	ldi	r24, 0x05	; 5
    17ca:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    17ce:	1f c0       	rjmp	.+62     	; 0x180e <EEPROM_LoadProfile+0x3da>
	FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
	FG_SetAmplitude(FunctionGenerator.amplitude_A * 58.5, FG0);
	FG_SetAmplitude(FunctionGenerator.amplitude_B * 58.5, FG1);
	
	if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
	else FG_SetBiasDC(FG0, 0, POSITIVE);
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	FG_SetBiasDC(FG0, (uint16_t)(abs(FunctionGenerator.bias_A) * MAX_12BIT / 330), FunctionGenerator.bias_A_sign);
    17dc:	2f ef       	ldi	r18, 0xFF	; 255
    17de:	3f e0       	ldi	r19, 0x0F	; 15
    17e0:	a2 9e       	mul	r10, r18
    17e2:	c0 01       	movw	r24, r0
    17e4:	a3 9e       	mul	r10, r19
    17e6:	90 0d       	add	r25, r0
    17e8:	b2 9e       	mul	r11, r18
    17ea:	90 0d       	add	r25, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	6a e4       	ldi	r22, 0x4A	; 74
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__divmodhi4>
    17f6:	06 2f       	mov	r16, r22
    17f8:	17 2f       	mov	r17, r23
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	85 e0       	ldi	r24, 0x05	; 5
    17fe:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	
	if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
	else FG_SetBiasDC(FG0, 0, POSITIVE);
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	85 e0       	ldi	r24, 0x05	; 5
    180a:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	FG_SetBiasDC(FG0, (uint16_t)(abs(FunctionGenerator.bias_A) * MAX_12BIT / 330), FunctionGenerator.bias_A_sign);
    180e:	42 2d       	mov	r20, r2
    1810:	60 2f       	mov	r22, r16
    1812:	71 2f       	mov	r23, r17
    1814:	85 e0       	ldi	r24, 0x05	; 5
    1816:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	
	LCD_SetContrast(LCD.contrast);
    181a:	03 e9       	ldi	r16, 0x93	; 147
    181c:	12 e0       	ldi	r17, 0x02	; 2
    181e:	f8 01       	movw	r30, r16
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_SetContrast>
	LCD_SetBrightness(LCD.brightness);
    1826:	f8 01       	movw	r30, r16
    1828:	80 81       	ld	r24, Z
    182a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_SetBrightness>
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	9f 90       	pop	r9
    184c:	8f 90       	pop	r8
    184e:	7f 90       	pop	r7
    1850:	6f 90       	pop	r6
    1852:	5f 90       	pop	r5
    1854:	4f 90       	pop	r4
    1856:	3f 90       	pop	r3
    1858:	2f 90       	pop	r2
    185a:	08 95       	ret

0000185c <Init_FG>:

void Init_FG() {
	FG_SetFunction(FG0, 0, OFF);
    185c:	25 e0       	ldi	r18, 0x05	; 5
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	ba 01       	movw	r22, r20
    1864:	85 e0       	ldi	r24, 0x05	; 5
    1866:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
	FG_SetFunction(FG1, 0, OFF);
    186a:	25 e0       	ldi	r18, 0x05	; 5
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	ba 01       	movw	r22, r20
    1872:	86 e0       	ldi	r24, 0x06	; 6
    1874:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
	FG_SetAmplitude(0, FG0);
    1878:	65 e0       	ldi	r22, 0x05	; 5
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
	FG_SetAmplitude(0, FG1);
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
	FG_SetBiasDC(FG0, 0, NEGATIVE);
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	FG_SetBiasDC(FG0, 0, POSITIVE);
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	85 e0       	ldi	r24, 0x05	; 5
    18a0:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	FG_SetBiasDC(FG1, 0, NEGATIVE);
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
	FG_SetBiasDC(FG1, 0, POSITIVE);
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	86 e0       	ldi	r24, 0x06	; 6
    18b8:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    18bc:	08 95       	ret

000018be <main>:
	#ifdef PRE_PROG
		ENABLE_DEVICE();
		while(1);
	#endif
	
	Init_Device();
    18be:	0e 94 3c 02 	call	0x478	; 0x478 <Init_Device>
	Init_UI();
    18c2:	0e 94 9d 09 	call	0x133a	; 0x133a <Init_UI>
	Init_FG();
    18c6:	0e 94 2e 0c 	call	0x185c	; 0x185c <Init_FG>
	static bool prevAcPowerStatus = false;
	
	static bool lcdFunctionChanged = false;

	/* Initialization sequence */
	display.mainScreen = MAIN_SCREEN_A;
    18ca:	ef e5       	ldi	r30, 0x5F	; 95
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	11 82       	std	Z+1, r1	; 0x01
	display.stateChanged = false;
    18d0:	10 82       	st	Z, r1
	buttonPressCounter = 0;
    18d2:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
	
	Init_ClearWaveformValues(FunctionGenerator);
	Init_ClearUIValues();
    18d6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <Init_ClearUIValues>
	Init_ClearLCDParameterValues();
    18da:	0e 94 9f 04 	call	0x93e	; 0x93e <Init_ClearLCDParameterValues>
	Handle_LCD(display.mainScreen, PTR_NULL, mainDeviceState, FunctionGenerator);
    18de:	8d b7       	in	r24, 0x3d	; 61
    18e0:	9e b7       	in	r25, 0x3e	; 62
    18e2:	44 97       	sbiw	r24, 0x14	; 20
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	9e bf       	out	0x3e, r25	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	8d bf       	out	0x3d, r24	; 61
    18ee:	ad b7       	in	r26, 0x3d	; 61
    18f0:	be b7       	in	r27, 0x3e	; 62
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	84 e1       	ldi	r24, 0x14	; 20
    18f6:	ea e4       	ldi	r30, 0x4A	; 74
    18f8:	f2 e0       	ldi	r31, 0x02	; 2
    18fa:	01 90       	ld	r0, Z+
    18fc:	0d 92       	st	X+, r0
    18fe:	8a 95       	dec	r24
    1900:	e1 f7       	brne	.-8      	; 0x18fa <main+0x3c>
    1902:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <mainDeviceState.2757>
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Handle_LCD>
    190e:	ed b7       	in	r30, 0x3d	; 61
    1910:	fe b7       	in	r31, 0x3e	; 62
    1912:	74 96       	adiw	r30, 0x14	; 20
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	fe bf       	out	0x3e, r31	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	ed bf       	out	0x3d, r30	; 61
	
	while(1) {
		encoderState = Main_PollEncoder();
		switchState = Main_PollSwitch();
		
		if (display.stateChanged) {
    191e:	cf e5       	ldi	r28, 0x5F	; 95
    1920:	d2 e0       	ldi	r29, 0x02	; 2
				}
				
				else if (switchState) {
					mainDeviceState = PRIMARY_SCREENS;
					displayPointer = PTR_NULL;
					display.stateChanged = true;
    1922:	11 e0       	ldi	r17, 0x01	; 1
					else LCD.brightness++;
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
					lcdFunctionChanged = true;
					if (LCD.brightness <= 0) LCD.brightness = 0;
    1924:	0f 2e       	mov	r0, r31
    1926:	f3 e9       	ldi	r31, 0x93	; 147
    1928:	cf 2e       	mov	r12, r31
    192a:	f2 e0       	ldi	r31, 0x02	; 2
    192c:	df 2e       	mov	r13, r31
    192e:	f0 2d       	mov	r31, r0
			switch(displayPointer) {
				case PTR_BRIGHT:
				if (encoderState == CW) {
					display.stateChanged = true;
					lcdFunctionChanged = true;
					if (LCD.brightness >= 100) LCD.brightness = 100;
    1930:	0f 2e       	mov	r0, r31
    1932:	f4 e6       	ldi	r31, 0x64	; 100
    1934:	7f 2e       	mov	r7, r31
    1936:	f0 2d       	mov	r31, r0
				break;

				case PTR_FREQ_B:
				if (encoderState == CW) {
					display.stateChanged = true;
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    1938:	0f 2e       	mov	r0, r31
    193a:	f0 e4       	ldi	r31, 0x40	; 64
    193c:	2f 2e       	mov	r2, r31
    193e:	f2 e4       	ldi	r31, 0x42	; 66
    1940:	3f 2e       	mov	r3, r31
    1942:	ff e0       	ldi	r31, 0x0F	; 15
    1944:	4f 2e       	mov	r4, r31
    1946:	51 2c       	mov	r5, r1
    1948:	f0 2d       	mov	r31, r0
					switch(FunctionGenerator.output_type_B) {
						case OFF: FunctionGenerator.output_type_B = DC; break;
						case SINE: FunctionGenerator.output_type_B = OFF; break;
						case TRIANGLE: FunctionGenerator.output_type_B = SINE; break;
						case SQUARE: FunctionGenerator.output_type_B = TRIANGLE; break;
						case DC: default: FunctionGenerator.output_type_B = SQUARE; break;
    194a:	0f 2e       	mov	r0, r31
    194c:	f3 e0       	ldi	r31, 0x03	; 3
    194e:	6f 2e       	mov	r6, r31
    1950:	f0 2d       	mov	r31, r0
					FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
					switch(FunctionGenerator.output_type_B) {
						case OFF: FunctionGenerator.output_type_B = DC; break;
    1952:	68 94       	set
    1954:	aa 24       	eor	r10, r10
    1956:	a2 f8       	bld	r10, 2
						case SINE: FunctionGenerator.output_type_B = OFF; break;
    1958:	0f 2e       	mov	r0, r31
    195a:	f5 e0       	ldi	r31, 0x05	; 5
    195c:	bf 2e       	mov	r11, r31
    195e:	f0 2d       	mov	r31, r0
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					Power_UpdateAcStatus();
					Power_UpdateBatteryStatus();
					if ((PowerStatus.battery_voltage <  prevBatVoltage + 1) \
    1960:	0f 2e       	mov	r0, r31
    1962:	f2 e6       	ldi	r31, 0x62	; 98
    1964:	ef 2e       	mov	r14, r31
    1966:	f2 e0       	ldi	r31, 0x02	; 2
    1968:	ff 2e       	mov	r15, r31
    196a:	f0 2d       	mov	r31, r0
	Init_ClearUIValues();
	Init_ClearLCDParameterValues();
	Handle_LCD(display.mainScreen, PTR_NULL, mainDeviceState, FunctionGenerator);
	
	while(1) {
		encoderState = Main_PollEncoder();
    196c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Main_PollEncoder>
    1970:	08 2f       	mov	r16, r24
		switchState = Main_PollSwitch();
    1972:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <Main_PollSwitch>
    1976:	98 2e       	mov	r9, r24
		
		if (display.stateChanged) {
    1978:	88 81       	ld	r24, Y
    197a:	88 23       	and	r24, r24
    197c:	11 f1       	breq	.+68     	; 0x19c2 <main+0x104>
			display.stateChanged = false;
    197e:	18 82       	st	Y, r1
			Handle_LCD(display.mainScreen, displayPointer, mainDeviceState, FunctionGenerator);
    1980:	8d b7       	in	r24, 0x3d	; 61
    1982:	9e b7       	in	r25, 0x3e	; 62
    1984:	44 97       	sbiw	r24, 0x14	; 20
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	9e bf       	out	0x3e, r25	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	8d bf       	out	0x3d, r24	; 61
    1990:	ad b7       	in	r26, 0x3d	; 61
    1992:	be b7       	in	r27, 0x3e	; 62
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	84 e1       	ldi	r24, 0x14	; 20
    1998:	ea e4       	ldi	r30, 0x4A	; 74
    199a:	f2 e0       	ldi	r31, 0x02	; 2
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	8a 95       	dec	r24
    19a2:	e1 f7       	brne	.-8      	; 0x199c <main+0xde>
    19a4:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <mainDeviceState.2757>
    19a8:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <displayPointer.2760>
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Handle_LCD>
    19b2:	ed b7       	in	r30, 0x3d	; 61
    19b4:	fe b7       	in	r31, 0x3e	; 62
    19b6:	74 96       	adiw	r30, 0x14	; 20
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	fe bf       	out	0x3e, r31	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	ed bf       	out	0x3d, r30	; 61
		}
		
		if (lcdFunctionChanged) {
    19c2:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <lcdFunctionChanged.2764>
    19c6:	88 23       	and	r24, r24
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <main+0x118>
			lcdFunctionChanged = false;
    19ca:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <lcdFunctionChanged.2764>
			Handle_LCDParameter(displayPointer);
    19ce:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <displayPointer.2760>
    19d2:	0e 94 a5 04 	call	0x94a	; 0x94a <Handle_LCDParameter>
		}
		
		if (mainDeviceState == PRIMARY_SCREENS) {
    19d6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <mainDeviceState.2757>
    19da:	81 11       	cpse	r24, r1
    19dc:	93 c0       	rjmp	.+294    	; 0x1b04 <main+0x246>
			switch(display.mainScreen) {
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	b9 f1       	breq	.+110    	; 0x1a52 <main+0x194>
    19e4:	28 f4       	brcc	.+10     	; 0x19f0 <main+0x132>
    19e6:	88 23       	and	r24, r24
    19e8:	51 f0       	breq	.+20     	; 0x19fe <main+0x140>
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	e9 f0       	breq	.+58     	; 0x1a28 <main+0x16a>
    19ee:	be cf       	rjmp	.-132    	; 0x196c <main+0xae>
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <main+0x138>
    19f4:	5f c0       	rjmp	.+190    	; 0x1ab4 <main+0x1f6>
    19f6:	85 30       	cpi	r24, 0x05	; 5
    19f8:	09 f4       	brne	.+2      	; 0x19fc <main+0x13e>
    19fa:	70 c0       	rjmp	.+224    	; 0x1adc <main+0x21e>
    19fc:	b7 cf       	rjmp	.-146    	; 0x196c <main+0xae>
				case MAIN_SCREEN_A:
					if (encoderState == CW) {
    19fe:	01 30       	cpi	r16, 0x01	; 1
    1a00:	19 f4       	brne	.+6      	; 0x1a08 <main+0x14a>
						display.mainScreen = MAIN_SCREEN_B;
    1a02:	19 83       	std	Y+1, r17	; 0x01
						display.stateChanged = true;
    1a04:	18 83       	st	Y, r17
    1a06:	b2 cf       	rjmp	.-156    	; 0x196c <main+0xae>
					}
					
					else if (encoderState == CCW) {
    1a08:	02 30       	cpi	r16, 0x02	; 2
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <main+0x156>
						display.mainScreen = PARAMS_SCREEN;
    1a0c:	f2 e0       	ldi	r31, 0x02	; 2
    1a0e:	f9 83       	std	Y+1, r31	; 0x01
						display.stateChanged = true;
    1a10:	18 83       	st	Y, r17
    1a12:	ac cf       	rjmp	.-168    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1a14:	99 20       	and	r9, r9
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <main+0x15c>
    1a18:	a9 cf       	rjmp	.-174    	; 0x196c <main+0xae>
						mainDeviceState = MENU_POINTER_ON;
    1a1a:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_TYPE_A;
    1a1e:	22 e0       	ldi	r18, 0x02	; 2
    1a20:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1a24:	18 83       	st	Y, r17
    1a26:	a2 cf       	rjmp	.-188    	; 0x196c <main+0xae>
					}
					break;
					
				case MAIN_SCREEN_B:
					if (encoderState == CW) {
    1a28:	01 30       	cpi	r16, 0x01	; 1
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <main+0x176>
						display.mainScreen = PARAMS_SCREEN;
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    1a30:	18 83       	st	Y, r17
    1a32:	9c cf       	rjmp	.-200    	; 0x196c <main+0xae>
					}
					
					else if (encoderState == CCW) {
    1a34:	02 30       	cpi	r16, 0x02	; 2
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <main+0x180>
						display.mainScreen = MAIN_SCREEN_A;
    1a38:	19 82       	std	Y+1, r1	; 0x01
						display.stateChanged = true;
    1a3a:	18 83       	st	Y, r17
    1a3c:	97 cf       	rjmp	.-210    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1a3e:	99 20       	and	r9, r9
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <main+0x186>
    1a42:	94 cf       	rjmp	.-216    	; 0x196c <main+0xae>
						mainDeviceState = MENU_POINTER_ON;
    1a44:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_TYPE_B;
    1a48:	86 e0       	ldi	r24, 0x06	; 6
    1a4a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1a4e:	18 83       	st	Y, r17
    1a50:	8d cf       	rjmp	.-230    	; 0x196c <main+0xae>
					}
					break;
					
				case PARAMS_SCREEN:
					if (encoderState == CW) {
    1a52:	01 30       	cpi	r16, 0x01	; 1
    1a54:	19 f4       	brne	.+6      	; 0x1a5c <main+0x19e>
						display.mainScreen = MAIN_SCREEN_A;
    1a56:	19 82       	std	Y+1, r1	; 0x01
						display.stateChanged = true;
    1a58:	18 83       	st	Y, r17
    1a5a:	0d c0       	rjmp	.+26     	; 0x1a76 <main+0x1b8>
					}
					
					else if (encoderState == CCW) {
    1a5c:	02 30       	cpi	r16, 0x02	; 2
    1a5e:	19 f4       	brne	.+6      	; 0x1a66 <main+0x1a8>
						display.mainScreen = MAIN_SCREEN_B;
    1a60:	19 83       	std	Y+1, r17	; 0x01
						display.stateChanged = true;
    1a62:	18 83       	st	Y, r17
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <main+0x1b8>
					}
					else if (switchState) {
    1a66:	99 20       	and	r9, r9
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <main+0x1b8>
						mainDeviceState = MENU_POINTER_ON;
    1a6a:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_SETT;
    1a6e:	8a e0       	ldi	r24, 0x0A	; 10
    1a70:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1a74:	18 83       	st	Y, r17
					}
					Power_UpdateAcStatus();
    1a76:	0e 94 4c 04 	call	0x898	; 0x898 <Power_UpdateAcStatus>
					Power_UpdateBatteryStatus();
    1a7a:	0e 94 35 04 	call	0x86a	; 0x86a <Power_UpdateBatteryStatus>
					if ((PowerStatus.battery_voltage <  prevBatVoltage + 1) \
    1a7e:	f7 01       	movw	r30, r14
    1a80:	20 81       	ld	r18, Z
    1a82:	31 81       	ldd	r19, Z+1	; 0x01
					|| (PowerStatus.battery_voltage >  prevBatVoltage + 1)) {
    1a84:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <prevBatVoltage.2762>
    1a88:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <prevBatVoltage.2762+0x1>
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <main+0x1e0>
						display.stateChanged = true;
    1a94:	18 83       	st	Y, r17
						prevBatVoltage = PowerStatus.battery_voltage;
    1a96:	30 93 46 02 	sts	0x0246, r19	; 0x800246 <prevBatVoltage.2762+0x1>
    1a9a:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <prevBatVoltage.2762>
					}
					
					if (PowerStatus.ac_power_PowerStatus != prevAcPowerStatus) {
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <__data_end>
    1aa6:	89 17       	cp	r24, r25
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <main+0x1ee>
    1aaa:	60 cf       	rjmp	.-320    	; 0x196c <main+0xae>
						display.stateChanged = true;
    1aac:	18 83       	st	Y, r17
						prevAcPowerStatus = PowerStatus.ac_power_PowerStatus;
    1aae:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
    1ab2:	5c cf       	rjmp	.-328    	; 0x196c <main+0xae>
					}
					break;	
					
				case PROFILE_SCREEN:
					if (encoderState == CW) {
    1ab4:	01 30       	cpi	r16, 0x01	; 1
    1ab6:	19 f4       	brne	.+6      	; 0x1abe <main+0x200>
						display.mainScreen = LCD_SCREEN;
    1ab8:	b9 82       	std	Y+1, r11	; 0x01
						display.stateChanged = true;
    1aba:	18 83       	st	Y, r17
    1abc:	57 cf       	rjmp	.-338    	; 0x196c <main+0xae>
					}
					
					else if (encoderState == CCW) {
    1abe:	02 30       	cpi	r16, 0x02	; 2
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <main+0x20a>
						display.mainScreen = LCD_SCREEN;
    1ac2:	b9 82       	std	Y+1, r11	; 0x01
						display.stateChanged = true;
    1ac4:	18 83       	st	Y, r17
    1ac6:	52 cf       	rjmp	.-348    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1ac8:	99 20       	and	r9, r9
    1aca:	09 f4       	brne	.+2      	; 0x1ace <main+0x210>
    1acc:	4f cf       	rjmp	.-354    	; 0x196c <main+0xae>
						mainDeviceState = MENU_POINTER_ON;
    1ace:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_SAVE_PROF;
    1ad2:	8c e0       	ldi	r24, 0x0C	; 12
    1ad4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1ad8:	18 83       	st	Y, r17
    1ada:	48 cf       	rjmp	.-368    	; 0x196c <main+0xae>
					}
					
					break;		
							
				case LCD_SCREEN:
					if (encoderState == CW) {
    1adc:	01 30       	cpi	r16, 0x01	; 1
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <main+0x228>
						display.mainScreen = PROFILE_SCREEN;
    1ae0:	a9 82       	std	Y+1, r10	; 0x01
						display.stateChanged = true;
    1ae2:	18 83       	st	Y, r17
    1ae4:	43 cf       	rjmp	.-378    	; 0x196c <main+0xae>
					}
					
					else if (encoderState == CCW) {
    1ae6:	02 30       	cpi	r16, 0x02	; 2
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <main+0x232>
						display.mainScreen = PROFILE_SCREEN;
    1aea:	a9 82       	std	Y+1, r10	; 0x01
						display.stateChanged = true;
    1aec:	18 83       	st	Y, r17
    1aee:	3e cf       	rjmp	.-388    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1af0:	99 20       	and	r9, r9
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <main+0x238>
    1af4:	3b cf       	rjmp	.-394    	; 0x196c <main+0xae>
						mainDeviceState = MENU_POINTER_ON;
    1af6:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_BRIGHT;
    1afa:	8e e0       	ldi	r24, 0x0E	; 14
    1afc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b00:	18 83       	st	Y, r17
    1b02:	34 cf       	rjmp	.-408    	; 0x196c <main+0xae>
						
				default: break;
				
			}
		}
		else if (mainDeviceState == MENU_POINTER_ON) { 
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <main+0x24c>
    1b08:	91 c1       	rjmp	.+802    	; 0x1e2c <main+0x56e>
			switch(displayPointer) {
    1b0a:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <displayPointer.2760>
    1b0e:	8e 2f       	mov	r24, r30
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	31 97       	sbiw	r30, 0x01	; 1
    1b16:	ef 30       	cpi	r30, 0x0F	; 15
    1b18:	f1 05       	cpc	r31, r1
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <main+0x260>
    1b1c:	27 cf       	rjmp	.-434    	; 0x196c <main+0xae>
    1b1e:	ee 5b       	subi	r30, 0xBE	; 190
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
				case PTR_NULL: break;
				/* Channel A Block */
				case PTR_TYPE_A: 
					if (encoderState == CW) {
    1b26:	01 30       	cpi	r16, 0x01	; 1
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <main+0x274>
						displayPointer = PTR_AMP_A;
    1b2a:	b0 92 48 02 	sts	0x0248, r11	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b2e:	18 83       	st	Y, r17
    1b30:	1d cf       	rjmp	.-454    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1b32:	02 30       	cpi	r16, 0x02	; 2
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <main+0x280>
						displayPointer = PTR_BIAS_A;
    1b36:	a0 92 48 02 	sts	0x0248, r10	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b3a:	18 83       	st	Y, r17
    1b3c:	17 cf       	rjmp	.-466    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1b3e:	99 20       	and	r9, r9
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <main+0x286>
    1b42:	14 cf       	rjmp	.-472    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1b44:	f2 e0       	ldi	r31, 0x02	; 2
    1b46:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1b4a:	18 83       	st	Y, r17
    1b4c:	0f cf       	rjmp	.-482    	; 0x196c <main+0xae>
					}
					break;
				case PTR_AMP_A:
					if (encoderState == CW) {
    1b4e:	01 30       	cpi	r16, 0x01	; 1
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <main+0x29c>
						displayPointer = PTR_FREQ_A;
    1b52:	60 92 48 02 	sts	0x0248, r6	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b56:	18 83       	st	Y, r17
    1b58:	09 cf       	rjmp	.-494    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1b5a:	02 30       	cpi	r16, 0x02	; 2
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <main+0x2aa>
						displayPointer = PTR_TYPE_A;
    1b5e:	22 e0       	ldi	r18, 0x02	; 2
    1b60:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b64:	18 83       	st	Y, r17
    1b66:	02 cf       	rjmp	.-508    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1b68:	99 20       	and	r9, r9
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <main+0x2b0>
    1b6c:	ff ce       	rjmp	.-514    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1b74:	18 83       	st	Y, r17
    1b76:	fa ce       	rjmp	.-524    	; 0x196c <main+0xae>
					}
					break;
				case PTR_FREQ_A:
					if (encoderState == CW) {
    1b78:	01 30       	cpi	r16, 0x01	; 1
    1b7a:	21 f4       	brne	.+8      	; 0x1b84 <main+0x2c6>
						displayPointer = PTR_BIAS_A;
    1b7c:	a0 92 48 02 	sts	0x0248, r10	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b80:	18 83       	st	Y, r17
    1b82:	f4 ce       	rjmp	.-536    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1b84:	02 30       	cpi	r16, 0x02	; 2
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <main+0x2d2>
						displayPointer = PTR_AMP_A;
    1b88:	b0 92 48 02 	sts	0x0248, r11	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1b8c:	18 83       	st	Y, r17
    1b8e:	ee ce       	rjmp	.-548    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1b90:	99 20       	and	r9, r9
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <main+0x2d8>
    1b94:	eb ce       	rjmp	.-554    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1b96:	92 e0       	ldi	r25, 0x02	; 2
    1b98:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1b9c:	18 83       	st	Y, r17
    1b9e:	e6 ce       	rjmp	.-564    	; 0x196c <main+0xae>
					}
					break;
				case PTR_BIAS_A:
					if (encoderState == CW) {
    1ba0:	01 30       	cpi	r16, 0x01	; 1
    1ba2:	29 f4       	brne	.+10     	; 0x1bae <main+0x2f0>
						displayPointer = PTR_TYPE_A;
    1ba4:	e2 e0       	ldi	r30, 0x02	; 2
    1ba6:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1baa:	18 83       	st	Y, r17
    1bac:	df ce       	rjmp	.-578    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1bae:	02 30       	cpi	r16, 0x02	; 2
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <main+0x2fc>
						displayPointer = PTR_FREQ_A;
    1bb2:	60 92 48 02 	sts	0x0248, r6	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1bb6:	18 83       	st	Y, r17
    1bb8:	d9 ce       	rjmp	.-590    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1bba:	99 20       	and	r9, r9
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <main+0x302>
    1bbe:	d6 ce       	rjmp	.-596    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1bc0:	f2 e0       	ldi	r31, 0x02	; 2
    1bc2:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1bc6:	18 83       	st	Y, r17
    1bc8:	d1 ce       	rjmp	.-606    	; 0x196c <main+0xae>
					}
					break;
				/* Channel B Block */
				case PTR_TYPE_B:
					if (encoderState == CW) {
    1bca:	01 30       	cpi	r16, 0x01	; 1
    1bcc:	29 f4       	brne	.+10     	; 0x1bd8 <main+0x31a>
						displayPointer = PTR_AMP_B;
    1bce:	89 e0       	ldi	r24, 0x09	; 9
    1bd0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1bd4:	18 83       	st	Y, r17
    1bd6:	ca ce       	rjmp	.-620    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1bd8:	02 30       	cpi	r16, 0x02	; 2
    1bda:	29 f4       	brne	.+10     	; 0x1be6 <main+0x328>
						displayPointer = PTR_BIAS_B;
    1bdc:	88 e0       	ldi	r24, 0x08	; 8
    1bde:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1be2:	18 83       	st	Y, r17
    1be4:	c3 ce       	rjmp	.-634    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1be6:	99 20       	and	r9, r9
    1be8:	09 f4       	brne	.+2      	; 0x1bec <main+0x32e>
    1bea:	c0 ce       	rjmp	.-640    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1bec:	22 e0       	ldi	r18, 0x02	; 2
    1bee:	20 93 49 02 	sts	0x0249, r18	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1bf2:	18 83       	st	Y, r17
    1bf4:	bb ce       	rjmp	.-650    	; 0x196c <main+0xae>
					}
					break;
				case PTR_AMP_B:
					if (encoderState == CW) {
    1bf6:	01 30       	cpi	r16, 0x01	; 1
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <main+0x346>
						displayPointer = PTR_FREQ_B;
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c00:	18 83       	st	Y, r17
    1c02:	b4 ce       	rjmp	.-664    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1c04:	02 30       	cpi	r16, 0x02	; 2
    1c06:	29 f4       	brne	.+10     	; 0x1c12 <main+0x354>
						displayPointer = PTR_TYPE_B;
    1c08:	86 e0       	ldi	r24, 0x06	; 6
    1c0a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c0e:	18 83       	st	Y, r17
    1c10:	ad ce       	rjmp	.-678    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1c12:	99 20       	and	r9, r9
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <main+0x35a>
    1c16:	aa ce       	rjmp	.-684    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1c1e:	18 83       	st	Y, r17
    1c20:	a5 ce       	rjmp	.-694    	; 0x196c <main+0xae>
					}
					break;
				case PTR_FREQ_B:
					if (encoderState == CW) {
    1c22:	01 30       	cpi	r16, 0x01	; 1
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <main+0x372>
						displayPointer = PTR_BIAS_B;
    1c26:	88 e0       	ldi	r24, 0x08	; 8
    1c28:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c2c:	18 83       	st	Y, r17
    1c2e:	9e ce       	rjmp	.-708    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1c30:	02 30       	cpi	r16, 0x02	; 2
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <main+0x380>
						displayPointer = PTR_AMP_B;
    1c34:	89 e0       	ldi	r24, 0x09	; 9
    1c36:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c3a:	18 83       	st	Y, r17
    1c3c:	97 ce       	rjmp	.-722    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1c3e:	99 20       	and	r9, r9
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <main+0x386>
    1c42:	94 ce       	rjmp	.-728    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1c4a:	18 83       	st	Y, r17
    1c4c:	8f ce       	rjmp	.-738    	; 0x196c <main+0xae>
					}
					break;
				case PTR_BIAS_B:
					if (encoderState == CW) {
    1c4e:	01 30       	cpi	r16, 0x01	; 1
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <main+0x39e>
						displayPointer = PTR_TYPE_B;
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c58:	18 83       	st	Y, r17
    1c5a:	88 ce       	rjmp	.-752    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1c5c:	02 30       	cpi	r16, 0x02	; 2
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <main+0x3ac>
						displayPointer = PTR_FREQ_B;
    1c60:	87 e0       	ldi	r24, 0x07	; 7
    1c62:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c66:	18 83       	st	Y, r17
    1c68:	81 ce       	rjmp	.-766    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1c6a:	99 20       	and	r9, r9
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <main+0x3b2>
    1c6e:	7e ce       	rjmp	.-772    	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_POINTER_ON;
    1c70:	e2 e0       	ldi	r30, 0x02	; 2
    1c72:	e0 93 49 02 	sts	0x0249, r30	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1c76:	18 83       	st	Y, r17
    1c78:	79 ce       	rjmp	.-782    	; 0x196c <main+0xae>
					}
					break;
				case PTR_SETT:
					if (encoderState == CW) {
    1c7a:	01 30       	cpi	r16, 0x01	; 1
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <main+0x3ca>
						displayPointer = PTR_SHUTDOWN;
    1c7e:	8b e0       	ldi	r24, 0x0B	; 11
    1c80:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c84:	18 83       	st	Y, r17
    1c86:	72 ce       	rjmp	.-796    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1c88:	02 30       	cpi	r16, 0x02	; 2
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <main+0x3d8>
						displayPointer = PTR_SHUTDOWN;
    1c8c:	8b e0       	ldi	r24, 0x0B	; 11
    1c8e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1c92:	18 83       	st	Y, r17
    1c94:	6b ce       	rjmp	.-810    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1c96:	99 20       	and	r9, r9
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <main+0x3de>
    1c9a:	68 ce       	rjmp	.-816    	; 0x196c <main+0xae>
						mainDeviceState = PRIMARY_SCREENS;
    1c9c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						display.mainScreen = PROFILE_SCREEN;
    1ca0:	a9 82       	std	Y+1, r10	; 0x01
						display.stateChanged = true;
    1ca2:	18 83       	st	Y, r17
    1ca4:	63 ce       	rjmp	.-826    	; 0x196c <main+0xae>
					}
					break;
					
				case PTR_SAVE_PROF:
					if (encoderState == CW) {
    1ca6:	01 30       	cpi	r16, 0x01	; 1
    1ca8:	29 f4       	brne	.+10     	; 0x1cb4 <main+0x3f6>
						displayPointer = PTR_LOAD_PROF;
    1caa:	8d e0       	ldi	r24, 0x0D	; 13
    1cac:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1cb0:	18 83       	st	Y, r17
    1cb2:	5c ce       	rjmp	.-840    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1cb4:	02 30       	cpi	r16, 0x02	; 2
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <main+0x402>
						displayPointer = PTR_BACK;
    1cb8:	10 93 48 02 	sts	0x0248, r17	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1cbc:	18 83       	st	Y, r17
    1cbe:	56 ce       	rjmp	.-852    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1cc0:	99 20       	and	r9, r9
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <main+0x408>
    1cc4:	53 ce       	rjmp	.-858    	; 0x196c <main+0xae>
						mainDeviceState = PRIMARY_SCREENS;
    1cc6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    1cca:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1cce:	18 83       	st	Y, r17
						display.mainScreen = PARAMS_SCREEN;
    1cd0:	f2 e0       	ldi	r31, 0x02	; 2
    1cd2:	f9 83       	std	Y+1, r31	; 0x01
						EEPROM_SaveProfile(FunctionGenerator);
    1cd4:	8d b7       	in	r24, 0x3d	; 61
    1cd6:	9e b7       	in	r25, 0x3e	; 62
    1cd8:	44 97       	sbiw	r24, 0x14	; 20
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	9e bf       	out	0x3e, r25	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	8d bf       	out	0x3d, r24	; 61
    1ce4:	ad b7       	in	r26, 0x3d	; 61
    1ce6:	be b7       	in	r27, 0x3e	; 62
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	84 e1       	ldi	r24, 0x14	; 20
    1cec:	ea e4       	ldi	r30, 0x4A	; 74
    1cee:	f2 e0       	ldi	r31, 0x02	; 2
    1cf0:	01 90       	ld	r0, Z+
    1cf2:	0d 92       	st	X+, r0
    1cf4:	8a 95       	dec	r24
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <main+0x432>
    1cf8:	0e 94 ab 09 	call	0x1356	; 0x1356 <EEPROM_SaveProfile>
						Buzzer_Beep();
    1cfc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Buzzer_Beep>
    1d00:	ed b7       	in	r30, 0x3d	; 61
    1d02:	fe b7       	in	r31, 0x3e	; 62
    1d04:	74 96       	adiw	r30, 0x14	; 20
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	fe bf       	out	0x3e, r31	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	ed bf       	out	0x3d, r30	; 61
    1d10:	2d ce       	rjmp	.-934    	; 0x196c <main+0xae>
					}
					break;
					
				case PTR_LOAD_PROF:
					if (encoderState == CW) {
    1d12:	01 30       	cpi	r16, 0x01	; 1
    1d14:	21 f4       	brne	.+8      	; 0x1d1e <main+0x460>
						displayPointer = PTR_BACK;
    1d16:	10 93 48 02 	sts	0x0248, r17	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1d1a:	18 83       	st	Y, r17
    1d1c:	27 ce       	rjmp	.-946    	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1d1e:	02 30       	cpi	r16, 0x02	; 2
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <main+0x46e>
						displayPointer = PTR_SAVE_PROF;
    1d22:	8c e0       	ldi	r24, 0x0C	; 12
    1d24:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1d28:	18 83       	st	Y, r17
    1d2a:	20 ce       	rjmp	.-960    	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1d2c:	99 20       	and	r9, r9
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <main+0x474>
    1d30:	1d ce       	rjmp	.-966    	; 0x196c <main+0xae>
						mainDeviceState = PRIMARY_SCREENS;
    1d32:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    1d36:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1d3a:	18 83       	st	Y, r17
						display.mainScreen = PROFILE_SCREEN;
    1d3c:	a9 82       	std	Y+1, r10	; 0x01
						EEPROM_LoadProfile(FunctionGenerator);
    1d3e:	8d b7       	in	r24, 0x3d	; 61
    1d40:	9e b7       	in	r25, 0x3e	; 62
    1d42:	44 97       	sbiw	r24, 0x14	; 20
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	9e bf       	out	0x3e, r25	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	8d bf       	out	0x3d, r24	; 61
    1d4e:	ad b7       	in	r26, 0x3d	; 61
    1d50:	be b7       	in	r27, 0x3e	; 62
    1d52:	11 96       	adiw	r26, 0x01	; 1
    1d54:	84 e1       	ldi	r24, 0x14	; 20
    1d56:	ea e4       	ldi	r30, 0x4A	; 74
    1d58:	f2 e0       	ldi	r31, 0x02	; 2
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	0d 92       	st	X+, r0
    1d5e:	8a 95       	dec	r24
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <main+0x49c>
    1d62:	0e 94 1a 0a 	call	0x1434	; 0x1434 <EEPROM_LoadProfile>
						Buzzer_Beep();
    1d66:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Buzzer_Beep>
    1d6a:	ed b7       	in	r30, 0x3d	; 61
    1d6c:	fe b7       	in	r31, 0x3e	; 62
    1d6e:	74 96       	adiw	r30, 0x14	; 20
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	fe bf       	out	0x3e, r31	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	ed bf       	out	0x3d, r30	; 61
    1d7a:	f8 cd       	rjmp	.-1040   	; 0x196c <main+0xae>
					}
					break;	
					
				case PTR_BACK:
					if (encoderState == CW) {
    1d7c:	01 30       	cpi	r16, 0x01	; 1
    1d7e:	29 f4       	brne	.+10     	; 0x1d8a <main+0x4cc>
						displayPointer = PTR_SAVE_PROF;
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1d86:	18 83       	st	Y, r17
    1d88:	f1 cd       	rjmp	.-1054   	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1d8a:	02 30       	cpi	r16, 0x02	; 2
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <main+0x4da>
						displayPointer = PTR_LOAD_PROF;
    1d8e:	8d e0       	ldi	r24, 0x0D	; 13
    1d90:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1d94:	18 83       	st	Y, r17
    1d96:	ea cd       	rjmp	.-1068   	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1d98:	99 20       	and	r9, r9
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <main+0x4e0>
    1d9c:	e7 cd       	rjmp	.-1074   	; 0x196c <main+0xae>
						mainDeviceState = PRIMARY_SCREENS;
    1d9e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    1da2:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1da6:	18 83       	st	Y, r17
						display.mainScreen = PARAMS_SCREEN;
    1da8:	f2 e0       	ldi	r31, 0x02	; 2
    1daa:	f9 83       	std	Y+1, r31	; 0x01
    1dac:	df cd       	rjmp	.-1090   	; 0x196c <main+0xae>
						
					}
					break;
				
				case PTR_BRIGHT:
					if (encoderState == CW) {
    1dae:	01 30       	cpi	r16, 0x01	; 1
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <main+0x4fe>
						displayPointer = PTR_CONTR;
    1db2:	8f e0       	ldi	r24, 0x0F	; 15
    1db4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1db8:	18 83       	st	Y, r17
    1dba:	d8 cd       	rjmp	.-1104   	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1dbc:	02 30       	cpi	r16, 0x02	; 2
    1dbe:	29 f4       	brne	.+10     	; 0x1dca <main+0x50c>
						displayPointer = PTR_CONTR;
    1dc0:	8f e0       	ldi	r24, 0x0F	; 15
    1dc2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1dc6:	18 83       	st	Y, r17
    1dc8:	d1 cd       	rjmp	.-1118   	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1dca:	99 20       	and	r9, r9
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <main+0x512>
    1dce:	ce cd       	rjmp	.-1124   	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_LCD_POINTER_ON;
    1dd0:	60 92 49 02 	sts	0x0249, r6	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1dd4:	18 83       	st	Y, r17
    1dd6:	ca cd       	rjmp	.-1132   	; 0x196c <main+0xae>
					}
					break;
				
				case PTR_CONTR:
					if (encoderState == CW) {
    1dd8:	01 30       	cpi	r16, 0x01	; 1
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <main+0x528>
						displayPointer = PTR_BRIGHT;
    1ddc:	8e e0       	ldi	r24, 0x0E	; 14
    1dde:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1de2:	18 83       	st	Y, r17
    1de4:	c3 cd       	rjmp	.-1146   	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1de6:	02 30       	cpi	r16, 0x02	; 2
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <main+0x536>
						displayPointer = PTR_BRIGHT;
    1dea:	8e e0       	ldi	r24, 0x0E	; 14
    1dec:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1df0:	18 83       	st	Y, r17
    1df2:	bc cd       	rjmp	.-1160   	; 0x196c <main+0xae>
					}
					else if (switchState) {
    1df4:	99 20       	and	r9, r9
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <main+0x53c>
    1df8:	b9 cd       	rjmp	.-1166   	; 0x196c <main+0xae>
						mainDeviceState = PARAMETER_LCD_POINTER_ON;
    1dfa:	60 92 49 02 	sts	0x0249, r6	; 0x800249 <mainDeviceState.2757>
						display.stateChanged = true;
    1dfe:	18 83       	st	Y, r17
    1e00:	b5 cd       	rjmp	.-1174   	; 0x196c <main+0xae>
					}
					break;
												
				case PTR_SHUTDOWN:
					if (encoderState == CW) {
    1e02:	01 30       	cpi	r16, 0x01	; 1
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <main+0x552>
						displayPointer = PTR_SETT;
    1e06:	8a e0       	ldi	r24, 0x0A	; 10
    1e08:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1e0c:	18 83       	st	Y, r17
    1e0e:	ae cd       	rjmp	.-1188   	; 0x196c <main+0xae>
					}
					else if (encoderState == CCW) {
    1e10:	02 30       	cpi	r16, 0x02	; 2
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <main+0x560>
						displayPointer = PTR_SETT;
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
    1e16:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <displayPointer.2760>
						display.stateChanged = true;
    1e1a:	18 83       	st	Y, r17
    1e1c:	a7 cd       	rjmp	.-1202   	; 0x196c <main+0xae>
					}
					else if (switchState) Main_ShutdownDevice(false);
    1e1e:	99 20       	and	r9, r9
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <main+0x566>
    1e22:	a4 cd       	rjmp	.-1208   	; 0x196c <main+0xae>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Main_ShutdownDevice>
    1e2a:	a0 cd       	rjmp	.-1216   	; 0x196c <main+0xae>
					break;
					
				default: break;
			}
		}
		else if (mainDeviceState == PARAMETER_POINTER_ON) {
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <main+0x574>
    1e30:	a3 c5       	rjmp	.+2886   	; 0x2978 <main+0x10ba>
			switch(displayPointer) {
    1e32:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <displayPointer.2760>
    1e36:	8e 2f       	mov	r24, r30
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	31 97       	sbiw	r30, 0x01	; 1
    1e3e:	e9 30       	cpi	r30, 0x09	; 9
    1e40:	f1 05       	cpc	r31, r1
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <main+0x588>
    1e44:	93 cd       	rjmp	.-1242   	; 0x196c <main+0xae>
    1e46:	ef 5a       	subi	r30, 0xAF	; 175
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
				
				case PTR_NULL: break;
				
				case PTR_TYPE_A:
				if (encoderState == CW) {
    1e4e:	01 30       	cpi	r16, 0x01	; 1
    1e50:	39 f5       	brne	.+78     	; 0x1ea0 <main+0x5e2>
					display.stateChanged = true;
    1e52:	18 83       	st	Y, r17
					switch(FunctionGenerator.output_type_A) {
    1e54:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <FunctionGenerator.2758+0xc>
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	79 f0       	breq	.+30     	; 0x1e7a <main+0x5bc>
    1e5c:	18 f4       	brcc	.+6      	; 0x1e64 <main+0x5a6>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	41 f0       	breq	.+16     	; 0x1e72 <main+0x5b4>
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <main+0x5c8>
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <main+0x5c2>
    1e68:	85 30       	cpi	r24, 0x05	; 5
    1e6a:	69 f4       	brne	.+26     	; 0x1e86 <main+0x5c8>
						case OFF: FunctionGenerator.output_type_A = SINE; break;
    1e6c:	10 93 56 02 	sts	0x0256, r17	; 0x800256 <FunctionGenerator.2758+0xc>
    1e70:	0c c0       	rjmp	.+24     	; 0x1e8a <main+0x5cc>
						case SINE: FunctionGenerator.output_type_A = TRIANGLE; break;
    1e72:	22 e0       	ldi	r18, 0x02	; 2
    1e74:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <FunctionGenerator.2758+0xc>
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <main+0x5cc>
						case TRIANGLE: FunctionGenerator.output_type_A = SQUARE; break;
    1e7a:	60 92 56 02 	sts	0x0256, r6	; 0x800256 <FunctionGenerator.2758+0xc>
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <main+0x5cc>
						case SQUARE: FunctionGenerator.output_type_A = DC; break;
    1e80:	a0 92 56 02 	sts	0x0256, r10	; 0x800256 <FunctionGenerator.2758+0xc>
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <main+0x5cc>
						case DC: default: FunctionGenerator.output_type_A = OFF; break;
    1e86:	b0 92 56 02 	sts	0x0256, r11	; 0x800256 <FunctionGenerator.2758+0xc>
					}
					FG_SetFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A);
    1e8a:	ea e4       	ldi	r30, 0x4A	; 74
    1e8c:	f2 e0       	ldi	r31, 0x02	; 2
    1e8e:	40 81       	ld	r20, Z
    1e90:	51 81       	ldd	r21, Z+1	; 0x01
    1e92:	62 81       	ldd	r22, Z+2	; 0x02
    1e94:	73 81       	ldd	r23, Z+3	; 0x03
    1e96:	24 85       	ldd	r18, Z+12	; 0x0c
    1e98:	8b 2d       	mov	r24, r11
    1e9a:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    1e9e:	66 cd       	rjmp	.-1332   	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    1ea0:	02 30       	cpi	r16, 0x02	; 2
    1ea2:	39 f5       	brne	.+78     	; 0x1ef2 <main+0x634>
					display.stateChanged = true;
    1ea4:	18 83       	st	Y, r17
					switch(FunctionGenerator.output_type_A) {
    1ea6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <FunctionGenerator.2758+0xc>
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	71 f0       	breq	.+28     	; 0x1eca <main+0x60c>
    1eae:	18 f4       	brcc	.+6      	; 0x1eb6 <main+0x5f8>
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	41 f0       	breq	.+16     	; 0x1ec4 <main+0x606>
    1eb4:	11 c0       	rjmp	.+34     	; 0x1ed8 <main+0x61a>
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	59 f0       	breq	.+22     	; 0x1ed0 <main+0x612>
    1eba:	85 30       	cpi	r24, 0x05	; 5
    1ebc:	69 f4       	brne	.+26     	; 0x1ed8 <main+0x61a>
						case OFF: FunctionGenerator.output_type_A = DC; break;
    1ebe:	a0 92 56 02 	sts	0x0256, r10	; 0x800256 <FunctionGenerator.2758+0xc>
    1ec2:	0c c0       	rjmp	.+24     	; 0x1edc <main+0x61e>
						case SINE: FunctionGenerator.output_type_A = OFF; break;
    1ec4:	b0 92 56 02 	sts	0x0256, r11	; 0x800256 <FunctionGenerator.2758+0xc>
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <main+0x61e>
						case TRIANGLE: FunctionGenerator.output_type_A = SINE; break;
    1eca:	10 93 56 02 	sts	0x0256, r17	; 0x800256 <FunctionGenerator.2758+0xc>
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <main+0x61e>
						case SQUARE: FunctionGenerator.output_type_A = TRIANGLE; break;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <FunctionGenerator.2758+0xc>
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <main+0x61e>
						case DC: default: FunctionGenerator.output_type_A = SQUARE; break;
    1ed8:	60 92 56 02 	sts	0x0256, r6	; 0x800256 <FunctionGenerator.2758+0xc>
					}
					FG_SetFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A);
    1edc:	ea e4       	ldi	r30, 0x4A	; 74
    1ede:	f2 e0       	ldi	r31, 0x02	; 2
    1ee0:	40 81       	ld	r20, Z
    1ee2:	51 81       	ldd	r21, Z+1	; 0x01
    1ee4:	62 81       	ldd	r22, Z+2	; 0x02
    1ee6:	73 81       	ldd	r23, Z+3	; 0x03
    1ee8:	24 85       	ldd	r18, Z+12	; 0x0c
    1eea:	8b 2d       	mov	r24, r11
    1eec:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    1ef0:	3d cd       	rjmp	.-1414   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    1ef2:	99 20       	and	r9, r9
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <main+0x63a>
    1ef6:	3a cd       	rjmp	.-1420   	; 0x196c <main+0xae>
					mainDeviceState = PRIMARY_SCREENS;
    1ef8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
					display.stateChanged = true;
    1efc:	18 83       	st	Y, r17
					displayPointer = PTR_NULL;
    1efe:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
    1f02:	34 cd       	rjmp	.-1432   	; 0x196c <main+0xae>
				}
				
				break;
				
				case PTR_AMP_A:
				if (encoderState == CW) {
    1f04:	01 30       	cpi	r16, 0x01	; 1
    1f06:	b9 f5       	brne	.+110    	; 0x1f76 <main+0x6b8>
					display.stateChanged = true;
    1f08:	18 83       	st	Y, r17
					if (FunctionGenerator.amplitude_A >= 70) FunctionGenerator.amplitude_A = 70;
    1f0a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <FunctionGenerator.2758+0x8>
    1f0e:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <FunctionGenerator.2758+0x9>
    1f12:	86 34       	cpi	r24, 0x46	; 70
    1f14:	91 05       	cpc	r25, r1
    1f16:	38 f0       	brcs	.+14     	; 0x1f26 <main+0x668>
    1f18:	e6 e4       	ldi	r30, 0x46	; 70
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <FunctionGenerator.2758+0x9>
    1f20:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <FunctionGenerator.2758+0x8>
    1f24:	12 c0       	rjmp	.+36     	; 0x1f4a <main+0x68c>
					else {
						switch(buttonPressCounter) {
    1f26:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    1f2a:	22 23       	and	r18, r18
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <main+0x676>
    1f2e:	21 30       	cpi	r18, 0x01	; 1
    1f30:	39 f0       	breq	.+14     	; 0x1f40 <main+0x682>
    1f32:	0b c0       	rjmp	.+22     	; 0x1f4a <main+0x68c>
							case 0: FunctionGenerator.amplitude_A++; break;
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <FunctionGenerator.2758+0x9>
    1f3a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <FunctionGenerator.2758+0x8>
    1f3e:	05 c0       	rjmp	.+10     	; 0x1f4a <main+0x68c>
							case 1: FunctionGenerator.amplitude_A += 10; break;
    1f40:	0a 96       	adiw	r24, 0x0a	; 10
    1f42:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <FunctionGenerator.2758+0x9>
    1f46:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <FunctionGenerator.2758+0x8>
						}
					}
					FG_SetAmplitude(FunctionGenerator.amplitude_A * 58.5, FG0);
    1f4a:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <FunctionGenerator.2758+0x8>
    1f4e:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <FunctionGenerator.2758+0x9>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a e6       	ldi	r20, 0x6A	; 106
    1f60:	52 e4       	ldi	r21, 0x42	; 66
    1f62:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1f66:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	6b 2d       	mov	r22, r11
    1f70:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
    1f74:	fb cc       	rjmp	.-1546   	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    1f76:	02 30       	cpi	r16, 0x02	; 2
    1f78:	79 f5       	brne	.+94     	; 0x1fd8 <main+0x71a>
					display.stateChanged = true;
    1f7a:	18 83       	st	Y, r17
					if (FunctionGenerator.amplitude_A <= 0) FunctionGenerator.amplitude_A = 0;
    1f7c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <FunctionGenerator.2758+0x8>
    1f80:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <FunctionGenerator.2758+0x9>
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	91 f0       	breq	.+36     	; 0x1fac <main+0x6ee>
					else {
						switch(buttonPressCounter) {
    1f88:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    1f8c:	22 23       	and	r18, r18
    1f8e:	19 f0       	breq	.+6      	; 0x1f96 <main+0x6d8>
    1f90:	21 30       	cpi	r18, 0x01	; 1
    1f92:	39 f0       	breq	.+14     	; 0x1fa2 <main+0x6e4>
    1f94:	0b c0       	rjmp	.+22     	; 0x1fac <main+0x6ee>
							case 0: FunctionGenerator.amplitude_A--; break;
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <FunctionGenerator.2758+0x9>
    1f9c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <FunctionGenerator.2758+0x8>
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <main+0x6ee>
							case 1: FunctionGenerator.amplitude_A -= 10; break;
    1fa2:	0a 97       	sbiw	r24, 0x0a	; 10
    1fa4:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <FunctionGenerator.2758+0x9>
    1fa8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <FunctionGenerator.2758+0x8>
						}
					}
					FG_SetAmplitude(FunctionGenerator.amplitude_A * 58.5, FG0);
    1fac:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <FunctionGenerator.2758+0x8>
    1fb0:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <FunctionGenerator.2758+0x9>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e6       	ldi	r20, 0x6A	; 106
    1fc2:	52 e4       	ldi	r21, 0x42	; 66
    1fc4:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1fc8:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	6b 2d       	mov	r22, r11
    1fd2:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
    1fd6:	ca cc       	rjmp	.-1644   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    1fd8:	99 20       	and	r9, r9
    1fda:	09 f4       	brne	.+2      	; 0x1fde <main+0x720>
    1fdc:	c7 cc       	rjmp	.-1650   	; 0x196c <main+0xae>
					if (buttonPressCounter < 1) buttonPressCounter++;
    1fde:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <main+0x72e>
    1fe6:	10 93 5e 02 	sts	0x025E, r17	; 0x80025e <buttonPressCounter.2761>
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <main+0x73a>
					else {
						buttonPressCounter = 0;
    1fec:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    1ff0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    1ff4:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					}
					display.stateChanged = true;
    1ff8:	18 83       	st	Y, r17
    1ffa:	b8 cc       	rjmp	.-1680   	; 0x196c <main+0xae>
				}
				break;

				case PTR_FREQ_A:
				if (encoderState == CW) {
    1ffc:	01 30       	cpi	r16, 0x01	; 1
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <main+0x744>
    2000:	80 c0       	rjmp	.+256    	; 0x2102 <main+0x844>
					display.stateChanged = true;
    2002:	18 83       	st	Y, r17
					if (FunctionGenerator.frequency_A >= 1000000) FunctionGenerator.frequency_A = 1000000;
    2004:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FunctionGenerator.2758>
    2008:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <FunctionGenerator.2758+0x1>
    200c:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <FunctionGenerator.2758+0x2>
    2010:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <FunctionGenerator.2758+0x3>
    2014:	80 34       	cpi	r24, 0x40	; 64
    2016:	f2 e4       	ldi	r31, 0x42	; 66
    2018:	9f 07       	cpc	r25, r31
    201a:	ff e0       	ldi	r31, 0x0F	; 15
    201c:	af 07       	cpc	r26, r31
    201e:	b1 05       	cpc	r27, r1
    2020:	48 f0       	brcs	.+18     	; 0x2034 <main+0x776>
    2022:	20 92 4a 02 	sts	0x024A, r2	; 0x80024a <FunctionGenerator.2758>
    2026:	30 92 4b 02 	sts	0x024B, r3	; 0x80024b <FunctionGenerator.2758+0x1>
    202a:	40 92 4c 02 	sts	0x024C, r4	; 0x80024c <FunctionGenerator.2758+0x2>
    202e:	50 92 4d 02 	sts	0x024D, r5	; 0x80024d <FunctionGenerator.2758+0x3>
    2032:	5c c0       	rjmp	.+184    	; 0x20ec <main+0x82e>
					else {
						switch(buttonPressCounter) {
    2034:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    2038:	22 30       	cpi	r18, 0x02	; 2
    203a:	29 f1       	breq	.+74     	; 0x2086 <main+0x7c8>
    203c:	28 f4       	brcc	.+10     	; 0x2048 <main+0x78a>
    203e:	22 23       	and	r18, r18
    2040:	51 f0       	breq	.+20     	; 0x2056 <main+0x798>
    2042:	21 30       	cpi	r18, 0x01	; 1
    2044:	a1 f0       	breq	.+40     	; 0x206e <main+0x7b0>
    2046:	52 c0       	rjmp	.+164    	; 0x20ec <main+0x82e>
    2048:	24 30       	cpi	r18, 0x04	; 4
    204a:	b9 f1       	breq	.+110    	; 0x20ba <main+0x7fc>
    204c:	48 f1       	brcs	.+82     	; 0x20a0 <main+0x7e2>
    204e:	25 30       	cpi	r18, 0x05	; 5
    2050:	09 f4       	brne	.+2      	; 0x2054 <main+0x796>
    2052:	40 c0       	rjmp	.+128    	; 0x20d4 <main+0x816>
    2054:	4b c0       	rjmp	.+150    	; 0x20ec <main+0x82e>
							case 0: FunctionGenerator.frequency_A++; break;
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	a1 1d       	adc	r26, r1
    205a:	b1 1d       	adc	r27, r1
    205c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2060:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    2064:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    2068:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <main+0x82e>
							case 1: FunctionGenerator.frequency_A += 10; break;
    206e:	0a 96       	adiw	r24, 0x0a	; 10
    2070:	a1 1d       	adc	r26, r1
    2072:	b1 1d       	adc	r27, r1
    2074:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2078:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    207c:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    2080:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    2084:	33 c0       	rjmp	.+102    	; 0x20ec <main+0x82e>
							case 2: FunctionGenerator.frequency_A += 100; break;
    2086:	8c 59       	subi	r24, 0x9C	; 156
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	af 4f       	sbci	r26, 0xFF	; 255
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2092:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    2096:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    209a:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    209e:	26 c0       	rjmp	.+76     	; 0x20ec <main+0x82e>
							case 3: FunctionGenerator.frequency_A += 1000; break;
    20a0:	88 51       	subi	r24, 0x18	; 24
    20a2:	9c 4f       	sbci	r25, 0xFC	; 252
    20a4:	af 4f       	sbci	r26, 0xFF	; 255
    20a6:	bf 4f       	sbci	r27, 0xFF	; 255
    20a8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    20ac:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    20b0:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    20b4:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    20b8:	19 c0       	rjmp	.+50     	; 0x20ec <main+0x82e>
							case 4: FunctionGenerator.frequency_A += 10000; break;
    20ba:	80 5f       	subi	r24, 0xF0	; 240
    20bc:	98 4d       	sbci	r25, 0xD8	; 216
    20be:	af 4f       	sbci	r26, 0xFF	; 255
    20c0:	bf 4f       	sbci	r27, 0xFF	; 255
    20c2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    20c6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    20ca:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    20ce:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <main+0x82e>
							case 5: FunctionGenerator.frequency_A += 100000; break;
    20d4:	80 56       	subi	r24, 0x60	; 96
    20d6:	99 47       	sbci	r25, 0x79	; 121
    20d8:	ae 4f       	sbci	r26, 0xFE	; 254
    20da:	bf 4f       	sbci	r27, 0xFF	; 255
    20dc:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    20e0:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    20e4:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    20e8:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
						}
					}
					FG_SetFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A);
    20ec:	ea e4       	ldi	r30, 0x4A	; 74
    20ee:	f2 e0       	ldi	r31, 0x02	; 2
    20f0:	40 81       	ld	r20, Z
    20f2:	51 81       	ldd	r21, Z+1	; 0x01
    20f4:	62 81       	ldd	r22, Z+2	; 0x02
    20f6:	73 81       	ldd	r23, Z+3	; 0x03
    20f8:	24 85       	ldd	r18, Z+12	; 0x0c
    20fa:	8b 2d       	mov	r24, r11
    20fc:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    2100:	35 cc       	rjmp	.-1942   	; 0x196c <main+0xae>
				}
				
				else if (encoderState == CCW) {
    2102:	02 30       	cpi	r16, 0x02	; 2
    2104:	09 f0       	breq	.+2      	; 0x2108 <main+0x84a>
    2106:	75 c0       	rjmp	.+234    	; 0x21f2 <main+0x934>
					display.stateChanged = true;
    2108:	18 83       	st	Y, r17
					if (FunctionGenerator.frequency_A <= 0) FunctionGenerator.frequency_A = 0;
    210a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FunctionGenerator.2758>
    210e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <FunctionGenerator.2758+0x1>
    2112:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <FunctionGenerator.2758+0x2>
    2116:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <FunctionGenerator.2758+0x3>
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	a1 05       	cpc	r26, r1
    211e:	b1 05       	cpc	r27, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <main+0x866>
    2122:	5c c0       	rjmp	.+184    	; 0x21dc <main+0x91e>
					else {
						switch(buttonPressCounter) {
    2124:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    2128:	22 30       	cpi	r18, 0x02	; 2
    212a:	29 f1       	breq	.+74     	; 0x2176 <main+0x8b8>
    212c:	28 f4       	brcc	.+10     	; 0x2138 <main+0x87a>
    212e:	22 23       	and	r18, r18
    2130:	51 f0       	breq	.+20     	; 0x2146 <main+0x888>
    2132:	21 30       	cpi	r18, 0x01	; 1
    2134:	a1 f0       	breq	.+40     	; 0x215e <main+0x8a0>
    2136:	52 c0       	rjmp	.+164    	; 0x21dc <main+0x91e>
    2138:	24 30       	cpi	r18, 0x04	; 4
    213a:	b9 f1       	breq	.+110    	; 0x21aa <main+0x8ec>
    213c:	48 f1       	brcs	.+82     	; 0x2190 <main+0x8d2>
    213e:	25 30       	cpi	r18, 0x05	; 5
    2140:	09 f4       	brne	.+2      	; 0x2144 <main+0x886>
    2142:	40 c0       	rjmp	.+128    	; 0x21c4 <main+0x906>
    2144:	4b c0       	rjmp	.+150    	; 0x21dc <main+0x91e>
							case 0: FunctionGenerator.frequency_A--; break;
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	a1 09       	sbc	r26, r1
    214a:	b1 09       	sbc	r27, r1
    214c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2150:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    2154:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    2158:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <main+0x91e>
							case 1: FunctionGenerator.frequency_A -= 10; break;
    215e:	0a 97       	sbiw	r24, 0x0a	; 10
    2160:	a1 09       	sbc	r26, r1
    2162:	b1 09       	sbc	r27, r1
    2164:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2168:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    216c:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    2170:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    2174:	33 c0       	rjmp	.+102    	; 0x21dc <main+0x91e>
							case 2: FunctionGenerator.frequency_A -= 100; break;
    2176:	84 56       	subi	r24, 0x64	; 100
    2178:	91 09       	sbc	r25, r1
    217a:	a1 09       	sbc	r26, r1
    217c:	b1 09       	sbc	r27, r1
    217e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    2182:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    2186:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    218a:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    218e:	26 c0       	rjmp	.+76     	; 0x21dc <main+0x91e>
							case 3: FunctionGenerator.frequency_A -= 1000; break;
    2190:	88 5e       	subi	r24, 0xE8	; 232
    2192:	93 40       	sbci	r25, 0x03	; 3
    2194:	a1 09       	sbc	r26, r1
    2196:	b1 09       	sbc	r27, r1
    2198:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    219c:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    21a0:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    21a4:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    21a8:	19 c0       	rjmp	.+50     	; 0x21dc <main+0x91e>
							case 4: FunctionGenerator.frequency_A -= 10000; break;
    21aa:	80 51       	subi	r24, 0x10	; 16
    21ac:	97 42       	sbci	r25, 0x27	; 39
    21ae:	a1 09       	sbc	r26, r1
    21b0:	b1 09       	sbc	r27, r1
    21b2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    21b6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    21ba:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    21be:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
    21c2:	0c c0       	rjmp	.+24     	; 0x21dc <main+0x91e>
							case 5: FunctionGenerator.frequency_A -= 100000; break;
    21c4:	80 5a       	subi	r24, 0xA0	; 160
    21c6:	96 48       	sbci	r25, 0x86	; 134
    21c8:	a1 40       	sbci	r26, 0x01	; 1
    21ca:	b1 09       	sbc	r27, r1
    21cc:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <FunctionGenerator.2758>
    21d0:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <FunctionGenerator.2758+0x1>
    21d4:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <FunctionGenerator.2758+0x2>
    21d8:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <FunctionGenerator.2758+0x3>
						}
					}
					FG_SetFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A);
    21dc:	ea e4       	ldi	r30, 0x4A	; 74
    21de:	f2 e0       	ldi	r31, 0x02	; 2
    21e0:	40 81       	ld	r20, Z
    21e2:	51 81       	ldd	r21, Z+1	; 0x01
    21e4:	62 81       	ldd	r22, Z+2	; 0x02
    21e6:	73 81       	ldd	r23, Z+3	; 0x03
    21e8:	24 85       	ldd	r18, Z+12	; 0x0c
    21ea:	8b 2d       	mov	r24, r11
    21ec:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    21f0:	bd cb       	rjmp	.-2182   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    21f2:	99 20       	and	r9, r9
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <main+0x93a>
    21f6:	ba cb       	rjmp	.-2188   	; 0x196c <main+0xae>
					if (buttonPressCounter < 5) buttonPressCounter++;
    21f8:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    21fc:	85 30       	cpi	r24, 0x05	; 5
    21fe:	20 f4       	brcc	.+8      	; 0x2208 <main+0x94a>
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <buttonPressCounter.2761>
    2206:	06 c0       	rjmp	.+12     	; 0x2214 <main+0x956>
					else {
						buttonPressCounter = 0;
    2208:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    220c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    2210:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
				}
					display.stateChanged = true;
    2214:	18 83       	st	Y, r17
    2216:	aa cb       	rjmp	.-2220   	; 0x196c <main+0xae>
				}
				break;
				
				case PTR_BIAS_A:
				if (encoderState == CW) {
    2218:	01 30       	cpi	r16, 0x01	; 1
    221a:	09 f0       	breq	.+2      	; 0x221e <main+0x960>
    221c:	64 c0       	rjmp	.+200    	; 0x22e6 <main+0xa28>
					display.stateChanged = true;
    221e:	18 83       	st	Y, r17
					if (FunctionGenerator.bias_A < 0) FunctionGenerator.bias_A_sign = NEGATIVE;
    2220:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <FunctionGenerator.2758+0xe>
    2224:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <FunctionGenerator.2758+0xf>
    2228:	99 23       	and	r25, r25
    222a:	1c f4       	brge	.+6      	; 0x2232 <main+0x974>
    222c:	10 93 5c 02 	sts	0x025C, r17	; 0x80025c <FunctionGenerator.2758+0x12>
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <main+0x978>
					else FunctionGenerator.bias_A_sign = POSITIVE;
    2232:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <FunctionGenerator.2758+0x12>
					
					if (FunctionGenerator.bias_A >= 330) FunctionGenerator.bias_A = 330;
    2236:	8a 34       	cpi	r24, 0x4A	; 74
    2238:	21 e0       	ldi	r18, 0x01	; 1
    223a:	92 07       	cpc	r25, r18
    223c:	3c f0       	brlt	.+14     	; 0x224c <main+0x98e>
    223e:	8a e4       	ldi	r24, 0x4A	; 74
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    2246:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    224a:	1a c0       	rjmp	.+52     	; 0x2280 <main+0x9c2>
					else {
						switch(buttonPressCounter) {
    224c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    2250:	21 30       	cpi	r18, 0x01	; 1
    2252:	51 f0       	breq	.+20     	; 0x2268 <main+0x9aa>
    2254:	18 f0       	brcs	.+6      	; 0x225c <main+0x99e>
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	69 f0       	breq	.+26     	; 0x2274 <main+0x9b6>
    225a:	12 c0       	rjmp	.+36     	; 0x2280 <main+0x9c2>
							case 0: FunctionGenerator.bias_A++; break;
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    2262:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    2266:	0c c0       	rjmp	.+24     	; 0x2280 <main+0x9c2>
							case 1: FunctionGenerator.bias_A += 10; break;
    2268:	0a 96       	adiw	r24, 0x0a	; 10
    226a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    226e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <main+0x9c2>
							case 2: FunctionGenerator.bias_A += 100; break;
    2274:	8c 59       	subi	r24, 0x9C	; 156
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    227c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
						}
					}
					
					if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
    2280:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <FunctionGenerator.2758+0x12>
    2284:	81 11       	cpse	r24, r1
    2286:	07 c0       	rjmp	.+14     	; 0x2296 <main+0x9d8>
    2288:	41 2f       	mov	r20, r17
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	8b 2d       	mov	r24, r11
    2290:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    2294:	06 c0       	rjmp	.+12     	; 0x22a2 <main+0x9e4>
					else FG_SetBiasDC(FG0, 0, POSITIVE);
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	8b 2d       	mov	r24, r11
    229e:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
					FG_SetBiasDC(FG0, (uint16_t)(abs(FunctionGenerator.bias_A) * 12.4), FunctionGenerator.bias_A_sign);
    22a2:	0f 2e       	mov	r0, r31
    22a4:	fa e4       	ldi	r31, 0x4A	; 74
    22a6:	8f 2e       	mov	r8, r31
    22a8:	f2 e0       	ldi	r31, 0x02	; 2
    22aa:	9f 2e       	mov	r9, r31
    22ac:	f0 2d       	mov	r31, r0
    22ae:	f4 01       	movw	r30, r8
    22b0:	66 85       	ldd	r22, Z+14	; 0x0e
    22b2:	77 85       	ldd	r23, Z+15	; 0x0f
    22b4:	77 23       	and	r23, r23
    22b6:	1c f4       	brge	.+6      	; 0x22be <main+0xa00>
    22b8:	71 95       	neg	r23
    22ba:	61 95       	neg	r22
    22bc:	71 09       	sbc	r23, r1
    22be:	07 2e       	mov	r0, r23
    22c0:	00 0c       	add	r0, r0
    22c2:	88 0b       	sbc	r24, r24
    22c4:	99 0b       	sbc	r25, r25
    22c6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__floatsisf>
    22ca:	26 e6       	ldi	r18, 0x66	; 102
    22cc:	36 e6       	ldi	r19, 0x66	; 102
    22ce:	46 e4       	ldi	r20, 0x46	; 70
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    22d6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    22da:	f4 01       	movw	r30, r8
    22dc:	42 89       	ldd	r20, Z+18	; 0x12
    22de:	8b 2d       	mov	r24, r11
    22e0:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    22e4:	43 cb       	rjmp	.-2426   	; 0x196c <main+0xae>
				}
				
				else if (encoderState == CCW) {
    22e6:	02 30       	cpi	r16, 0x02	; 2
    22e8:	09 f0       	breq	.+2      	; 0x22ec <main+0xa2e>
    22ea:	64 c0       	rjmp	.+200    	; 0x23b4 <main+0xaf6>
					display.stateChanged = true;
    22ec:	18 83       	st	Y, r17
					if (FunctionGenerator.bias_A < 0) FunctionGenerator.bias_A_sign = NEGATIVE;
    22ee:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <FunctionGenerator.2758+0xe>
    22f2:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <FunctionGenerator.2758+0xf>
    22f6:	99 23       	and	r25, r25
    22f8:	1c f4       	brge	.+6      	; 0x2300 <main+0xa42>
    22fa:	10 93 5c 02 	sts	0x025C, r17	; 0x80025c <FunctionGenerator.2758+0x12>
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <main+0xa46>
					else FunctionGenerator.bias_A_sign = POSITIVE;
    2300:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <FunctionGenerator.2758+0x12>
					
					if (FunctionGenerator.bias_A <= -330) FunctionGenerator.bias_A = -330;
    2304:	87 3b       	cpi	r24, 0xB7	; 183
    2306:	fe ef       	ldi	r31, 0xFE	; 254
    2308:	9f 07       	cpc	r25, r31
    230a:	3c f4       	brge	.+14     	; 0x231a <main+0xa5c>
    230c:	86 eb       	ldi	r24, 0xB6	; 182
    230e:	9e ef       	ldi	r25, 0xFE	; 254
    2310:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    2314:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    2318:	1a c0       	rjmp	.+52     	; 0x234e <main+0xa90>
					else {
						switch(buttonPressCounter) {
    231a:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    231e:	21 30       	cpi	r18, 0x01	; 1
    2320:	51 f0       	breq	.+20     	; 0x2336 <main+0xa78>
    2322:	18 f0       	brcs	.+6      	; 0x232a <main+0xa6c>
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	69 f0       	breq	.+26     	; 0x2342 <main+0xa84>
    2328:	12 c0       	rjmp	.+36     	; 0x234e <main+0xa90>
							case 0: FunctionGenerator.bias_A--; break;
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    2330:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    2334:	0c c0       	rjmp	.+24     	; 0x234e <main+0xa90>
							case 1: FunctionGenerator.bias_A -= 10; break;
    2336:	0a 97       	sbiw	r24, 0x0a	; 10
    2338:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    233c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
    2340:	06 c0       	rjmp	.+12     	; 0x234e <main+0xa90>
							case 2: FunctionGenerator.bias_A -= 100; break;
    2342:	84 56       	subi	r24, 0x64	; 100
    2344:	91 09       	sbc	r25, r1
    2346:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FunctionGenerator.2758+0xf>
    234a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FunctionGenerator.2758+0xe>
						}
					}
					
					if (FunctionGenerator.bias_A_sign == POSITIVE) FG_SetBiasDC(FG0, 0, NEGATIVE);
    234e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <FunctionGenerator.2758+0x12>
    2352:	81 11       	cpse	r24, r1
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <main+0xaa6>
    2356:	41 2f       	mov	r20, r17
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	8b 2d       	mov	r24, r11
    235e:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <main+0xab2>
					else FG_SetBiasDC(FG0, 0, POSITIVE);
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	8b 2d       	mov	r24, r11
    236c:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
					FG_SetBiasDC(FG0, (uint16_t)(abs(FunctionGenerator.bias_A) * 12.4), FunctionGenerator.bias_A_sign);
    2370:	0f 2e       	mov	r0, r31
    2372:	fa e4       	ldi	r31, 0x4A	; 74
    2374:	8f 2e       	mov	r8, r31
    2376:	f2 e0       	ldi	r31, 0x02	; 2
    2378:	9f 2e       	mov	r9, r31
    237a:	f0 2d       	mov	r31, r0
    237c:	f4 01       	movw	r30, r8
    237e:	66 85       	ldd	r22, Z+14	; 0x0e
    2380:	77 85       	ldd	r23, Z+15	; 0x0f
    2382:	77 23       	and	r23, r23
    2384:	1c f4       	brge	.+6      	; 0x238c <main+0xace>
    2386:	71 95       	neg	r23
    2388:	61 95       	neg	r22
    238a:	71 09       	sbc	r23, r1
    238c:	07 2e       	mov	r0, r23
    238e:	00 0c       	add	r0, r0
    2390:	88 0b       	sbc	r24, r24
    2392:	99 0b       	sbc	r25, r25
    2394:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__floatsisf>
    2398:	26 e6       	ldi	r18, 0x66	; 102
    239a:	36 e6       	ldi	r19, 0x66	; 102
    239c:	46 e4       	ldi	r20, 0x46	; 70
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    23a4:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    23a8:	f4 01       	movw	r30, r8
    23aa:	42 89       	ldd	r20, Z+18	; 0x12
    23ac:	8b 2d       	mov	r24, r11
    23ae:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    23b2:	dc ca       	rjmp	.-2632   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    23b4:	99 20       	and	r9, r9
    23b6:	09 f4       	brne	.+2      	; 0x23ba <main+0xafc>
    23b8:	d9 ca       	rjmp	.-2638   	; 0x196c <main+0xae>
					if (buttonPressCounter < 2) buttonPressCounter++;
    23ba:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	20 f4       	brcc	.+8      	; 0x23ca <main+0xb0c>
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <buttonPressCounter.2761>
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <main+0xb18>
					else {
						buttonPressCounter = 0;
    23ca:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    23ce:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    23d2:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					}
					display.stateChanged = true;
    23d6:	18 83       	st	Y, r17
    23d8:	c9 ca       	rjmp	.-2670   	; 0x196c <main+0xae>
				}
				break;
				
				case PTR_TYPE_B:
				if (encoderState == CW) {
    23da:	01 30       	cpi	r16, 0x01	; 1
    23dc:	39 f5       	brne	.+78     	; 0x242c <main+0xb6e>
					display.stateChanged = true;
    23de:	18 83       	st	Y, r17
					switch(FunctionGenerator.output_type_B) {
    23e0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <FunctionGenerator.2758+0xd>
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	79 f0       	breq	.+30     	; 0x2406 <main+0xb48>
    23e8:	18 f4       	brcc	.+6      	; 0x23f0 <main+0xb32>
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	41 f0       	breq	.+16     	; 0x23fe <main+0xb40>
    23ee:	11 c0       	rjmp	.+34     	; 0x2412 <main+0xb54>
    23f0:	83 30       	cpi	r24, 0x03	; 3
    23f2:	61 f0       	breq	.+24     	; 0x240c <main+0xb4e>
    23f4:	85 30       	cpi	r24, 0x05	; 5
    23f6:	69 f4       	brne	.+26     	; 0x2412 <main+0xb54>
						case OFF: FunctionGenerator.output_type_B = SINE; break;
    23f8:	10 93 57 02 	sts	0x0257, r17	; 0x800257 <FunctionGenerator.2758+0xd>
    23fc:	0c c0       	rjmp	.+24     	; 0x2416 <main+0xb58>
						case SINE: FunctionGenerator.output_type_B = TRIANGLE; break;
    23fe:	f2 e0       	ldi	r31, 0x02	; 2
    2400:	f0 93 57 02 	sts	0x0257, r31	; 0x800257 <FunctionGenerator.2758+0xd>
    2404:	08 c0       	rjmp	.+16     	; 0x2416 <main+0xb58>
						case TRIANGLE: FunctionGenerator.output_type_B = SQUARE; break;
    2406:	60 92 57 02 	sts	0x0257, r6	; 0x800257 <FunctionGenerator.2758+0xd>
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <main+0xb58>
						case SQUARE: FunctionGenerator.output_type_B = DC; break;
    240c:	a0 92 57 02 	sts	0x0257, r10	; 0x800257 <FunctionGenerator.2758+0xd>
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <main+0xb58>
						case DC: default: FunctionGenerator.output_type_B = OFF; break;
    2412:	b0 92 57 02 	sts	0x0257, r11	; 0x800257 <FunctionGenerator.2758+0xd>
					}
					FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
    2416:	ea e4       	ldi	r30, 0x4A	; 74
    2418:	f2 e0       	ldi	r31, 0x02	; 2
    241a:	44 81       	ldd	r20, Z+4	; 0x04
    241c:	55 81       	ldd	r21, Z+5	; 0x05
    241e:	66 81       	ldd	r22, Z+6	; 0x06
    2420:	77 81       	ldd	r23, Z+7	; 0x07
    2422:	25 85       	ldd	r18, Z+13	; 0x0d
    2424:	86 e0       	ldi	r24, 0x06	; 6
    2426:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    242a:	a0 ca       	rjmp	.-2752   	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    242c:	02 30       	cpi	r16, 0x02	; 2
    242e:	39 f5       	brne	.+78     	; 0x247e <main+0xbc0>
					display.stateChanged = true;
    2430:	18 83       	st	Y, r17
					switch(FunctionGenerator.output_type_B) {
    2432:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <FunctionGenerator.2758+0xd>
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	71 f0       	breq	.+28     	; 0x2456 <main+0xb98>
    243a:	18 f4       	brcc	.+6      	; 0x2442 <main+0xb84>
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	41 f0       	breq	.+16     	; 0x2450 <main+0xb92>
    2440:	11 c0       	rjmp	.+34     	; 0x2464 <main+0xba6>
    2442:	83 30       	cpi	r24, 0x03	; 3
    2444:	59 f0       	breq	.+22     	; 0x245c <main+0xb9e>
    2446:	85 30       	cpi	r24, 0x05	; 5
    2448:	69 f4       	brne	.+26     	; 0x2464 <main+0xba6>
						case OFF: FunctionGenerator.output_type_B = DC; break;
    244a:	a0 92 57 02 	sts	0x0257, r10	; 0x800257 <FunctionGenerator.2758+0xd>
    244e:	0c c0       	rjmp	.+24     	; 0x2468 <main+0xbaa>
						case SINE: FunctionGenerator.output_type_B = OFF; break;
    2450:	b0 92 57 02 	sts	0x0257, r11	; 0x800257 <FunctionGenerator.2758+0xd>
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <main+0xbaa>
						case TRIANGLE: FunctionGenerator.output_type_B = SINE; break;
    2456:	10 93 57 02 	sts	0x0257, r17	; 0x800257 <FunctionGenerator.2758+0xd>
    245a:	06 c0       	rjmp	.+12     	; 0x2468 <main+0xbaa>
						case SQUARE: FunctionGenerator.output_type_B = TRIANGLE; break;
    245c:	22 e0       	ldi	r18, 0x02	; 2
    245e:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <FunctionGenerator.2758+0xd>
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <main+0xbaa>
						case DC: default: FunctionGenerator.output_type_B = SQUARE; break;
    2464:	60 92 57 02 	sts	0x0257, r6	; 0x800257 <FunctionGenerator.2758+0xd>
					}
					FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
    2468:	ea e4       	ldi	r30, 0x4A	; 74
    246a:	f2 e0       	ldi	r31, 0x02	; 2
    246c:	44 81       	ldd	r20, Z+4	; 0x04
    246e:	55 81       	ldd	r21, Z+5	; 0x05
    2470:	66 81       	ldd	r22, Z+6	; 0x06
    2472:	77 81       	ldd	r23, Z+7	; 0x07
    2474:	25 85       	ldd	r18, Z+13	; 0x0d
    2476:	86 e0       	ldi	r24, 0x06	; 6
    2478:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    247c:	77 ca       	rjmp	.-2834   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    247e:	99 20       	and	r9, r9
    2480:	09 f4       	brne	.+2      	; 0x2484 <main+0xbc6>
    2482:	74 ca       	rjmp	.-2840   	; 0x196c <main+0xae>
					mainDeviceState = PRIMARY_SCREENS;
    2484:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
					display.stateChanged = true;
    2488:	18 83       	st	Y, r17
					displayPointer = PTR_NULL;
    248a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
    248e:	6e ca       	rjmp	.-2852   	; 0x196c <main+0xae>
				}
				
				break;
				
				case PTR_AMP_B:
				if (encoderState == CW) {
    2490:	01 30       	cpi	r16, 0x01	; 1
    2492:	b9 f5       	brne	.+110    	; 0x2502 <main+0xc44>
					display.stateChanged = true;
    2494:	18 83       	st	Y, r17
					if (FunctionGenerator.amplitude_B >= 70) FunctionGenerator.amplitude_B = 70;
    2496:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <FunctionGenerator.2758+0xa>
    249a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <FunctionGenerator.2758+0xb>
    249e:	86 34       	cpi	r24, 0x46	; 70
    24a0:	91 05       	cpc	r25, r1
    24a2:	38 f0       	brcs	.+14     	; 0x24b2 <main+0xbf4>
    24a4:	86 e4       	ldi	r24, 0x46	; 70
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <FunctionGenerator.2758+0xb>
    24ac:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <FunctionGenerator.2758+0xa>
    24b0:	12 c0       	rjmp	.+36     	; 0x24d6 <main+0xc18>
					else {
						switch(buttonPressCounter) {
    24b2:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    24b6:	22 23       	and	r18, r18
    24b8:	19 f0       	breq	.+6      	; 0x24c0 <main+0xc02>
    24ba:	21 30       	cpi	r18, 0x01	; 1
    24bc:	39 f0       	breq	.+14     	; 0x24cc <main+0xc0e>
    24be:	0b c0       	rjmp	.+22     	; 0x24d6 <main+0xc18>
							case 0: FunctionGenerator.amplitude_B++; break;
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <FunctionGenerator.2758+0xb>
    24c6:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <FunctionGenerator.2758+0xa>
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <main+0xc18>
							case 1: FunctionGenerator.amplitude_B += 10; break;
    24cc:	0a 96       	adiw	r24, 0x0a	; 10
    24ce:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <FunctionGenerator.2758+0xb>
    24d2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <FunctionGenerator.2758+0xa>
						}
					}
					FG_SetAmplitude(FunctionGenerator.amplitude_B * 58.5, FG1);
    24d6:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <FunctionGenerator.2758+0xa>
    24da:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <FunctionGenerator.2758+0xb>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a e6       	ldi	r20, 0x6A	; 106
    24ec:	52 e4       	ldi	r21, 0x42	; 66
    24ee:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    24f2:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	66 e0       	ldi	r22, 0x06	; 6
    24fc:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
    2500:	35 ca       	rjmp	.-2966   	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    2502:	02 30       	cpi	r16, 0x02	; 2
    2504:	79 f5       	brne	.+94     	; 0x2564 <main+0xca6>
					display.stateChanged = true;
    2506:	18 83       	st	Y, r17
					if (FunctionGenerator.amplitude_B <= 0) FunctionGenerator.amplitude_B = 0;
    2508:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <FunctionGenerator.2758+0xa>
    250c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <FunctionGenerator.2758+0xb>
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	91 f0       	breq	.+36     	; 0x2538 <main+0xc7a>
					else {
						switch(buttonPressCounter) {
    2514:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    2518:	22 23       	and	r18, r18
    251a:	19 f0       	breq	.+6      	; 0x2522 <main+0xc64>
    251c:	21 30       	cpi	r18, 0x01	; 1
    251e:	39 f0       	breq	.+14     	; 0x252e <main+0xc70>
    2520:	0b c0       	rjmp	.+22     	; 0x2538 <main+0xc7a>
							case 0: FunctionGenerator.amplitude_B--; break;
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <FunctionGenerator.2758+0xb>
    2528:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <FunctionGenerator.2758+0xa>
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <main+0xc7a>
							case 1: FunctionGenerator.amplitude_B -= 10; break;
    252e:	0a 97       	sbiw	r24, 0x0a	; 10
    2530:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <FunctionGenerator.2758+0xb>
    2534:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <FunctionGenerator.2758+0xa>
						}
					}
					FG_SetAmplitude(FunctionGenerator.amplitude_B * 58.5, FG1);
    2538:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <FunctionGenerator.2758+0xa>
    253c:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <FunctionGenerator.2758+0xb>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatunsisf>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a e6       	ldi	r20, 0x6A	; 106
    254e:	52 e4       	ldi	r21, 0x42	; 66
    2550:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    2554:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	66 e0       	ldi	r22, 0x06	; 6
    255e:	0e 94 cf 02 	call	0x59e	; 0x59e <FG_SetAmplitude>
    2562:	04 ca       	rjmp	.-3064   	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    2564:	99 20       	and	r9, r9
    2566:	09 f4       	brne	.+2      	; 0x256a <main+0xcac>
    2568:	01 ca       	rjmp	.-3070   	; 0x196c <main+0xae>
					if (buttonPressCounter < 1) buttonPressCounter++;
    256a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    256e:	81 11       	cpse	r24, r1
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <main+0xcba>
    2572:	10 93 5e 02 	sts	0x025E, r17	; 0x80025e <buttonPressCounter.2761>
    2576:	06 c0       	rjmp	.+12     	; 0x2584 <main+0xcc6>
					else {
						buttonPressCounter = 0;
    2578:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    257c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    2580:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					}
					display.stateChanged = true;
    2584:	18 83       	st	Y, r17
    2586:	f2 c9       	rjmp	.-3100   	; 0x196c <main+0xae>
				}
				
				break;

				case PTR_FREQ_B:
				if (encoderState == CW) {
    2588:	01 30       	cpi	r16, 0x01	; 1
    258a:	09 f0       	breq	.+2      	; 0x258e <main+0xcd0>
    258c:	80 c0       	rjmp	.+256    	; 0x268e <main+0xdd0>
					display.stateChanged = true;
    258e:	18 83       	st	Y, r17
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    2590:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <FunctionGenerator.2758+0x4>
    2594:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <FunctionGenerator.2758+0x5>
    2598:	a0 91 50 02 	lds	r26, 0x0250	; 0x800250 <FunctionGenerator.2758+0x6>
    259c:	b0 91 51 02 	lds	r27, 0x0251	; 0x800251 <FunctionGenerator.2758+0x7>
    25a0:	80 34       	cpi	r24, 0x40	; 64
    25a2:	e2 e4       	ldi	r30, 0x42	; 66
    25a4:	9e 07       	cpc	r25, r30
    25a6:	ef e0       	ldi	r30, 0x0F	; 15
    25a8:	ae 07       	cpc	r26, r30
    25aa:	b1 05       	cpc	r27, r1
    25ac:	48 f0       	brcs	.+18     	; 0x25c0 <main+0xd02>
    25ae:	20 92 4e 02 	sts	0x024E, r2	; 0x80024e <FunctionGenerator.2758+0x4>
    25b2:	30 92 4f 02 	sts	0x024F, r3	; 0x80024f <FunctionGenerator.2758+0x5>
    25b6:	40 92 50 02 	sts	0x0250, r4	; 0x800250 <FunctionGenerator.2758+0x6>
    25ba:	50 92 51 02 	sts	0x0251, r5	; 0x800251 <FunctionGenerator.2758+0x7>
    25be:	5c c0       	rjmp	.+184    	; 0x2678 <main+0xdba>
					else {
						switch(buttonPressCounter) {
    25c0:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    25c4:	22 30       	cpi	r18, 0x02	; 2
    25c6:	29 f1       	breq	.+74     	; 0x2612 <main+0xd54>
    25c8:	28 f4       	brcc	.+10     	; 0x25d4 <main+0xd16>
    25ca:	22 23       	and	r18, r18
    25cc:	51 f0       	breq	.+20     	; 0x25e2 <main+0xd24>
    25ce:	21 30       	cpi	r18, 0x01	; 1
    25d0:	a1 f0       	breq	.+40     	; 0x25fa <main+0xd3c>
    25d2:	52 c0       	rjmp	.+164    	; 0x2678 <main+0xdba>
    25d4:	24 30       	cpi	r18, 0x04	; 4
    25d6:	b9 f1       	breq	.+110    	; 0x2646 <main+0xd88>
    25d8:	48 f1       	brcs	.+82     	; 0x262c <main+0xd6e>
    25da:	25 30       	cpi	r18, 0x05	; 5
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <main+0xd22>
    25de:	40 c0       	rjmp	.+128    	; 0x2660 <main+0xda2>
    25e0:	4b c0       	rjmp	.+150    	; 0x2678 <main+0xdba>
							case 0: FunctionGenerator.frequency_B++; break;
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	a1 1d       	adc	r26, r1
    25e6:	b1 1d       	adc	r27, r1
    25e8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    25ec:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    25f0:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    25f4:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    25f8:	3f c0       	rjmp	.+126    	; 0x2678 <main+0xdba>
							case 1: FunctionGenerator.frequency_B += 10; break;
    25fa:	0a 96       	adiw	r24, 0x0a	; 10
    25fc:	a1 1d       	adc	r26, r1
    25fe:	b1 1d       	adc	r27, r1
    2600:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    2604:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2608:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    260c:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    2610:	33 c0       	rjmp	.+102    	; 0x2678 <main+0xdba>
							case 2: FunctionGenerator.frequency_B += 100; break;
    2612:	8c 59       	subi	r24, 0x9C	; 156
    2614:	9f 4f       	sbci	r25, 0xFF	; 255
    2616:	af 4f       	sbci	r26, 0xFF	; 255
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    261e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2622:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2626:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    262a:	26 c0       	rjmp	.+76     	; 0x2678 <main+0xdba>
							case 3: FunctionGenerator.frequency_B += 1000; break;
    262c:	88 51       	subi	r24, 0x18	; 24
    262e:	9c 4f       	sbci	r25, 0xFC	; 252
    2630:	af 4f       	sbci	r26, 0xFF	; 255
    2632:	bf 4f       	sbci	r27, 0xFF	; 255
    2634:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    2638:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    263c:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2640:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    2644:	19 c0       	rjmp	.+50     	; 0x2678 <main+0xdba>
							case 4: FunctionGenerator.frequency_B += 10000; break;
    2646:	80 5f       	subi	r24, 0xF0	; 240
    2648:	98 4d       	sbci	r25, 0xD8	; 216
    264a:	af 4f       	sbci	r26, 0xFF	; 255
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    2652:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2656:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    265a:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    265e:	0c c0       	rjmp	.+24     	; 0x2678 <main+0xdba>
							case 5: FunctionGenerator.frequency_B += 100000; break;
    2660:	80 56       	subi	r24, 0x60	; 96
    2662:	99 47       	sbci	r25, 0x79	; 121
    2664:	ae 4f       	sbci	r26, 0xFE	; 254
    2666:	bf 4f       	sbci	r27, 0xFF	; 255
    2668:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    266c:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2670:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2674:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
							default: break;
						}
					}
					FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);									
    2678:	ea e4       	ldi	r30, 0x4A	; 74
    267a:	f2 e0       	ldi	r31, 0x02	; 2
    267c:	44 81       	ldd	r20, Z+4	; 0x04
    267e:	55 81       	ldd	r21, Z+5	; 0x05
    2680:	66 81       	ldd	r22, Z+6	; 0x06
    2682:	77 81       	ldd	r23, Z+7	; 0x07
    2684:	25 85       	ldd	r18, Z+13	; 0x0d
    2686:	86 e0       	ldi	r24, 0x06	; 6
    2688:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    268c:	6f c9       	rjmp	.-3362   	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    268e:	02 30       	cpi	r16, 0x02	; 2
    2690:	09 f0       	breq	.+2      	; 0x2694 <main+0xdd6>
    2692:	75 c0       	rjmp	.+234    	; 0x277e <main+0xec0>
					display.stateChanged = true;
    2694:	18 83       	st	Y, r17
					if (FunctionGenerator.frequency_B <= 0) FunctionGenerator.frequency_B = 0;
    2696:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <FunctionGenerator.2758+0x4>
    269a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <FunctionGenerator.2758+0x5>
    269e:	a0 91 50 02 	lds	r26, 0x0250	; 0x800250 <FunctionGenerator.2758+0x6>
    26a2:	b0 91 51 02 	lds	r27, 0x0251	; 0x800251 <FunctionGenerator.2758+0x7>
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	a1 05       	cpc	r26, r1
    26aa:	b1 05       	cpc	r27, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <main+0xdf2>
    26ae:	5c c0       	rjmp	.+184    	; 0x2768 <main+0xeaa>
					else {
						switch(buttonPressCounter) {
    26b0:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	29 f1       	breq	.+74     	; 0x2702 <main+0xe44>
    26b8:	28 f4       	brcc	.+10     	; 0x26c4 <main+0xe06>
    26ba:	22 23       	and	r18, r18
    26bc:	51 f0       	breq	.+20     	; 0x26d2 <main+0xe14>
    26be:	21 30       	cpi	r18, 0x01	; 1
    26c0:	a1 f0       	breq	.+40     	; 0x26ea <main+0xe2c>
    26c2:	52 c0       	rjmp	.+164    	; 0x2768 <main+0xeaa>
    26c4:	24 30       	cpi	r18, 0x04	; 4
    26c6:	b9 f1       	breq	.+110    	; 0x2736 <main+0xe78>
    26c8:	48 f1       	brcs	.+82     	; 0x271c <main+0xe5e>
    26ca:	25 30       	cpi	r18, 0x05	; 5
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <main+0xe12>
    26ce:	40 c0       	rjmp	.+128    	; 0x2750 <main+0xe92>
    26d0:	4b c0       	rjmp	.+150    	; 0x2768 <main+0xeaa>
							case 0: FunctionGenerator.frequency_B--; break;
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	a1 09       	sbc	r26, r1
    26d6:	b1 09       	sbc	r27, r1
    26d8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    26dc:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    26e0:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    26e4:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <main+0xeaa>
							case 1: FunctionGenerator.frequency_B -= 10; break;
    26ea:	0a 97       	sbiw	r24, 0x0a	; 10
    26ec:	a1 09       	sbc	r26, r1
    26ee:	b1 09       	sbc	r27, r1
    26f0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    26f4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    26f8:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    26fc:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    2700:	33 c0       	rjmp	.+102    	; 0x2768 <main+0xeaa>
							case 2: FunctionGenerator.frequency_B -= 100; break;
    2702:	84 56       	subi	r24, 0x64	; 100
    2704:	91 09       	sbc	r25, r1
    2706:	a1 09       	sbc	r26, r1
    2708:	b1 09       	sbc	r27, r1
    270a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    270e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2712:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2716:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    271a:	26 c0       	rjmp	.+76     	; 0x2768 <main+0xeaa>
							case 3: FunctionGenerator.frequency_B -= 1000; break;
    271c:	88 5e       	subi	r24, 0xE8	; 232
    271e:	93 40       	sbci	r25, 0x03	; 3
    2720:	a1 09       	sbc	r26, r1
    2722:	b1 09       	sbc	r27, r1
    2724:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    2728:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    272c:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2730:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    2734:	19 c0       	rjmp	.+50     	; 0x2768 <main+0xeaa>
							case 4: FunctionGenerator.frequency_B -= 10000; break;
    2736:	80 51       	subi	r24, 0x10	; 16
    2738:	97 42       	sbci	r25, 0x27	; 39
    273a:	a1 09       	sbc	r26, r1
    273c:	b1 09       	sbc	r27, r1
    273e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    2742:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2746:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    274a:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
    274e:	0c c0       	rjmp	.+24     	; 0x2768 <main+0xeaa>
							case 5: FunctionGenerator.frequency_B -= 100000; break;
    2750:	80 5a       	subi	r24, 0xA0	; 160
    2752:	96 48       	sbci	r25, 0x86	; 134
    2754:	a1 40       	sbci	r26, 0x01	; 1
    2756:	b1 09       	sbc	r27, r1
    2758:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FunctionGenerator.2758+0x4>
    275c:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FunctionGenerator.2758+0x5>
    2760:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <FunctionGenerator.2758+0x6>
    2764:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <FunctionGenerator.2758+0x7>
							default: break;
						}
					}
					FG_SetFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B);
    2768:	ea e4       	ldi	r30, 0x4A	; 74
    276a:	f2 e0       	ldi	r31, 0x02	; 2
    276c:	44 81       	ldd	r20, Z+4	; 0x04
    276e:	55 81       	ldd	r21, Z+5	; 0x05
    2770:	66 81       	ldd	r22, Z+6	; 0x06
    2772:	77 81       	ldd	r23, Z+7	; 0x07
    2774:	25 85       	ldd	r18, Z+13	; 0x0d
    2776:	86 e0       	ldi	r24, 0x06	; 6
    2778:	0e 94 65 02 	call	0x4ca	; 0x4ca <FG_SetFunction>
    277c:	f7 c8       	rjmp	.-3602   	; 0x196c <main+0xae>
				}
					
				else if (switchState) {
    277e:	99 20       	and	r9, r9
    2780:	09 f4       	brne	.+2      	; 0x2784 <main+0xec6>
    2782:	f4 c8       	rjmp	.-3608   	; 0x196c <main+0xae>
					if (buttonPressCounter < 5) buttonPressCounter++;
    2784:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    2788:	85 30       	cpi	r24, 0x05	; 5
    278a:	20 f4       	brcc	.+8      	; 0x2794 <main+0xed6>
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <buttonPressCounter.2761>
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <main+0xee2>
					else {
						buttonPressCounter = 0;
    2794:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    2798:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    279c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					}
					display.stateChanged = true;
    27a0:	18 83       	st	Y, r17
    27a2:	e4 c8       	rjmp	.-3640   	; 0x196c <main+0xae>
				}
				break;
					
				case PTR_BIAS_B:
				if (encoderState == CW) {
    27a4:	01 30       	cpi	r16, 0x01	; 1
    27a6:	09 f0       	breq	.+2      	; 0x27aa <main+0xeec>
    27a8:	64 c0       	rjmp	.+200    	; 0x2872 <main+0xfb4>
					display.stateChanged = true;
    27aa:	18 83       	st	Y, r17
					if (FunctionGenerator.bias_B < 0) FunctionGenerator.bias_B_sign = NEGATIVE;
    27ac:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <FunctionGenerator.2758+0x10>
    27b0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <FunctionGenerator.2758+0x11>
    27b4:	99 23       	and	r25, r25
    27b6:	1c f4       	brge	.+6      	; 0x27be <main+0xf00>
    27b8:	10 93 5d 02 	sts	0x025D, r17	; 0x80025d <FunctionGenerator.2758+0x13>
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <main+0xf04>
					else FunctionGenerator.bias_B_sign = POSITIVE;
    27be:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <FunctionGenerator.2758+0x13>
					
					if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    27c2:	8a 34       	cpi	r24, 0x4A	; 74
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	9f 07       	cpc	r25, r31
    27c8:	3c f0       	brlt	.+14     	; 0x27d8 <main+0xf1a>
    27ca:	8a e4       	ldi	r24, 0x4A	; 74
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    27d2:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    27d6:	1a c0       	rjmp	.+52     	; 0x280c <main+0xf4e>
					else {
						switch(buttonPressCounter) {
    27d8:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    27dc:	21 30       	cpi	r18, 0x01	; 1
    27de:	51 f0       	breq	.+20     	; 0x27f4 <main+0xf36>
    27e0:	18 f0       	brcs	.+6      	; 0x27e8 <main+0xf2a>
    27e2:	22 30       	cpi	r18, 0x02	; 2
    27e4:	69 f0       	breq	.+26     	; 0x2800 <main+0xf42>
    27e6:	12 c0       	rjmp	.+36     	; 0x280c <main+0xf4e>
							case 0: FunctionGenerator.bias_B++; break;
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    27ee:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    27f2:	0c c0       	rjmp	.+24     	; 0x280c <main+0xf4e>
							case 1: FunctionGenerator.bias_B += 10; break;
    27f4:	0a 96       	adiw	r24, 0x0a	; 10
    27f6:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    27fa:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    27fe:	06 c0       	rjmp	.+12     	; 0x280c <main+0xf4e>
							case 2: FunctionGenerator.bias_B += 100; break;
    2800:	8c 59       	subi	r24, 0x9C	; 156
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    2808:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
							default: break;
						}
					}
					
					if (FunctionGenerator.bias_B_sign == POSITIVE) FG_SetBiasDC(FG1, 0, NEGATIVE);
    280c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <FunctionGenerator.2758+0x13>
    2810:	81 11       	cpse	r24, r1
    2812:	07 c0       	rjmp	.+14     	; 0x2822 <main+0xf64>
    2814:	41 2f       	mov	r20, r17
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	86 e0       	ldi	r24, 0x06	; 6
    281c:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    2820:	06 c0       	rjmp	.+12     	; 0x282e <main+0xf70>
					else FG_SetBiasDC(FG1, 0, POSITIVE);
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	86 e0       	ldi	r24, 0x06	; 6
    282a:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
					FG_SetBiasDC(FG1, (uint16_t)(abs(FunctionGenerator.bias_B) * 12.4), FunctionGenerator.bias_B_sign);
    282e:	0f 2e       	mov	r0, r31
    2830:	fa e4       	ldi	r31, 0x4A	; 74
    2832:	8f 2e       	mov	r8, r31
    2834:	f2 e0       	ldi	r31, 0x02	; 2
    2836:	9f 2e       	mov	r9, r31
    2838:	f0 2d       	mov	r31, r0
    283a:	f4 01       	movw	r30, r8
    283c:	60 89       	ldd	r22, Z+16	; 0x10
    283e:	71 89       	ldd	r23, Z+17	; 0x11
    2840:	77 23       	and	r23, r23
    2842:	1c f4       	brge	.+6      	; 0x284a <main+0xf8c>
    2844:	71 95       	neg	r23
    2846:	61 95       	neg	r22
    2848:	71 09       	sbc	r23, r1
    284a:	07 2e       	mov	r0, r23
    284c:	00 0c       	add	r0, r0
    284e:	88 0b       	sbc	r24, r24
    2850:	99 0b       	sbc	r25, r25
    2852:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__floatsisf>
    2856:	26 e6       	ldi	r18, 0x66	; 102
    2858:	36 e6       	ldi	r19, 0x66	; 102
    285a:	46 e4       	ldi	r20, 0x46	; 70
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    2862:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    2866:	f4 01       	movw	r30, r8
    2868:	43 89       	ldd	r20, Z+19	; 0x13
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    2870:	7d c8       	rjmp	.-3846   	; 0x196c <main+0xae>
					
				}
							
				else if (encoderState == CCW) {
    2872:	02 30       	cpi	r16, 0x02	; 2
    2874:	09 f0       	breq	.+2      	; 0x2878 <main+0xfba>
    2876:	64 c0       	rjmp	.+200    	; 0x2940 <main+0x1082>
					display.stateChanged = true;
    2878:	18 83       	st	Y, r17
					if (FunctionGenerator.bias_B < 0) FunctionGenerator.bias_B_sign = NEGATIVE;
    287a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <FunctionGenerator.2758+0x10>
    287e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <FunctionGenerator.2758+0x11>
    2882:	99 23       	and	r25, r25
    2884:	1c f4       	brge	.+6      	; 0x288c <main+0xfce>
    2886:	10 93 5d 02 	sts	0x025D, r17	; 0x80025d <FunctionGenerator.2758+0x13>
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <main+0xfd2>
					else FunctionGenerator.bias_B_sign = POSITIVE;
    288c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <FunctionGenerator.2758+0x13>
					
						if (FunctionGenerator.bias_B <= -330) FunctionGenerator.bias_B = -330;
    2890:	87 3b       	cpi	r24, 0xB7	; 183
    2892:	fe ef       	ldi	r31, 0xFE	; 254
    2894:	9f 07       	cpc	r25, r31
    2896:	3c f4       	brge	.+14     	; 0x28a6 <main+0xfe8>
    2898:	86 eb       	ldi	r24, 0xB6	; 182
    289a:	9e ef       	ldi	r25, 0xFE	; 254
    289c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    28a0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    28a4:	1a c0       	rjmp	.+52     	; 0x28da <main+0x101c>
						else {
							switch(buttonPressCounter) {
    28a6:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <buttonPressCounter.2761>
    28aa:	21 30       	cpi	r18, 0x01	; 1
    28ac:	51 f0       	breq	.+20     	; 0x28c2 <main+0x1004>
    28ae:	18 f0       	brcs	.+6      	; 0x28b6 <main+0xff8>
    28b0:	22 30       	cpi	r18, 0x02	; 2
    28b2:	69 f0       	breq	.+26     	; 0x28ce <main+0x1010>
    28b4:	12 c0       	rjmp	.+36     	; 0x28da <main+0x101c>
								case 0: FunctionGenerator.bias_B--; break;
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    28bc:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    28c0:	0c c0       	rjmp	.+24     	; 0x28da <main+0x101c>
								case 1: FunctionGenerator.bias_B -= 10; break;
    28c2:	0a 97       	sbiw	r24, 0x0a	; 10
    28c4:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    28c8:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <main+0x101c>
								case 2: FunctionGenerator.bias_B -= 100; break;
    28ce:	84 56       	subi	r24, 0x64	; 100
    28d0:	91 09       	sbc	r25, r1
    28d2:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <FunctionGenerator.2758+0x11>
    28d6:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <FunctionGenerator.2758+0x10>
							}
						}

					if (FunctionGenerator.bias_B_sign == POSITIVE) FG_SetBiasDC(FG1, 0, NEGATIVE);
    28da:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <FunctionGenerator.2758+0x13>
    28de:	81 11       	cpse	r24, r1
    28e0:	07 c0       	rjmp	.+14     	; 0x28f0 <main+0x1032>
    28e2:	41 2f       	mov	r20, r17
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	86 e0       	ldi	r24, 0x06	; 6
    28ea:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    28ee:	06 c0       	rjmp	.+12     	; 0x28fc <main+0x103e>
					else FG_SetBiasDC(FG1, 0, POSITIVE);
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	70 e0       	ldi	r23, 0x00	; 0
    28f6:	86 e0       	ldi	r24, 0x06	; 6
    28f8:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
					FG_SetBiasDC(FG1, (uint16_t)(abs(FunctionGenerator.bias_B) * 12.4), FunctionGenerator.bias_B_sign);
    28fc:	0f 2e       	mov	r0, r31
    28fe:	fa e4       	ldi	r31, 0x4A	; 74
    2900:	8f 2e       	mov	r8, r31
    2902:	f2 e0       	ldi	r31, 0x02	; 2
    2904:	9f 2e       	mov	r9, r31
    2906:	f0 2d       	mov	r31, r0
    2908:	f4 01       	movw	r30, r8
    290a:	60 89       	ldd	r22, Z+16	; 0x10
    290c:	71 89       	ldd	r23, Z+17	; 0x11
    290e:	77 23       	and	r23, r23
    2910:	1c f4       	brge	.+6      	; 0x2918 <main+0x105a>
    2912:	71 95       	neg	r23
    2914:	61 95       	neg	r22
    2916:	71 09       	sbc	r23, r1
    2918:	07 2e       	mov	r0, r23
    291a:	00 0c       	add	r0, r0
    291c:	88 0b       	sbc	r24, r24
    291e:	99 0b       	sbc	r25, r25
    2920:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__floatsisf>
    2924:	26 e6       	ldi	r18, 0x66	; 102
    2926:	36 e6       	ldi	r19, 0x66	; 102
    2928:	46 e4       	ldi	r20, 0x46	; 70
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    2930:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fixunssfsi>
    2934:	f4 01       	movw	r30, r8
    2936:	43 89       	ldd	r20, Z+19	; 0x13
    2938:	86 e0       	ldi	r24, 0x06	; 6
    293a:	0e 94 08 04 	call	0x810	; 0x810 <FG_SetBiasDC>
    293e:	16 c8       	rjmp	.-4052   	; 0x196c <main+0xae>
				}
						
				else if (switchState) {
    2940:	99 20       	and	r9, r9
    2942:	09 f4       	brne	.+2      	; 0x2946 <main+0x1088>
    2944:	13 c8       	rjmp	.-4058   	; 0x196c <main+0xae>
					if (buttonPressCounter < 2) buttonPressCounter++;
    2946:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <buttonPressCounter.2761>
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	20 f4       	brcc	.+8      	; 0x2956 <main+0x1098>
    294e:	8f 5f       	subi	r24, 0xFF	; 255
    2950:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <buttonPressCounter.2761>
    2954:	06 c0       	rjmp	.+12     	; 0x2962 <main+0x10a4>
					else {
						buttonPressCounter = 0;
    2956:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <buttonPressCounter.2761>
						mainDeviceState = PRIMARY_SCREENS;
    295a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
						displayPointer = PTR_NULL;
    295e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					}
					display.stateChanged = true;
    2962:	18 83       	st	Y, r17
    2964:	03 c8       	rjmp	.-4090   	; 0x196c <main+0xae>
				}
				break;
				
				case PTR_BACK:
				mainDeviceState = PRIMARY_SCREENS;
    2966:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
				displayPointer = PTR_NULL;
    296a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
				display.stateChanged = true;
    296e:	18 83       	st	Y, r17
				display.mainScreen = PARAMS_SCREEN;
    2970:	f2 e0       	ldi	r31, 0x02	; 2
    2972:	f9 83       	std	Y+1, r31	; 0x01
				break;
    2974:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				
				default: break;			}
		}
		else if (PARAMETER_LCD_POINTER_ON) {
			switch(displayPointer) {
    2978:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <displayPointer.2760>
    297c:	8e 30       	cpi	r24, 0x0E	; 14
    297e:	39 f0       	breq	.+14     	; 0x298e <main+0x10d0>
    2980:	8f 30       	cpi	r24, 0x0F	; 15
    2982:	91 f1       	breq	.+100    	; 0x29e8 <main+0x112a>
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	11 f0       	breq	.+4      	; 0x298c <main+0x10ce>
    2988:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
    298c:	5a c0       	rjmp	.+180    	; 0x2a42 <main+0x1184>
				case PTR_BRIGHT:
				if (encoderState == CW) {
    298e:	01 30       	cpi	r16, 0x01	; 1
    2990:	79 f4       	brne	.+30     	; 0x29b0 <main+0x10f2>
					display.stateChanged = true;
    2992:	18 83       	st	Y, r17
					lcdFunctionChanged = true;
    2994:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <lcdFunctionChanged.2764>
					if (LCD.brightness >= 100) LCD.brightness = 100;
    2998:	f6 01       	movw	r30, r12
    299a:	80 81       	ld	r24, Z
    299c:	84 36       	cpi	r24, 0x64	; 100
    299e:	18 f0       	brcs	.+6      	; 0x29a6 <main+0x10e8>
    29a0:	70 82       	st	Z, r7
    29a2:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					else LCD.brightness++;
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	f6 01       	movw	r30, r12
    29aa:	80 83       	st	Z, r24
    29ac:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    29b0:	02 30       	cpi	r16, 0x02	; 2
    29b2:	79 f4       	brne	.+30     	; 0x29d2 <main+0x1114>
					display.stateChanged = true;
    29b4:	18 83       	st	Y, r17
					lcdFunctionChanged = true;
    29b6:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <lcdFunctionChanged.2764>
					if (LCD.brightness <= 0) LCD.brightness = 0;
    29ba:	f6 01       	movw	r30, r12
    29bc:	80 81       	ld	r24, Z
    29be:	81 11       	cpse	r24, r1
    29c0:	03 c0       	rjmp	.+6      	; 0x29c8 <main+0x110a>
    29c2:	10 82       	st	Z, r1
    29c4:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					else LCD.brightness--;
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	f6 01       	movw	r30, r12
    29cc:	80 83       	st	Z, r24
    29ce:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    29d2:	99 20       	and	r9, r9
    29d4:	11 f4       	brne	.+4      	; 0x29da <main+0x111c>
    29d6:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					mainDeviceState = PRIMARY_SCREENS;
    29da:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
					displayPointer = PTR_NULL;
    29de:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					display.stateChanged = true;
    29e2:	18 83       	st	Y, r17
    29e4:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				break;
				
				case PTR_CONTR:
				if (encoderState == CW) {
    29e8:	01 30       	cpi	r16, 0x01	; 1
    29ea:	79 f4       	brne	.+30     	; 0x2a0a <main+0x114c>
					display.stateChanged = true;
    29ec:	18 83       	st	Y, r17
					lcdFunctionChanged = true;
    29ee:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <lcdFunctionChanged.2764>
					if (LCD.contrast >= 100) LCD.contrast = 100;
    29f2:	f6 01       	movw	r30, r12
    29f4:	81 81       	ldd	r24, Z+1	; 0x01
    29f6:	84 36       	cpi	r24, 0x64	; 100
    29f8:	18 f0       	brcs	.+6      	; 0x2a00 <main+0x1142>
    29fa:	71 82       	std	Z+1, r7	; 0x01
    29fc:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					else LCD.contrast++;
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	f6 01       	movw	r30, r12
    2a04:	81 83       	std	Z+1, r24	; 0x01
    2a06:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				else if (encoderState == CCW) {
    2a0a:	02 30       	cpi	r16, 0x02	; 2
    2a0c:	79 f4       	brne	.+30     	; 0x2a2c <main+0x116e>
					display.stateChanged = true;
    2a0e:	18 83       	st	Y, r17
					lcdFunctionChanged = true;
    2a10:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <lcdFunctionChanged.2764>
					if (LCD.contrast <= 0) LCD.contrast = 0;
    2a14:	f6 01       	movw	r30, r12
    2a16:	81 81       	ldd	r24, Z+1	; 0x01
    2a18:	81 11       	cpse	r24, r1
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <main+0x1164>
    2a1c:	11 82       	std	Z+1, r1	; 0x01
    2a1e:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					else LCD.contrast--;
    2a22:	81 50       	subi	r24, 0x01	; 1
    2a24:	f6 01       	movw	r30, r12
    2a26:	81 83       	std	Z+1, r24	; 0x01
    2a28:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				
				else if (switchState) {
    2a2c:	99 20       	and	r9, r9
    2a2e:	11 f4       	brne	.+4      	; 0x2a34 <main+0x1176>
    2a30:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
					mainDeviceState = PRIMARY_SCREENS;
    2a34:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
					displayPointer = PTR_NULL;
    2a38:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
					display.stateChanged = true;
    2a3c:	18 83       	st	Y, r17
    2a3e:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>
				}
				break;
				
				case PTR_BACK:
				mainDeviceState = PRIMARY_SCREENS;
    2a42:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <mainDeviceState.2757>
				displayPointer = PTR_NULL;
    2a46:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <displayPointer.2760>
				display.stateChanged = true;
    2a4a:	18 83       	st	Y, r17
				display.mainScreen = PARAMS_SCREEN;
    2a4c:	f2 e0       	ldi	r31, 0x02	; 2
    2a4e:	f9 83       	std	Y+1, r31	; 0x01
				break;
    2a50:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <main+0xae>

00002a54 <SPI_Write16Bit>:
#include "Headers\main.h"
#include "Headers\SPIMaster.h"
#include "Headers\USART.h"

void SPI_Write16Bit(uint8_t address_in, uint8_t data_in, enum Device device) {
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
	switch(device) {
    2a58:	04 2f       	mov	r16, r20
    2a5a:	10 e0       	ldi	r17, 0x00	; 0
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	31 97       	sbiw	r30, 0x01	; 1
    2a60:	e7 30       	cpi	r30, 0x07	; 7
    2a62:	f1 05       	cpc	r31, r1
    2a64:	88 f4       	brcc	.+34     	; 0x2a88 <SPI_Write16Bit+0x34>
    2a66:	e6 5a       	subi	r30, 0xA6	; 166
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
		case DACA: SPI_CE_PORT &= ~DACA_NCE; break;
    2a6e:	aa 98       	cbi	0x15, 2	; 21
    2a70:	0b c0       	rjmp	.+22     	; 0x2a88 <SPI_Write16Bit+0x34>
		case DACB: SPI_CE_PORT &= ~DACB_NCE; break;
    2a72:	ab 98       	cbi	0x15, 3	; 21
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <SPI_Write16Bit+0x34>
		case DACA_BIAS: SPI_CE_PORT &= ~DACA_BIAS_NCE; break;
    2a76:	ac 98       	cbi	0x15, 4	; 21
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <SPI_Write16Bit+0x34>
		case DACB_BIAS: SPI_CE_PORT &= ~DACB_BIAS_NCE; break;
    2a7a:	ad 98       	cbi	0x15, 5	; 21
    2a7c:	05 c0       	rjmp	.+10     	; 0x2a88 <SPI_Write16Bit+0x34>
		case FG0: SPI_CE_PORT &= ~FG0_NCE; break;
    2a7e:	ae 98       	cbi	0x15, 6	; 21
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <SPI_Write16Bit+0x34>
		case FG1: SPI_CE_PORT &= ~FG1_NCE; break;
    2a82:	af 98       	cbi	0x15, 7	; 21
    2a84:	01 c0       	rjmp	.+2      	; 0x2a88 <SPI_Write16Bit+0x34>
		case LCD_POT: LCD_POT_PORT &= ~POT_LCD_NCE; break;
    2a86:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a88:	98 e2       	ldi	r25, 0x28	; 40
    2a8a:	9a 95       	dec	r25
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <SPI_Write16Bit+0x36>
		default: break;
	}
	_delay_us(15);
	SPDR = address_in;
    2a8e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    2a90:	77 9b       	sbis	0x0e, 7	; 14
    2a92:	fe cf       	rjmp	.-4      	; 0x2a90 <SPI_Write16Bit+0x3c>
    2a94:	88 e2       	ldi	r24, 0x28	; 40
    2a96:	8a 95       	dec	r24
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <SPI_Write16Bit+0x42>
	_delay_us(15);
	SPDR = data_in;
    2a9a:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    2a9c:	77 9b       	sbis	0x0e, 7	; 14
    2a9e:	fe cf       	rjmp	.-4      	; 0x2a9c <SPI_Write16Bit+0x48>
    2aa0:	98 e2       	ldi	r25, 0x28	; 40
    2aa2:	9a 95       	dec	r25
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <SPI_Write16Bit+0x4e>
	_delay_us(15);
	switch(device) {
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	fa 01       	movw	r30, r20
    2aaa:	31 97       	sbiw	r30, 0x01	; 1
    2aac:	e7 30       	cpi	r30, 0x07	; 7
    2aae:	f1 05       	cpc	r31, r1
    2ab0:	88 f4       	brcc	.+34     	; 0x2ad4 <SPI_Write16Bit+0x80>
    2ab2:	ef 59       	subi	r30, 0x9F	; 159
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__tablejump2__>
		case DACA: SPI_CE_PORT |= DACA_NCE; break;
    2aba:	aa 9a       	sbi	0x15, 2	; 21
    2abc:	0b c0       	rjmp	.+22     	; 0x2ad4 <SPI_Write16Bit+0x80>
		case DACB: SPI_CE_PORT |= DACB_NCE; break;
    2abe:	ab 9a       	sbi	0x15, 3	; 21
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <SPI_Write16Bit+0x80>
		case DACA_BIAS: SPI_CE_PORT |= DACA_BIAS_NCE; break;
    2ac2:	ac 9a       	sbi	0x15, 4	; 21
    2ac4:	07 c0       	rjmp	.+14     	; 0x2ad4 <SPI_Write16Bit+0x80>
		case DACB_BIAS: SPI_CE_PORT |= DACB_BIAS_NCE; break;
    2ac6:	ad 9a       	sbi	0x15, 5	; 21
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <SPI_Write16Bit+0x80>
		case FG0: SPI_CE_PORT |= FG0_NCE; break;
    2aca:	ae 9a       	sbi	0x15, 6	; 21
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <SPI_Write16Bit+0x80>
		case FG1: SPI_CE_PORT |= FG1_NCE; break;
    2ace:	af 9a       	sbi	0x15, 7	; 21
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <SPI_Write16Bit+0x80>
		case LCD_POT: LCD_POT_PORT |= POT_LCD_NCE; break;
    2ad2:	dc 9a       	sbi	0x1b, 4	; 27
		default: break;
	}
}
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <SPI_InitAD9834>:

void SPI_InitAD9834(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    2ada:	85 b3       	in	r24, 0x15	; 21
    2adc:	8c 6f       	ori	r24, 0xFC	; 252
    2ade:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    2ae0:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    2ae2:	89 e5       	ldi	r24, 0x59	; 89
    2ae4:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2aea:	8f e1       	ldi	r24, 0x1F	; 31
    2aec:	9e e4       	ldi	r25, 0x4E	; 78
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <SPI_InitAD9834+0x14>
    2af2:	00 c0       	rjmp	.+0      	; 0x2af4 <SPI_InitAD9834+0x1a>
    2af4:	00 00       	nop
    2af6:	08 95       	ret

00002af8 <SPI_InitAll>:
	_delay_ms(10);
}

void SPI_InitAll(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    2af8:	85 b3       	in	r24, 0x15	; 21
    2afa:	8c 6f       	ori	r24, 0xFC	; 252
    2afc:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    2afe:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    2b00:	89 e5       	ldi	r24, 0x59	; 89
    2b02:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	8e b9       	out	0x0e, r24	; 14
    2b08:	8f e1       	ldi	r24, 0x1F	; 31
    2b0a:	9e e4       	ldi	r25, 0x4E	; 78
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <SPI_InitAll+0x14>
    2b10:	00 c0       	rjmp	.+0      	; 0x2b12 <SPI_InitAll+0x1a>
    2b12:	00 00       	nop
    2b14:	08 95       	ret

00002b16 <Init_UART>:
#include "Headers\USART.h"
#include "Headers\main.h"

void Init_UART() {
	UBRRH = (uint8_t) (3 >> 8);
    2b16:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) 3;
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN);
    2b1c:	88 e0       	ldi	r24, 0x08	; 8
    2b1e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    2b20:	8e e8       	ldi	r24, 0x8E	; 142
    2b22:	80 bd       	out	0x20, r24	; 32
    2b24:	08 95       	ret

00002b26 <__fixunssfsi>:
    2b26:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__fp_splitA>
    2b2a:	88 f0       	brcs	.+34     	; 0x2b4e <__fixunssfsi+0x28>
    2b2c:	9f 57       	subi	r25, 0x7F	; 127
    2b2e:	98 f0       	brcs	.+38     	; 0x2b56 <__fixunssfsi+0x30>
    2b30:	b9 2f       	mov	r27, r25
    2b32:	99 27       	eor	r25, r25
    2b34:	b7 51       	subi	r27, 0x17	; 23
    2b36:	b0 f0       	brcs	.+44     	; 0x2b64 <__fixunssfsi+0x3e>
    2b38:	e1 f0       	breq	.+56     	; 0x2b72 <__fixunssfsi+0x4c>
    2b3a:	66 0f       	add	r22, r22
    2b3c:	77 1f       	adc	r23, r23
    2b3e:	88 1f       	adc	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	1a f0       	brmi	.+6      	; 0x2b4a <__fixunssfsi+0x24>
    2b44:	ba 95       	dec	r27
    2b46:	c9 f7       	brne	.-14     	; 0x2b3a <__fixunssfsi+0x14>
    2b48:	14 c0       	rjmp	.+40     	; 0x2b72 <__fixunssfsi+0x4c>
    2b4a:	b1 30       	cpi	r27, 0x01	; 1
    2b4c:	91 f0       	breq	.+36     	; 0x2b72 <__fixunssfsi+0x4c>
    2b4e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fp_zero>
    2b52:	b1 e0       	ldi	r27, 0x01	; 1
    2b54:	08 95       	ret
    2b56:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__fp_zero>
    2b5a:	67 2f       	mov	r22, r23
    2b5c:	78 2f       	mov	r23, r24
    2b5e:	88 27       	eor	r24, r24
    2b60:	b8 5f       	subi	r27, 0xF8	; 248
    2b62:	39 f0       	breq	.+14     	; 0x2b72 <__fixunssfsi+0x4c>
    2b64:	b9 3f       	cpi	r27, 0xF9	; 249
    2b66:	cc f3       	brlt	.-14     	; 0x2b5a <__fixunssfsi+0x34>
    2b68:	86 95       	lsr	r24
    2b6a:	77 95       	ror	r23
    2b6c:	67 95       	ror	r22
    2b6e:	b3 95       	inc	r27
    2b70:	d9 f7       	brne	.-10     	; 0x2b68 <__fixunssfsi+0x42>
    2b72:	3e f4       	brtc	.+14     	; 0x2b82 <__fixunssfsi+0x5c>
    2b74:	90 95       	com	r25
    2b76:	80 95       	com	r24
    2b78:	70 95       	com	r23
    2b7a:	61 95       	neg	r22
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	08 95       	ret

00002b84 <__floatunsisf>:
    2b84:	e8 94       	clt
    2b86:	09 c0       	rjmp	.+18     	; 0x2b9a <__floatsisf+0x12>

00002b88 <__floatsisf>:
    2b88:	97 fb       	bst	r25, 7
    2b8a:	3e f4       	brtc	.+14     	; 0x2b9a <__floatsisf+0x12>
    2b8c:	90 95       	com	r25
    2b8e:	80 95       	com	r24
    2b90:	70 95       	com	r23
    2b92:	61 95       	neg	r22
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	99 23       	and	r25, r25
    2b9c:	a9 f0       	breq	.+42     	; 0x2bc8 <__floatsisf+0x40>
    2b9e:	f9 2f       	mov	r31, r25
    2ba0:	96 e9       	ldi	r25, 0x96	; 150
    2ba2:	bb 27       	eor	r27, r27
    2ba4:	93 95       	inc	r25
    2ba6:	f6 95       	lsr	r31
    2ba8:	87 95       	ror	r24
    2baa:	77 95       	ror	r23
    2bac:	67 95       	ror	r22
    2bae:	b7 95       	ror	r27
    2bb0:	f1 11       	cpse	r31, r1
    2bb2:	f8 cf       	rjmp	.-16     	; 0x2ba4 <__floatsisf+0x1c>
    2bb4:	fa f4       	brpl	.+62     	; 0x2bf4 <__floatsisf+0x6c>
    2bb6:	bb 0f       	add	r27, r27
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <__floatsisf+0x36>
    2bba:	60 ff       	sbrs	r22, 0
    2bbc:	1b c0       	rjmp	.+54     	; 0x2bf4 <__floatsisf+0x6c>
    2bbe:	6f 5f       	subi	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc6:	16 c0       	rjmp	.+44     	; 0x2bf4 <__floatsisf+0x6c>
    2bc8:	88 23       	and	r24, r24
    2bca:	11 f0       	breq	.+4      	; 0x2bd0 <__floatsisf+0x48>
    2bcc:	96 e9       	ldi	r25, 0x96	; 150
    2bce:	11 c0       	rjmp	.+34     	; 0x2bf2 <__floatsisf+0x6a>
    2bd0:	77 23       	and	r23, r23
    2bd2:	21 f0       	breq	.+8      	; 0x2bdc <__floatsisf+0x54>
    2bd4:	9e e8       	ldi	r25, 0x8E	; 142
    2bd6:	87 2f       	mov	r24, r23
    2bd8:	76 2f       	mov	r23, r22
    2bda:	05 c0       	rjmp	.+10     	; 0x2be6 <__floatsisf+0x5e>
    2bdc:	66 23       	and	r22, r22
    2bde:	71 f0       	breq	.+28     	; 0x2bfc <__floatsisf+0x74>
    2be0:	96 e8       	ldi	r25, 0x86	; 134
    2be2:	86 2f       	mov	r24, r22
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	2a f0       	brmi	.+10     	; 0x2bf4 <__floatsisf+0x6c>
    2bea:	9a 95       	dec	r25
    2bec:	66 0f       	add	r22, r22
    2bee:	77 1f       	adc	r23, r23
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	da f7       	brpl	.-10     	; 0x2bea <__floatsisf+0x62>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	96 95       	lsr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	97 f9       	bld	r25, 7
    2bfc:	08 95       	ret

00002bfe <__fp_split3>:
    2bfe:	57 fd       	sbrc	r21, 7
    2c00:	90 58       	subi	r25, 0x80	; 128
    2c02:	44 0f       	add	r20, r20
    2c04:	55 1f       	adc	r21, r21
    2c06:	59 f0       	breq	.+22     	; 0x2c1e <__fp_splitA+0x10>
    2c08:	5f 3f       	cpi	r21, 0xFF	; 255
    2c0a:	71 f0       	breq	.+28     	; 0x2c28 <__fp_splitA+0x1a>
    2c0c:	47 95       	ror	r20

00002c0e <__fp_splitA>:
    2c0e:	88 0f       	add	r24, r24
    2c10:	97 fb       	bst	r25, 7
    2c12:	99 1f       	adc	r25, r25
    2c14:	61 f0       	breq	.+24     	; 0x2c2e <__fp_splitA+0x20>
    2c16:	9f 3f       	cpi	r25, 0xFF	; 255
    2c18:	79 f0       	breq	.+30     	; 0x2c38 <__fp_splitA+0x2a>
    2c1a:	87 95       	ror	r24
    2c1c:	08 95       	ret
    2c1e:	12 16       	cp	r1, r18
    2c20:	13 06       	cpc	r1, r19
    2c22:	14 06       	cpc	r1, r20
    2c24:	55 1f       	adc	r21, r21
    2c26:	f2 cf       	rjmp	.-28     	; 0x2c0c <__fp_split3+0xe>
    2c28:	46 95       	lsr	r20
    2c2a:	f1 df       	rcall	.-30     	; 0x2c0e <__fp_splitA>
    2c2c:	08 c0       	rjmp	.+16     	; 0x2c3e <__fp_splitA+0x30>
    2c2e:	16 16       	cp	r1, r22
    2c30:	17 06       	cpc	r1, r23
    2c32:	18 06       	cpc	r1, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	f1 cf       	rjmp	.-30     	; 0x2c1a <__fp_splitA+0xc>
    2c38:	86 95       	lsr	r24
    2c3a:	71 05       	cpc	r23, r1
    2c3c:	61 05       	cpc	r22, r1
    2c3e:	08 94       	sec
    2c40:	08 95       	ret

00002c42 <__fp_zero>:
    2c42:	e8 94       	clt

00002c44 <__fp_szero>:
    2c44:	bb 27       	eor	r27, r27
    2c46:	66 27       	eor	r22, r22
    2c48:	77 27       	eor	r23, r23
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	97 f9       	bld	r25, 7
    2c4e:	08 95       	ret

00002c50 <__mulsf3>:
    2c50:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__mulsf3x>
    2c54:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__fp_round>
    2c58:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_pscA>
    2c5c:	38 f0       	brcs	.+14     	; 0x2c6c <__mulsf3+0x1c>
    2c5e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__fp_pscB>
    2c62:	20 f0       	brcs	.+8      	; 0x2c6c <__mulsf3+0x1c>
    2c64:	95 23       	and	r25, r21
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <__mulsf3+0x1c>
    2c68:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__fp_inf>
    2c6c:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__fp_nan>
    2c70:	11 24       	eor	r1, r1
    2c72:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_szero>

00002c76 <__mulsf3x>:
    2c76:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__fp_split3>
    2c7a:	70 f3       	brcs	.-36     	; 0x2c58 <__mulsf3+0x8>

00002c7c <__mulsf3_pse>:
    2c7c:	95 9f       	mul	r25, r21
    2c7e:	c1 f3       	breq	.-16     	; 0x2c70 <__mulsf3+0x20>
    2c80:	95 0f       	add	r25, r21
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	55 1f       	adc	r21, r21
    2c86:	62 9f       	mul	r22, r18
    2c88:	f0 01       	movw	r30, r0
    2c8a:	72 9f       	mul	r23, r18
    2c8c:	bb 27       	eor	r27, r27
    2c8e:	f0 0d       	add	r31, r0
    2c90:	b1 1d       	adc	r27, r1
    2c92:	63 9f       	mul	r22, r19
    2c94:	aa 27       	eor	r26, r26
    2c96:	f0 0d       	add	r31, r0
    2c98:	b1 1d       	adc	r27, r1
    2c9a:	aa 1f       	adc	r26, r26
    2c9c:	64 9f       	mul	r22, r20
    2c9e:	66 27       	eor	r22, r22
    2ca0:	b0 0d       	add	r27, r0
    2ca2:	a1 1d       	adc	r26, r1
    2ca4:	66 1f       	adc	r22, r22
    2ca6:	82 9f       	mul	r24, r18
    2ca8:	22 27       	eor	r18, r18
    2caa:	b0 0d       	add	r27, r0
    2cac:	a1 1d       	adc	r26, r1
    2cae:	62 1f       	adc	r22, r18
    2cb0:	73 9f       	mul	r23, r19
    2cb2:	b0 0d       	add	r27, r0
    2cb4:	a1 1d       	adc	r26, r1
    2cb6:	62 1f       	adc	r22, r18
    2cb8:	83 9f       	mul	r24, r19
    2cba:	a0 0d       	add	r26, r0
    2cbc:	61 1d       	adc	r22, r1
    2cbe:	22 1f       	adc	r18, r18
    2cc0:	74 9f       	mul	r23, r20
    2cc2:	33 27       	eor	r19, r19
    2cc4:	a0 0d       	add	r26, r0
    2cc6:	61 1d       	adc	r22, r1
    2cc8:	23 1f       	adc	r18, r19
    2cca:	84 9f       	mul	r24, r20
    2ccc:	60 0d       	add	r22, r0
    2cce:	21 1d       	adc	r18, r1
    2cd0:	82 2f       	mov	r24, r18
    2cd2:	76 2f       	mov	r23, r22
    2cd4:	6a 2f       	mov	r22, r26
    2cd6:	11 24       	eor	r1, r1
    2cd8:	9f 57       	subi	r25, 0x7F	; 127
    2cda:	50 40       	sbci	r21, 0x00	; 0
    2cdc:	9a f0       	brmi	.+38     	; 0x2d04 <__mulsf3_pse+0x88>
    2cde:	f1 f0       	breq	.+60     	; 0x2d1c <__mulsf3_pse+0xa0>
    2ce0:	88 23       	and	r24, r24
    2ce2:	4a f0       	brmi	.+18     	; 0x2cf6 <__mulsf3_pse+0x7a>
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	bb 1f       	adc	r27, r27
    2cea:	66 1f       	adc	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	88 1f       	adc	r24, r24
    2cf0:	91 50       	subi	r25, 0x01	; 1
    2cf2:	50 40       	sbci	r21, 0x00	; 0
    2cf4:	a9 f7       	brne	.-22     	; 0x2ce0 <__mulsf3_pse+0x64>
    2cf6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cf8:	51 05       	cpc	r21, r1
    2cfa:	80 f0       	brcs	.+32     	; 0x2d1c <__mulsf3_pse+0xa0>
    2cfc:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__fp_inf>
    2d00:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_szero>
    2d04:	5f 3f       	cpi	r21, 0xFF	; 255
    2d06:	e4 f3       	brlt	.-8      	; 0x2d00 <__mulsf3_pse+0x84>
    2d08:	98 3e       	cpi	r25, 0xE8	; 232
    2d0a:	d4 f3       	brlt	.-12     	; 0x2d00 <__mulsf3_pse+0x84>
    2d0c:	86 95       	lsr	r24
    2d0e:	77 95       	ror	r23
    2d10:	67 95       	ror	r22
    2d12:	b7 95       	ror	r27
    2d14:	f7 95       	ror	r31
    2d16:	e7 95       	ror	r30
    2d18:	9f 5f       	subi	r25, 0xFF	; 255
    2d1a:	c1 f7       	brne	.-16     	; 0x2d0c <__mulsf3_pse+0x90>
    2d1c:	fe 2b       	or	r31, r30
    2d1e:	88 0f       	add	r24, r24
    2d20:	91 1d       	adc	r25, r1
    2d22:	96 95       	lsr	r25
    2d24:	87 95       	ror	r24
    2d26:	97 f9       	bld	r25, 7
    2d28:	08 95       	ret

00002d2a <__fp_inf>:
    2d2a:	97 f9       	bld	r25, 7
    2d2c:	9f 67       	ori	r25, 0x7F	; 127
    2d2e:	80 e8       	ldi	r24, 0x80	; 128
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	08 95       	ret

00002d36 <__fp_nan>:
    2d36:	9f ef       	ldi	r25, 0xFF	; 255
    2d38:	80 ec       	ldi	r24, 0xC0	; 192
    2d3a:	08 95       	ret

00002d3c <__fp_pscA>:
    2d3c:	00 24       	eor	r0, r0
    2d3e:	0a 94       	dec	r0
    2d40:	16 16       	cp	r1, r22
    2d42:	17 06       	cpc	r1, r23
    2d44:	18 06       	cpc	r1, r24
    2d46:	09 06       	cpc	r0, r25
    2d48:	08 95       	ret

00002d4a <__fp_pscB>:
    2d4a:	00 24       	eor	r0, r0
    2d4c:	0a 94       	dec	r0
    2d4e:	12 16       	cp	r1, r18
    2d50:	13 06       	cpc	r1, r19
    2d52:	14 06       	cpc	r1, r20
    2d54:	05 06       	cpc	r0, r21
    2d56:	08 95       	ret

00002d58 <__fp_round>:
    2d58:	09 2e       	mov	r0, r25
    2d5a:	03 94       	inc	r0
    2d5c:	00 0c       	add	r0, r0
    2d5e:	11 f4       	brne	.+4      	; 0x2d64 <__fp_round+0xc>
    2d60:	88 23       	and	r24, r24
    2d62:	52 f0       	brmi	.+20     	; 0x2d78 <__fp_round+0x20>
    2d64:	bb 0f       	add	r27, r27
    2d66:	40 f4       	brcc	.+16     	; 0x2d78 <__fp_round+0x20>
    2d68:	bf 2b       	or	r27, r31
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <__fp_round+0x18>
    2d6c:	60 ff       	sbrs	r22, 0
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <__fp_round+0x20>
    2d70:	6f 5f       	subi	r22, 0xFF	; 255
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	08 95       	ret

00002d7a <__divmodhi4>:
    2d7a:	97 fb       	bst	r25, 7
    2d7c:	07 2e       	mov	r0, r23
    2d7e:	16 f4       	brtc	.+4      	; 0x2d84 <__divmodhi4+0xa>
    2d80:	00 94       	com	r0
    2d82:	07 d0       	rcall	.+14     	; 0x2d92 <__divmodhi4_neg1>
    2d84:	77 fd       	sbrc	r23, 7
    2d86:	09 d0       	rcall	.+18     	; 0x2d9a <__divmodhi4_neg2>
    2d88:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__udivmodhi4>
    2d8c:	07 fc       	sbrc	r0, 7
    2d8e:	05 d0       	rcall	.+10     	; 0x2d9a <__divmodhi4_neg2>
    2d90:	3e f4       	brtc	.+14     	; 0x2da0 <__divmodhi4_exit>

00002d92 <__divmodhi4_neg1>:
    2d92:	90 95       	com	r25
    2d94:	81 95       	neg	r24
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	08 95       	ret

00002d9a <__divmodhi4_neg2>:
    2d9a:	70 95       	com	r23
    2d9c:	61 95       	neg	r22
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255

00002da0 <__divmodhi4_exit>:
    2da0:	08 95       	ret

00002da2 <__udivmodsi4>:
    2da2:	a1 e2       	ldi	r26, 0x21	; 33
    2da4:	1a 2e       	mov	r1, r26
    2da6:	aa 1b       	sub	r26, r26
    2da8:	bb 1b       	sub	r27, r27
    2daa:	fd 01       	movw	r30, r26
    2dac:	0d c0       	rjmp	.+26     	; 0x2dc8 <__udivmodsi4_ep>

00002dae <__udivmodsi4_loop>:
    2dae:	aa 1f       	adc	r26, r26
    2db0:	bb 1f       	adc	r27, r27
    2db2:	ee 1f       	adc	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	a2 17       	cp	r26, r18
    2db8:	b3 07       	cpc	r27, r19
    2dba:	e4 07       	cpc	r30, r20
    2dbc:	f5 07       	cpc	r31, r21
    2dbe:	20 f0       	brcs	.+8      	; 0x2dc8 <__udivmodsi4_ep>
    2dc0:	a2 1b       	sub	r26, r18
    2dc2:	b3 0b       	sbc	r27, r19
    2dc4:	e4 0b       	sbc	r30, r20
    2dc6:	f5 0b       	sbc	r31, r21

00002dc8 <__udivmodsi4_ep>:
    2dc8:	66 1f       	adc	r22, r22
    2dca:	77 1f       	adc	r23, r23
    2dcc:	88 1f       	adc	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	1a 94       	dec	r1
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <__udivmodsi4_loop>
    2dd4:	60 95       	com	r22
    2dd6:	70 95       	com	r23
    2dd8:	80 95       	com	r24
    2dda:	90 95       	com	r25
    2ddc:	9b 01       	movw	r18, r22
    2dde:	ac 01       	movw	r20, r24
    2de0:	bd 01       	movw	r22, r26
    2de2:	cf 01       	movw	r24, r30
    2de4:	08 95       	ret

00002de6 <__tablejump2__>:
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	05 90       	lpm	r0, Z+
    2dec:	f4 91       	lpm	r31, Z
    2dee:	e0 2d       	mov	r30, r0
    2df0:	09 94       	ijmp

00002df2 <__udivmodhi4>:
    2df2:	aa 1b       	sub	r26, r26
    2df4:	bb 1b       	sub	r27, r27
    2df6:	51 e1       	ldi	r21, 0x11	; 17
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <__udivmodhi4_ep>

00002dfa <__udivmodhi4_loop>:
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	a6 17       	cp	r26, r22
    2e00:	b7 07       	cpc	r27, r23
    2e02:	10 f0       	brcs	.+4      	; 0x2e08 <__udivmodhi4_ep>
    2e04:	a6 1b       	sub	r26, r22
    2e06:	b7 0b       	sbc	r27, r23

00002e08 <__udivmodhi4_ep>:
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	5a 95       	dec	r21
    2e0e:	a9 f7       	brne	.-22     	; 0x2dfa <__udivmodhi4_loop>
    2e10:	80 95       	com	r24
    2e12:	90 95       	com	r25
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	08 95       	ret

00002e1a <memset>:
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <memset+0x6>
    2e1e:	6d 93       	st	X+, r22
    2e20:	41 50       	subi	r20, 0x01	; 1
    2e22:	50 40       	sbci	r21, 0x00	; 0
    2e24:	e0 f7       	brcc	.-8      	; 0x2e1e <memset+0x4>
    2e26:	08 95       	ret

00002e28 <snprintf>:
    2e28:	ae e0       	ldi	r26, 0x0E	; 14
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	ea e1       	ldi	r30, 0x1A	; 26
    2e2e:	f7 e1       	ldi	r31, 0x17	; 23
    2e30:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x1c>
    2e34:	0d 89       	ldd	r16, Y+21	; 0x15
    2e36:	1e 89       	ldd	r17, Y+22	; 0x16
    2e38:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3c:	26 e0       	ldi	r18, 0x06	; 6
    2e3e:	2c 83       	std	Y+4, r18	; 0x04
    2e40:	1a 83       	std	Y+2, r17	; 0x02
    2e42:	09 83       	std	Y+1, r16	; 0x01
    2e44:	97 ff       	sbrs	r25, 7
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <snprintf+0x24>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e8       	ldi	r25, 0x80	; 128
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	ae 01       	movw	r20, r28
    2e54:	45 5e       	subi	r20, 0xE5	; 229
    2e56:	5f 4f       	sbci	r21, 0xFF	; 255
    2e58:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	0e 94 44 17 	call	0x2e88	; 0x2e88 <vfprintf>
    2e64:	4d 81       	ldd	r20, Y+5	; 0x05
    2e66:	5e 81       	ldd	r21, Y+6	; 0x06
    2e68:	57 fd       	sbrc	r21, 7
    2e6a:	0a c0       	rjmp	.+20     	; 0x2e80 <snprintf+0x58>
    2e6c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e6e:	38 85       	ldd	r19, Y+8	; 0x08
    2e70:	42 17       	cp	r20, r18
    2e72:	53 07       	cpc	r21, r19
    2e74:	0c f4       	brge	.+2      	; 0x2e78 <snprintf+0x50>
    2e76:	9a 01       	movw	r18, r20
    2e78:	f8 01       	movw	r30, r16
    2e7a:	e2 0f       	add	r30, r18
    2e7c:	f3 1f       	adc	r31, r19
    2e7e:	10 82       	st	Z, r1
    2e80:	2e 96       	adiw	r28, 0x0e	; 14
    2e82:	e4 e0       	ldi	r30, 0x04	; 4
    2e84:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x1c>

00002e88 <vfprintf>:
    2e88:	ab e0       	ldi	r26, 0x0B	; 11
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ea e4       	ldi	r30, 0x4A	; 74
    2e8e:	f7 e1       	ldi	r31, 0x17	; 23
    2e90:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__>
    2e94:	6c 01       	movw	r12, r24
    2e96:	7b 01       	movw	r14, r22
    2e98:	8a 01       	movw	r16, r20
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	17 82       	std	Z+7, r1	; 0x07
    2e9e:	16 82       	std	Z+6, r1	; 0x06
    2ea0:	83 81       	ldd	r24, Z+3	; 0x03
    2ea2:	81 ff       	sbrs	r24, 1
    2ea4:	cc c1       	rjmp	.+920    	; 0x323e <vfprintf+0x3b6>
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	3c 01       	movw	r6, r24
    2eac:	f6 01       	movw	r30, r12
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	f7 01       	movw	r30, r14
    2eb2:	93 fd       	sbrc	r25, 3
    2eb4:	85 91       	lpm	r24, Z+
    2eb6:	93 ff       	sbrs	r25, 3
    2eb8:	81 91       	ld	r24, Z+
    2eba:	7f 01       	movw	r14, r30
    2ebc:	88 23       	and	r24, r24
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <vfprintf+0x3a>
    2ec0:	ba c1       	rjmp	.+884    	; 0x3236 <vfprintf+0x3ae>
    2ec2:	85 32       	cpi	r24, 0x25	; 37
    2ec4:	39 f4       	brne	.+14     	; 0x2ed4 <vfprintf+0x4c>
    2ec6:	93 fd       	sbrc	r25, 3
    2ec8:	85 91       	lpm	r24, Z+
    2eca:	93 ff       	sbrs	r25, 3
    2ecc:	81 91       	ld	r24, Z+
    2ece:	7f 01       	movw	r14, r30
    2ed0:	85 32       	cpi	r24, 0x25	; 37
    2ed2:	29 f4       	brne	.+10     	; 0x2ede <vfprintf+0x56>
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    2edc:	e7 cf       	rjmp	.-50     	; 0x2eac <vfprintf+0x24>
    2ede:	91 2c       	mov	r9, r1
    2ee0:	21 2c       	mov	r2, r1
    2ee2:	31 2c       	mov	r3, r1
    2ee4:	ff e1       	ldi	r31, 0x1F	; 31
    2ee6:	f3 15       	cp	r31, r3
    2ee8:	d8 f0       	brcs	.+54     	; 0x2f20 <vfprintf+0x98>
    2eea:	8b 32       	cpi	r24, 0x2B	; 43
    2eec:	79 f0       	breq	.+30     	; 0x2f0c <vfprintf+0x84>
    2eee:	38 f4       	brcc	.+14     	; 0x2efe <vfprintf+0x76>
    2ef0:	80 32       	cpi	r24, 0x20	; 32
    2ef2:	79 f0       	breq	.+30     	; 0x2f12 <vfprintf+0x8a>
    2ef4:	83 32       	cpi	r24, 0x23	; 35
    2ef6:	a1 f4       	brne	.+40     	; 0x2f20 <vfprintf+0x98>
    2ef8:	23 2d       	mov	r18, r3
    2efa:	20 61       	ori	r18, 0x10	; 16
    2efc:	1d c0       	rjmp	.+58     	; 0x2f38 <vfprintf+0xb0>
    2efe:	8d 32       	cpi	r24, 0x2D	; 45
    2f00:	61 f0       	breq	.+24     	; 0x2f1a <vfprintf+0x92>
    2f02:	80 33       	cpi	r24, 0x30	; 48
    2f04:	69 f4       	brne	.+26     	; 0x2f20 <vfprintf+0x98>
    2f06:	23 2d       	mov	r18, r3
    2f08:	21 60       	ori	r18, 0x01	; 1
    2f0a:	16 c0       	rjmp	.+44     	; 0x2f38 <vfprintf+0xb0>
    2f0c:	83 2d       	mov	r24, r3
    2f0e:	82 60       	ori	r24, 0x02	; 2
    2f10:	38 2e       	mov	r3, r24
    2f12:	e3 2d       	mov	r30, r3
    2f14:	e4 60       	ori	r30, 0x04	; 4
    2f16:	3e 2e       	mov	r3, r30
    2f18:	2a c0       	rjmp	.+84     	; 0x2f6e <vfprintf+0xe6>
    2f1a:	f3 2d       	mov	r31, r3
    2f1c:	f8 60       	ori	r31, 0x08	; 8
    2f1e:	1d c0       	rjmp	.+58     	; 0x2f5a <vfprintf+0xd2>
    2f20:	37 fc       	sbrc	r3, 7
    2f22:	2d c0       	rjmp	.+90     	; 0x2f7e <vfprintf+0xf6>
    2f24:	20 ed       	ldi	r18, 0xD0	; 208
    2f26:	28 0f       	add	r18, r24
    2f28:	2a 30       	cpi	r18, 0x0A	; 10
    2f2a:	40 f0       	brcs	.+16     	; 0x2f3c <vfprintf+0xb4>
    2f2c:	8e 32       	cpi	r24, 0x2E	; 46
    2f2e:	b9 f4       	brne	.+46     	; 0x2f5e <vfprintf+0xd6>
    2f30:	36 fc       	sbrc	r3, 6
    2f32:	81 c1       	rjmp	.+770    	; 0x3236 <vfprintf+0x3ae>
    2f34:	23 2d       	mov	r18, r3
    2f36:	20 64       	ori	r18, 0x40	; 64
    2f38:	32 2e       	mov	r3, r18
    2f3a:	19 c0       	rjmp	.+50     	; 0x2f6e <vfprintf+0xe6>
    2f3c:	36 fe       	sbrs	r3, 6
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <vfprintf+0xc4>
    2f40:	8a e0       	ldi	r24, 0x0A	; 10
    2f42:	98 9e       	mul	r9, r24
    2f44:	20 0d       	add	r18, r0
    2f46:	11 24       	eor	r1, r1
    2f48:	92 2e       	mov	r9, r18
    2f4a:	11 c0       	rjmp	.+34     	; 0x2f6e <vfprintf+0xe6>
    2f4c:	ea e0       	ldi	r30, 0x0A	; 10
    2f4e:	2e 9e       	mul	r2, r30
    2f50:	20 0d       	add	r18, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	22 2e       	mov	r2, r18
    2f56:	f3 2d       	mov	r31, r3
    2f58:	f0 62       	ori	r31, 0x20	; 32
    2f5a:	3f 2e       	mov	r3, r31
    2f5c:	08 c0       	rjmp	.+16     	; 0x2f6e <vfprintf+0xe6>
    2f5e:	8c 36       	cpi	r24, 0x6C	; 108
    2f60:	21 f4       	brne	.+8      	; 0x2f6a <vfprintf+0xe2>
    2f62:	83 2d       	mov	r24, r3
    2f64:	80 68       	ori	r24, 0x80	; 128
    2f66:	38 2e       	mov	r3, r24
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <vfprintf+0xe6>
    2f6a:	88 36       	cpi	r24, 0x68	; 104
    2f6c:	41 f4       	brne	.+16     	; 0x2f7e <vfprintf+0xf6>
    2f6e:	f7 01       	movw	r30, r14
    2f70:	93 fd       	sbrc	r25, 3
    2f72:	85 91       	lpm	r24, Z+
    2f74:	93 ff       	sbrs	r25, 3
    2f76:	81 91       	ld	r24, Z+
    2f78:	7f 01       	movw	r14, r30
    2f7a:	81 11       	cpse	r24, r1
    2f7c:	b3 cf       	rjmp	.-154    	; 0x2ee4 <vfprintf+0x5c>
    2f7e:	98 2f       	mov	r25, r24
    2f80:	9f 7d       	andi	r25, 0xDF	; 223
    2f82:	95 54       	subi	r25, 0x45	; 69
    2f84:	93 30       	cpi	r25, 0x03	; 3
    2f86:	28 f4       	brcc	.+10     	; 0x2f92 <vfprintf+0x10a>
    2f88:	0c 5f       	subi	r16, 0xFC	; 252
    2f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8c:	9f e3       	ldi	r25, 0x3F	; 63
    2f8e:	99 83       	std	Y+1, r25	; 0x01
    2f90:	0d c0       	rjmp	.+26     	; 0x2fac <vfprintf+0x124>
    2f92:	83 36       	cpi	r24, 0x63	; 99
    2f94:	31 f0       	breq	.+12     	; 0x2fa2 <vfprintf+0x11a>
    2f96:	83 37       	cpi	r24, 0x73	; 115
    2f98:	71 f0       	breq	.+28     	; 0x2fb6 <vfprintf+0x12e>
    2f9a:	83 35       	cpi	r24, 0x53	; 83
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <vfprintf+0x118>
    2f9e:	59 c0       	rjmp	.+178    	; 0x3052 <vfprintf+0x1ca>
    2fa0:	21 c0       	rjmp	.+66     	; 0x2fe4 <vfprintf+0x15c>
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	80 81       	ld	r24, Z
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	0e 5f       	subi	r16, 0xFE	; 254
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	88 24       	eor	r8, r8
    2fae:	83 94       	inc	r8
    2fb0:	91 2c       	mov	r9, r1
    2fb2:	53 01       	movw	r10, r6
    2fb4:	13 c0       	rjmp	.+38     	; 0x2fdc <vfprintf+0x154>
    2fb6:	28 01       	movw	r4, r16
    2fb8:	f2 e0       	ldi	r31, 0x02	; 2
    2fba:	4f 0e       	add	r4, r31
    2fbc:	51 1c       	adc	r5, r1
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	a0 80       	ld	r10, Z
    2fc2:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc4:	36 fe       	sbrs	r3, 6
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <vfprintf+0x146>
    2fc8:	69 2d       	mov	r22, r9
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <vfprintf+0x14a>
    2fce:	6f ef       	ldi	r22, 0xFF	; 255
    2fd0:	7f ef       	ldi	r23, 0xFF	; 255
    2fd2:	c5 01       	movw	r24, r10
    2fd4:	0e 94 30 19 	call	0x3260	; 0x3260 <strnlen>
    2fd8:	4c 01       	movw	r8, r24
    2fda:	82 01       	movw	r16, r4
    2fdc:	f3 2d       	mov	r31, r3
    2fde:	ff 77       	andi	r31, 0x7F	; 127
    2fe0:	3f 2e       	mov	r3, r31
    2fe2:	16 c0       	rjmp	.+44     	; 0x3010 <vfprintf+0x188>
    2fe4:	28 01       	movw	r4, r16
    2fe6:	22 e0       	ldi	r18, 0x02	; 2
    2fe8:	42 0e       	add	r4, r18
    2fea:	51 1c       	adc	r5, r1
    2fec:	f8 01       	movw	r30, r16
    2fee:	a0 80       	ld	r10, Z
    2ff0:	b1 80       	ldd	r11, Z+1	; 0x01
    2ff2:	36 fe       	sbrs	r3, 6
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <vfprintf+0x174>
    2ff6:	69 2d       	mov	r22, r9
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <vfprintf+0x178>
    2ffc:	6f ef       	ldi	r22, 0xFF	; 255
    2ffe:	7f ef       	ldi	r23, 0xFF	; 255
    3000:	c5 01       	movw	r24, r10
    3002:	0e 94 25 19 	call	0x324a	; 0x324a <strnlen_P>
    3006:	4c 01       	movw	r8, r24
    3008:	f3 2d       	mov	r31, r3
    300a:	f0 68       	ori	r31, 0x80	; 128
    300c:	3f 2e       	mov	r3, r31
    300e:	82 01       	movw	r16, r4
    3010:	33 fc       	sbrc	r3, 3
    3012:	1b c0       	rjmp	.+54     	; 0x304a <vfprintf+0x1c2>
    3014:	82 2d       	mov	r24, r2
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	88 16       	cp	r8, r24
    301a:	99 06       	cpc	r9, r25
    301c:	b0 f4       	brcc	.+44     	; 0x304a <vfprintf+0x1c2>
    301e:	b6 01       	movw	r22, r12
    3020:	80 e2       	ldi	r24, 0x20	; 32
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    3028:	2a 94       	dec	r2
    302a:	f4 cf       	rjmp	.-24     	; 0x3014 <vfprintf+0x18c>
    302c:	f5 01       	movw	r30, r10
    302e:	37 fc       	sbrc	r3, 7
    3030:	85 91       	lpm	r24, Z+
    3032:	37 fe       	sbrs	r3, 7
    3034:	81 91       	ld	r24, Z+
    3036:	5f 01       	movw	r10, r30
    3038:	b6 01       	movw	r22, r12
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    3040:	21 10       	cpse	r2, r1
    3042:	2a 94       	dec	r2
    3044:	21 e0       	ldi	r18, 0x01	; 1
    3046:	82 1a       	sub	r8, r18
    3048:	91 08       	sbc	r9, r1
    304a:	81 14       	cp	r8, r1
    304c:	91 04       	cpc	r9, r1
    304e:	71 f7       	brne	.-36     	; 0x302c <vfprintf+0x1a4>
    3050:	e8 c0       	rjmp	.+464    	; 0x3222 <vfprintf+0x39a>
    3052:	84 36       	cpi	r24, 0x64	; 100
    3054:	11 f0       	breq	.+4      	; 0x305a <vfprintf+0x1d2>
    3056:	89 36       	cpi	r24, 0x69	; 105
    3058:	41 f5       	brne	.+80     	; 0x30aa <vfprintf+0x222>
    305a:	f8 01       	movw	r30, r16
    305c:	37 fe       	sbrs	r3, 7
    305e:	07 c0       	rjmp	.+14     	; 0x306e <vfprintf+0x1e6>
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	0c 5f       	subi	r16, 0xFC	; 252
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	08 c0       	rjmp	.+16     	; 0x307e <vfprintf+0x1f6>
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	07 2e       	mov	r0, r23
    3074:	00 0c       	add	r0, r0
    3076:	88 0b       	sbc	r24, r24
    3078:	99 0b       	sbc	r25, r25
    307a:	0e 5f       	subi	r16, 0xFE	; 254
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	f3 2d       	mov	r31, r3
    3080:	ff 76       	andi	r31, 0x6F	; 111
    3082:	3f 2e       	mov	r3, r31
    3084:	97 ff       	sbrs	r25, 7
    3086:	09 c0       	rjmp	.+18     	; 0x309a <vfprintf+0x212>
    3088:	90 95       	com	r25
    308a:	80 95       	com	r24
    308c:	70 95       	com	r23
    308e:	61 95       	neg	r22
    3090:	7f 4f       	sbci	r23, 0xFF	; 255
    3092:	8f 4f       	sbci	r24, 0xFF	; 255
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	f0 68       	ori	r31, 0x80	; 128
    3098:	3f 2e       	mov	r3, r31
    309a:	2a e0       	ldi	r18, 0x0A	; 10
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	a3 01       	movw	r20, r6
    30a0:	0e 94 77 19 	call	0x32ee	; 0x32ee <__ultoa_invert>
    30a4:	88 2e       	mov	r8, r24
    30a6:	86 18       	sub	r8, r6
    30a8:	45 c0       	rjmp	.+138    	; 0x3134 <vfprintf+0x2ac>
    30aa:	85 37       	cpi	r24, 0x75	; 117
    30ac:	31 f4       	brne	.+12     	; 0x30ba <vfprintf+0x232>
    30ae:	23 2d       	mov	r18, r3
    30b0:	2f 7e       	andi	r18, 0xEF	; 239
    30b2:	b2 2e       	mov	r11, r18
    30b4:	2a e0       	ldi	r18, 0x0A	; 10
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	25 c0       	rjmp	.+74     	; 0x3104 <vfprintf+0x27c>
    30ba:	93 2d       	mov	r25, r3
    30bc:	99 7f       	andi	r25, 0xF9	; 249
    30be:	b9 2e       	mov	r11, r25
    30c0:	8f 36       	cpi	r24, 0x6F	; 111
    30c2:	c1 f0       	breq	.+48     	; 0x30f4 <vfprintf+0x26c>
    30c4:	18 f4       	brcc	.+6      	; 0x30cc <vfprintf+0x244>
    30c6:	88 35       	cpi	r24, 0x58	; 88
    30c8:	79 f0       	breq	.+30     	; 0x30e8 <vfprintf+0x260>
    30ca:	b5 c0       	rjmp	.+362    	; 0x3236 <vfprintf+0x3ae>
    30cc:	80 37       	cpi	r24, 0x70	; 112
    30ce:	19 f0       	breq	.+6      	; 0x30d6 <vfprintf+0x24e>
    30d0:	88 37       	cpi	r24, 0x78	; 120
    30d2:	21 f0       	breq	.+8      	; 0x30dc <vfprintf+0x254>
    30d4:	b0 c0       	rjmp	.+352    	; 0x3236 <vfprintf+0x3ae>
    30d6:	e9 2f       	mov	r30, r25
    30d8:	e0 61       	ori	r30, 0x10	; 16
    30da:	be 2e       	mov	r11, r30
    30dc:	b4 fe       	sbrs	r11, 4
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <vfprintf+0x272>
    30e0:	fb 2d       	mov	r31, r11
    30e2:	f4 60       	ori	r31, 0x04	; 4
    30e4:	bf 2e       	mov	r11, r31
    30e6:	09 c0       	rjmp	.+18     	; 0x30fa <vfprintf+0x272>
    30e8:	34 fe       	sbrs	r3, 4
    30ea:	0a c0       	rjmp	.+20     	; 0x3100 <vfprintf+0x278>
    30ec:	29 2f       	mov	r18, r25
    30ee:	26 60       	ori	r18, 0x06	; 6
    30f0:	b2 2e       	mov	r11, r18
    30f2:	06 c0       	rjmp	.+12     	; 0x3100 <vfprintf+0x278>
    30f4:	28 e0       	ldi	r18, 0x08	; 8
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	05 c0       	rjmp	.+10     	; 0x3104 <vfprintf+0x27c>
    30fa:	20 e1       	ldi	r18, 0x10	; 16
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <vfprintf+0x27c>
    3100:	20 e1       	ldi	r18, 0x10	; 16
    3102:	32 e0       	ldi	r19, 0x02	; 2
    3104:	f8 01       	movw	r30, r16
    3106:	b7 fe       	sbrs	r11, 7
    3108:	07 c0       	rjmp	.+14     	; 0x3118 <vfprintf+0x290>
    310a:	60 81       	ld	r22, Z
    310c:	71 81       	ldd	r23, Z+1	; 0x01
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	93 81       	ldd	r25, Z+3	; 0x03
    3112:	0c 5f       	subi	r16, 0xFC	; 252
    3114:	1f 4f       	sbci	r17, 0xFF	; 255
    3116:	06 c0       	rjmp	.+12     	; 0x3124 <vfprintf+0x29c>
    3118:	60 81       	ld	r22, Z
    311a:	71 81       	ldd	r23, Z+1	; 0x01
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 5f       	subi	r16, 0xFE	; 254
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	a3 01       	movw	r20, r6
    3126:	0e 94 77 19 	call	0x32ee	; 0x32ee <__ultoa_invert>
    312a:	88 2e       	mov	r8, r24
    312c:	86 18       	sub	r8, r6
    312e:	fb 2d       	mov	r31, r11
    3130:	ff 77       	andi	r31, 0x7F	; 127
    3132:	3f 2e       	mov	r3, r31
    3134:	36 fe       	sbrs	r3, 6
    3136:	0d c0       	rjmp	.+26     	; 0x3152 <vfprintf+0x2ca>
    3138:	23 2d       	mov	r18, r3
    313a:	2e 7f       	andi	r18, 0xFE	; 254
    313c:	a2 2e       	mov	r10, r18
    313e:	89 14       	cp	r8, r9
    3140:	58 f4       	brcc	.+22     	; 0x3158 <vfprintf+0x2d0>
    3142:	34 fe       	sbrs	r3, 4
    3144:	0b c0       	rjmp	.+22     	; 0x315c <vfprintf+0x2d4>
    3146:	32 fc       	sbrc	r3, 2
    3148:	09 c0       	rjmp	.+18     	; 0x315c <vfprintf+0x2d4>
    314a:	83 2d       	mov	r24, r3
    314c:	8e 7e       	andi	r24, 0xEE	; 238
    314e:	a8 2e       	mov	r10, r24
    3150:	05 c0       	rjmp	.+10     	; 0x315c <vfprintf+0x2d4>
    3152:	b8 2c       	mov	r11, r8
    3154:	a3 2c       	mov	r10, r3
    3156:	03 c0       	rjmp	.+6      	; 0x315e <vfprintf+0x2d6>
    3158:	b8 2c       	mov	r11, r8
    315a:	01 c0       	rjmp	.+2      	; 0x315e <vfprintf+0x2d6>
    315c:	b9 2c       	mov	r11, r9
    315e:	a4 fe       	sbrs	r10, 4
    3160:	0f c0       	rjmp	.+30     	; 0x3180 <vfprintf+0x2f8>
    3162:	fe 01       	movw	r30, r28
    3164:	e8 0d       	add	r30, r8
    3166:	f1 1d       	adc	r31, r1
    3168:	80 81       	ld	r24, Z
    316a:	80 33       	cpi	r24, 0x30	; 48
    316c:	21 f4       	brne	.+8      	; 0x3176 <vfprintf+0x2ee>
    316e:	9a 2d       	mov	r25, r10
    3170:	99 7e       	andi	r25, 0xE9	; 233
    3172:	a9 2e       	mov	r10, r25
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <vfprintf+0x300>
    3176:	a2 fe       	sbrs	r10, 2
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <vfprintf+0x2fe>
    317a:	b3 94       	inc	r11
    317c:	b3 94       	inc	r11
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <vfprintf+0x300>
    3180:	8a 2d       	mov	r24, r10
    3182:	86 78       	andi	r24, 0x86	; 134
    3184:	09 f0       	breq	.+2      	; 0x3188 <vfprintf+0x300>
    3186:	b3 94       	inc	r11
    3188:	a3 fc       	sbrc	r10, 3
    318a:	11 c0       	rjmp	.+34     	; 0x31ae <vfprintf+0x326>
    318c:	a0 fe       	sbrs	r10, 0
    318e:	06 c0       	rjmp	.+12     	; 0x319c <vfprintf+0x314>
    3190:	b2 14       	cp	r11, r2
    3192:	88 f4       	brcc	.+34     	; 0x31b6 <vfprintf+0x32e>
    3194:	28 0c       	add	r2, r8
    3196:	92 2c       	mov	r9, r2
    3198:	9b 18       	sub	r9, r11
    319a:	0e c0       	rjmp	.+28     	; 0x31b8 <vfprintf+0x330>
    319c:	b2 14       	cp	r11, r2
    319e:	60 f4       	brcc	.+24     	; 0x31b8 <vfprintf+0x330>
    31a0:	b6 01       	movw	r22, r12
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    31aa:	b3 94       	inc	r11
    31ac:	f7 cf       	rjmp	.-18     	; 0x319c <vfprintf+0x314>
    31ae:	b2 14       	cp	r11, r2
    31b0:	18 f4       	brcc	.+6      	; 0x31b8 <vfprintf+0x330>
    31b2:	2b 18       	sub	r2, r11
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x332>
    31b6:	98 2c       	mov	r9, r8
    31b8:	21 2c       	mov	r2, r1
    31ba:	a4 fe       	sbrs	r10, 4
    31bc:	10 c0       	rjmp	.+32     	; 0x31de <vfprintf+0x356>
    31be:	b6 01       	movw	r22, r12
    31c0:	80 e3       	ldi	r24, 0x30	; 48
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    31c8:	a2 fe       	sbrs	r10, 2
    31ca:	17 c0       	rjmp	.+46     	; 0x31fa <vfprintf+0x372>
    31cc:	a1 fc       	sbrc	r10, 1
    31ce:	03 c0       	rjmp	.+6      	; 0x31d6 <vfprintf+0x34e>
    31d0:	88 e7       	ldi	r24, 0x78	; 120
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <vfprintf+0x352>
    31d6:	88 e5       	ldi	r24, 0x58	; 88
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	b6 01       	movw	r22, r12
    31dc:	0c c0       	rjmp	.+24     	; 0x31f6 <vfprintf+0x36e>
    31de:	8a 2d       	mov	r24, r10
    31e0:	86 78       	andi	r24, 0x86	; 134
    31e2:	59 f0       	breq	.+22     	; 0x31fa <vfprintf+0x372>
    31e4:	a1 fe       	sbrs	r10, 1
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <vfprintf+0x364>
    31e8:	8b e2       	ldi	r24, 0x2B	; 43
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <vfprintf+0x366>
    31ec:	80 e2       	ldi	r24, 0x20	; 32
    31ee:	a7 fc       	sbrc	r10, 7
    31f0:	8d e2       	ldi	r24, 0x2D	; 45
    31f2:	b6 01       	movw	r22, r12
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    31fa:	89 14       	cp	r8, r9
    31fc:	38 f4       	brcc	.+14     	; 0x320c <vfprintf+0x384>
    31fe:	b6 01       	movw	r22, r12
    3200:	80 e3       	ldi	r24, 0x30	; 48
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    3208:	9a 94       	dec	r9
    320a:	f7 cf       	rjmp	.-18     	; 0x31fa <vfprintf+0x372>
    320c:	8a 94       	dec	r8
    320e:	f3 01       	movw	r30, r6
    3210:	e8 0d       	add	r30, r8
    3212:	f1 1d       	adc	r31, r1
    3214:	80 81       	ld	r24, Z
    3216:	b6 01       	movw	r22, r12
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    321e:	81 10       	cpse	r8, r1
    3220:	f5 cf       	rjmp	.-22     	; 0x320c <vfprintf+0x384>
    3222:	22 20       	and	r2, r2
    3224:	09 f4       	brne	.+2      	; 0x3228 <vfprintf+0x3a0>
    3226:	42 ce       	rjmp	.-892    	; 0x2eac <vfprintf+0x24>
    3228:	b6 01       	movw	r22, r12
    322a:	80 e2       	ldi	r24, 0x20	; 32
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 3b 19 	call	0x3276	; 0x3276 <fputc>
    3232:	2a 94       	dec	r2
    3234:	f6 cf       	rjmp	.-20     	; 0x3222 <vfprintf+0x39a>
    3236:	f6 01       	movw	r30, r12
    3238:	86 81       	ldd	r24, Z+6	; 0x06
    323a:	97 81       	ldd	r25, Z+7	; 0x07
    323c:	02 c0       	rjmp	.+4      	; 0x3242 <vfprintf+0x3ba>
    323e:	8f ef       	ldi	r24, 0xFF	; 255
    3240:	9f ef       	ldi	r25, 0xFF	; 255
    3242:	2b 96       	adiw	r28, 0x0b	; 11
    3244:	e2 e1       	ldi	r30, 0x12	; 18
    3246:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__>

0000324a <strnlen_P>:
    324a:	fc 01       	movw	r30, r24
    324c:	05 90       	lpm	r0, Z+
    324e:	61 50       	subi	r22, 0x01	; 1
    3250:	70 40       	sbci	r23, 0x00	; 0
    3252:	01 10       	cpse	r0, r1
    3254:	d8 f7       	brcc	.-10     	; 0x324c <strnlen_P+0x2>
    3256:	80 95       	com	r24
    3258:	90 95       	com	r25
    325a:	8e 0f       	add	r24, r30
    325c:	9f 1f       	adc	r25, r31
    325e:	08 95       	ret

00003260 <strnlen>:
    3260:	fc 01       	movw	r30, r24
    3262:	61 50       	subi	r22, 0x01	; 1
    3264:	70 40       	sbci	r23, 0x00	; 0
    3266:	01 90       	ld	r0, Z+
    3268:	01 10       	cpse	r0, r1
    326a:	d8 f7       	brcc	.-10     	; 0x3262 <strnlen+0x2>
    326c:	80 95       	com	r24
    326e:	90 95       	com	r25
    3270:	8e 0f       	add	r24, r30
    3272:	9f 1f       	adc	r25, r31
    3274:	08 95       	ret

00003276 <fputc>:
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	fb 01       	movw	r30, r22
    3280:	23 81       	ldd	r18, Z+3	; 0x03
    3282:	21 fd       	sbrc	r18, 1
    3284:	03 c0       	rjmp	.+6      	; 0x328c <fputc+0x16>
    3286:	8f ef       	ldi	r24, 0xFF	; 255
    3288:	9f ef       	ldi	r25, 0xFF	; 255
    328a:	2c c0       	rjmp	.+88     	; 0x32e4 <fputc+0x6e>
    328c:	22 ff       	sbrs	r18, 2
    328e:	16 c0       	rjmp	.+44     	; 0x32bc <fputc+0x46>
    3290:	46 81       	ldd	r20, Z+6	; 0x06
    3292:	57 81       	ldd	r21, Z+7	; 0x07
    3294:	24 81       	ldd	r18, Z+4	; 0x04
    3296:	35 81       	ldd	r19, Z+5	; 0x05
    3298:	42 17       	cp	r20, r18
    329a:	53 07       	cpc	r21, r19
    329c:	44 f4       	brge	.+16     	; 0x32ae <fputc+0x38>
    329e:	a0 81       	ld	r26, Z
    32a0:	b1 81       	ldd	r27, Z+1	; 0x01
    32a2:	9d 01       	movw	r18, r26
    32a4:	2f 5f       	subi	r18, 0xFF	; 255
    32a6:	3f 4f       	sbci	r19, 0xFF	; 255
    32a8:	31 83       	std	Z+1, r19	; 0x01
    32aa:	20 83       	st	Z, r18
    32ac:	8c 93       	st	X, r24
    32ae:	26 81       	ldd	r18, Z+6	; 0x06
    32b0:	37 81       	ldd	r19, Z+7	; 0x07
    32b2:	2f 5f       	subi	r18, 0xFF	; 255
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	37 83       	std	Z+7, r19	; 0x07
    32b8:	26 83       	std	Z+6, r18	; 0x06
    32ba:	14 c0       	rjmp	.+40     	; 0x32e4 <fputc+0x6e>
    32bc:	8b 01       	movw	r16, r22
    32be:	ec 01       	movw	r28, r24
    32c0:	fb 01       	movw	r30, r22
    32c2:	00 84       	ldd	r0, Z+8	; 0x08
    32c4:	f1 85       	ldd	r31, Z+9	; 0x09
    32c6:	e0 2d       	mov	r30, r0
    32c8:	09 95       	icall
    32ca:	89 2b       	or	r24, r25
    32cc:	e1 f6       	brne	.-72     	; 0x3286 <fputc+0x10>
    32ce:	d8 01       	movw	r26, r16
    32d0:	16 96       	adiw	r26, 0x06	; 6
    32d2:	8d 91       	ld	r24, X+
    32d4:	9c 91       	ld	r25, X
    32d6:	17 97       	sbiw	r26, 0x07	; 7
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	17 96       	adiw	r26, 0x07	; 7
    32dc:	9c 93       	st	X, r25
    32de:	8e 93       	st	-X, r24
    32e0:	16 97       	sbiw	r26, 0x06	; 6
    32e2:	ce 01       	movw	r24, r28
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <__ultoa_invert>:
    32ee:	fa 01       	movw	r30, r20
    32f0:	aa 27       	eor	r26, r26
    32f2:	28 30       	cpi	r18, 0x08	; 8
    32f4:	51 f1       	breq	.+84     	; 0x334a <__ultoa_invert+0x5c>
    32f6:	20 31       	cpi	r18, 0x10	; 16
    32f8:	81 f1       	breq	.+96     	; 0x335a <__ultoa_invert+0x6c>
    32fa:	e8 94       	clt
    32fc:	6f 93       	push	r22
    32fe:	6e 7f       	andi	r22, 0xFE	; 254
    3300:	6e 5f       	subi	r22, 0xFE	; 254
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	8f 4f       	sbci	r24, 0xFF	; 255
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	af 4f       	sbci	r26, 0xFF	; 255
    330a:	b1 e0       	ldi	r27, 0x01	; 1
    330c:	3e d0       	rcall	.+124    	; 0x338a <__ultoa_invert+0x9c>
    330e:	b4 e0       	ldi	r27, 0x04	; 4
    3310:	3c d0       	rcall	.+120    	; 0x338a <__ultoa_invert+0x9c>
    3312:	67 0f       	add	r22, r23
    3314:	78 1f       	adc	r23, r24
    3316:	89 1f       	adc	r24, r25
    3318:	9a 1f       	adc	r25, r26
    331a:	a1 1d       	adc	r26, r1
    331c:	68 0f       	add	r22, r24
    331e:	79 1f       	adc	r23, r25
    3320:	8a 1f       	adc	r24, r26
    3322:	91 1d       	adc	r25, r1
    3324:	a1 1d       	adc	r26, r1
    3326:	6a 0f       	add	r22, r26
    3328:	71 1d       	adc	r23, r1
    332a:	81 1d       	adc	r24, r1
    332c:	91 1d       	adc	r25, r1
    332e:	a1 1d       	adc	r26, r1
    3330:	20 d0       	rcall	.+64     	; 0x3372 <__ultoa_invert+0x84>
    3332:	09 f4       	brne	.+2      	; 0x3336 <__ultoa_invert+0x48>
    3334:	68 94       	set
    3336:	3f 91       	pop	r19
    3338:	2a e0       	ldi	r18, 0x0A	; 10
    333a:	26 9f       	mul	r18, r22
    333c:	11 24       	eor	r1, r1
    333e:	30 19       	sub	r19, r0
    3340:	30 5d       	subi	r19, 0xD0	; 208
    3342:	31 93       	st	Z+, r19
    3344:	de f6       	brtc	.-74     	; 0x32fc <__ultoa_invert+0xe>
    3346:	cf 01       	movw	r24, r30
    3348:	08 95       	ret
    334a:	46 2f       	mov	r20, r22
    334c:	47 70       	andi	r20, 0x07	; 7
    334e:	40 5d       	subi	r20, 0xD0	; 208
    3350:	41 93       	st	Z+, r20
    3352:	b3 e0       	ldi	r27, 0x03	; 3
    3354:	0f d0       	rcall	.+30     	; 0x3374 <__ultoa_invert+0x86>
    3356:	c9 f7       	brne	.-14     	; 0x334a <__ultoa_invert+0x5c>
    3358:	f6 cf       	rjmp	.-20     	; 0x3346 <__ultoa_invert+0x58>
    335a:	46 2f       	mov	r20, r22
    335c:	4f 70       	andi	r20, 0x0F	; 15
    335e:	40 5d       	subi	r20, 0xD0	; 208
    3360:	4a 33       	cpi	r20, 0x3A	; 58
    3362:	18 f0       	brcs	.+6      	; 0x336a <__ultoa_invert+0x7c>
    3364:	49 5d       	subi	r20, 0xD9	; 217
    3366:	31 fd       	sbrc	r19, 1
    3368:	40 52       	subi	r20, 0x20	; 32
    336a:	41 93       	st	Z+, r20
    336c:	02 d0       	rcall	.+4      	; 0x3372 <__ultoa_invert+0x84>
    336e:	a9 f7       	brne	.-22     	; 0x335a <__ultoa_invert+0x6c>
    3370:	ea cf       	rjmp	.-44     	; 0x3346 <__ultoa_invert+0x58>
    3372:	b4 e0       	ldi	r27, 0x04	; 4
    3374:	a6 95       	lsr	r26
    3376:	97 95       	ror	r25
    3378:	87 95       	ror	r24
    337a:	77 95       	ror	r23
    337c:	67 95       	ror	r22
    337e:	ba 95       	dec	r27
    3380:	c9 f7       	brne	.-14     	; 0x3374 <__ultoa_invert+0x86>
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	61 05       	cpc	r22, r1
    3386:	71 05       	cpc	r23, r1
    3388:	08 95       	ret
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	0a 2e       	mov	r0, r26
    3390:	06 94       	lsr	r0
    3392:	57 95       	ror	r21
    3394:	47 95       	ror	r20
    3396:	37 95       	ror	r19
    3398:	27 95       	ror	r18
    339a:	ba 95       	dec	r27
    339c:	c9 f7       	brne	.-14     	; 0x3390 <__ultoa_invert+0xa2>
    339e:	62 0f       	add	r22, r18
    33a0:	73 1f       	adc	r23, r19
    33a2:	84 1f       	adc	r24, r20
    33a4:	95 1f       	adc	r25, r21
    33a6:	a0 1d       	adc	r26, r0
    33a8:	08 95       	ret

000033aa <eeprom_read_byte>:
    33aa:	e1 99       	sbic	0x1c, 1	; 28
    33ac:	fe cf       	rjmp	.-4      	; 0x33aa <eeprom_read_byte>
    33ae:	9f bb       	out	0x1f, r25	; 31
    33b0:	8e bb       	out	0x1e, r24	; 30
    33b2:	e0 9a       	sbi	0x1c, 0	; 28
    33b4:	99 27       	eor	r25, r25
    33b6:	8d b3       	in	r24, 0x1d	; 29
    33b8:	08 95       	ret

000033ba <eeprom_read_dword>:
    33ba:	a6 e1       	ldi	r26, 0x16	; 22
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	44 e0       	ldi	r20, 0x04	; 4
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	0c 94 05 1a 	jmp	0x340a	; 0x340a <eeprom_read_blraw>

000033c6 <eeprom_read_word>:
    33c6:	a8 e1       	ldi	r26, 0x18	; 24
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	42 e0       	ldi	r20, 0x02	; 2
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	0c 94 05 1a 	jmp	0x340a	; 0x340a <eeprom_read_blraw>

000033d2 <eeprom_write_byte>:
    33d2:	26 2f       	mov	r18, r22

000033d4 <eeprom_write_r18>:
    33d4:	e1 99       	sbic	0x1c, 1	; 28
    33d6:	fe cf       	rjmp	.-4      	; 0x33d4 <eeprom_write_r18>
    33d8:	9f bb       	out	0x1f, r25	; 31
    33da:	8e bb       	out	0x1e, r24	; 30
    33dc:	2d bb       	out	0x1d, r18	; 29
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	e2 9a       	sbi	0x1c, 2	; 28
    33e4:	e1 9a       	sbi	0x1c, 1	; 28
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	08 95       	ret

000033ec <eeprom_write_dword>:
    33ec:	24 2f       	mov	r18, r20
    33ee:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_r18>
    33f2:	25 2f       	mov	r18, r21
    33f4:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_r18>
    33f8:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <eeprom_write_word>

000033fc <eeprom_write_word>:
    33fc:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <eeprom_write_byte>
    3400:	27 2f       	mov	r18, r23
    3402:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_r18>

00003406 <eeprom_read_block>:
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22

0000340a <eeprom_read_blraw>:
    340a:	fc 01       	movw	r30, r24
    340c:	e1 99       	sbic	0x1c, 1	; 28
    340e:	fe cf       	rjmp	.-4      	; 0x340c <eeprom_read_blraw+0x2>
    3410:	06 c0       	rjmp	.+12     	; 0x341e <eeprom_read_blraw+0x14>
    3412:	ff bb       	out	0x1f, r31	; 31
    3414:	ee bb       	out	0x1e, r30	; 30
    3416:	e0 9a       	sbi	0x1c, 0	; 28
    3418:	31 96       	adiw	r30, 0x01	; 1
    341a:	0d b2       	in	r0, 0x1d	; 29
    341c:	0d 92       	st	X+, r0
    341e:	41 50       	subi	r20, 0x01	; 1
    3420:	50 40       	sbci	r21, 0x00	; 0
    3422:	b8 f7       	brcc	.-18     	; 0x3412 <eeprom_read_blraw+0x8>
    3424:	08 95       	ret

00003426 <__prologue_saves__>:
    3426:	2f 92       	push	r2
    3428:	3f 92       	push	r3
    342a:	4f 92       	push	r4
    342c:	5f 92       	push	r5
    342e:	6f 92       	push	r6
    3430:	7f 92       	push	r7
    3432:	8f 92       	push	r8
    3434:	9f 92       	push	r9
    3436:	af 92       	push	r10
    3438:	bf 92       	push	r11
    343a:	cf 92       	push	r12
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	ca 1b       	sub	r28, r26
    3450:	db 0b       	sbc	r29, r27
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	09 94       	ijmp

0000345e <__epilogue_restores__>:
    345e:	2a 88       	ldd	r2, Y+18	; 0x12
    3460:	39 88       	ldd	r3, Y+17	; 0x11
    3462:	48 88       	ldd	r4, Y+16	; 0x10
    3464:	5f 84       	ldd	r5, Y+15	; 0x0f
    3466:	6e 84       	ldd	r6, Y+14	; 0x0e
    3468:	7d 84       	ldd	r7, Y+13	; 0x0d
    346a:	8c 84       	ldd	r8, Y+12	; 0x0c
    346c:	9b 84       	ldd	r9, Y+11	; 0x0b
    346e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3470:	b9 84       	ldd	r11, Y+9	; 0x09
    3472:	c8 84       	ldd	r12, Y+8	; 0x08
    3474:	df 80       	ldd	r13, Y+7	; 0x07
    3476:	ee 80       	ldd	r14, Y+6	; 0x06
    3478:	fd 80       	ldd	r15, Y+5	; 0x05
    347a:	0c 81       	ldd	r16, Y+4	; 0x04
    347c:	1b 81       	ldd	r17, Y+3	; 0x03
    347e:	aa 81       	ldd	r26, Y+2	; 0x02
    3480:	b9 81       	ldd	r27, Y+1	; 0x01
    3482:	ce 0f       	add	r28, r30
    3484:	d1 1d       	adc	r29, r1
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	ed 01       	movw	r28, r26
    3492:	08 95       	ret

00003494 <_exit>:
    3494:	f8 94       	cli

00003496 <__stop_program>:
    3496:	ff cf       	rjmp	.-2      	; 0x3496 <__stop_program>
